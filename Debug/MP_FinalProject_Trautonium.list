
MP_FinalProject_Trautonium.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fb4  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  0800a13c  0800a13c  0000b13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a550  0800a550  0000c0a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a550  0800a550  0000b550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a558  0800a558  0000c0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a558  0800a558  0000b558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a55c  0800a55c  0000b55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  0800a560  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c0a0  2**0
                  CONTENTS
 10 .bss          00000670  200000a0  200000a0  0000c0a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000710  20000710  0000c0a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c0a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001125e  00000000  00000000  0000c0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000289a  00000000  00000000  0001d32e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d8  00000000  00000000  0001fbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d36  00000000  00000000  00020ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000234c3  00000000  00000000  000219d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000160f5  00000000  00000000  00044e99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da404  00000000  00000000  0005af8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00135392  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004dd4  00000000  00000000  001353d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0013a1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a0 	.word	0x200000a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a124 	.word	0x0800a124

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a4 	.word	0x200000a4
 80001c4:	0800a124 	.word	0x0800a124

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b988 	b.w	8000d6c <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	468e      	mov	lr, r1
 8000a7c:	4604      	mov	r4, r0
 8000a7e:	4688      	mov	r8, r1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d14a      	bne.n	8000b1a <__udivmoddi4+0xa6>
 8000a84:	428a      	cmp	r2, r1
 8000a86:	4617      	mov	r7, r2
 8000a88:	d962      	bls.n	8000b50 <__udivmoddi4+0xdc>
 8000a8a:	fab2 f682 	clz	r6, r2
 8000a8e:	b14e      	cbz	r6, 8000aa4 <__udivmoddi4+0x30>
 8000a90:	f1c6 0320 	rsb	r3, r6, #32
 8000a94:	fa01 f806 	lsl.w	r8, r1, r6
 8000a98:	fa20 f303 	lsr.w	r3, r0, r3
 8000a9c:	40b7      	lsls	r7, r6
 8000a9e:	ea43 0808 	orr.w	r8, r3, r8
 8000aa2:	40b4      	lsls	r4, r6
 8000aa4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aa8:	fa1f fc87 	uxth.w	ip, r7
 8000aac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ab0:	0c23      	lsrs	r3, r4, #16
 8000ab2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ab6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aba:	fb01 f20c 	mul.w	r2, r1, ip
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d909      	bls.n	8000ad6 <__udivmoddi4+0x62>
 8000ac2:	18fb      	adds	r3, r7, r3
 8000ac4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ac8:	f080 80ea 	bcs.w	8000ca0 <__udivmoddi4+0x22c>
 8000acc:	429a      	cmp	r2, r3
 8000ace:	f240 80e7 	bls.w	8000ca0 <__udivmoddi4+0x22c>
 8000ad2:	3902      	subs	r1, #2
 8000ad4:	443b      	add	r3, r7
 8000ad6:	1a9a      	subs	r2, r3, r2
 8000ad8:	b2a3      	uxth	r3, r4
 8000ada:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ade:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ae2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ae6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aea:	459c      	cmp	ip, r3
 8000aec:	d909      	bls.n	8000b02 <__udivmoddi4+0x8e>
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000af4:	f080 80d6 	bcs.w	8000ca4 <__udivmoddi4+0x230>
 8000af8:	459c      	cmp	ip, r3
 8000afa:	f240 80d3 	bls.w	8000ca4 <__udivmoddi4+0x230>
 8000afe:	443b      	add	r3, r7
 8000b00:	3802      	subs	r0, #2
 8000b02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b06:	eba3 030c 	sub.w	r3, r3, ip
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	b11d      	cbz	r5, 8000b16 <__udivmoddi4+0xa2>
 8000b0e:	40f3      	lsrs	r3, r6
 8000b10:	2200      	movs	r2, #0
 8000b12:	e9c5 3200 	strd	r3, r2, [r5]
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d905      	bls.n	8000b2a <__udivmoddi4+0xb6>
 8000b1e:	b10d      	cbz	r5, 8000b24 <__udivmoddi4+0xb0>
 8000b20:	e9c5 0100 	strd	r0, r1, [r5]
 8000b24:	2100      	movs	r1, #0
 8000b26:	4608      	mov	r0, r1
 8000b28:	e7f5      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000b2a:	fab3 f183 	clz	r1, r3
 8000b2e:	2900      	cmp	r1, #0
 8000b30:	d146      	bne.n	8000bc0 <__udivmoddi4+0x14c>
 8000b32:	4573      	cmp	r3, lr
 8000b34:	d302      	bcc.n	8000b3c <__udivmoddi4+0xc8>
 8000b36:	4282      	cmp	r2, r0
 8000b38:	f200 8105 	bhi.w	8000d46 <__udivmoddi4+0x2d2>
 8000b3c:	1a84      	subs	r4, r0, r2
 8000b3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b42:	2001      	movs	r0, #1
 8000b44:	4690      	mov	r8, r2
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d0e5      	beq.n	8000b16 <__udivmoddi4+0xa2>
 8000b4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b4e:	e7e2      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000b50:	2a00      	cmp	r2, #0
 8000b52:	f000 8090 	beq.w	8000c76 <__udivmoddi4+0x202>
 8000b56:	fab2 f682 	clz	r6, r2
 8000b5a:	2e00      	cmp	r6, #0
 8000b5c:	f040 80a4 	bne.w	8000ca8 <__udivmoddi4+0x234>
 8000b60:	1a8a      	subs	r2, r1, r2
 8000b62:	0c03      	lsrs	r3, r0, #16
 8000b64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b68:	b280      	uxth	r0, r0
 8000b6a:	b2bc      	uxth	r4, r7
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d907      	bls.n	8000b92 <__udivmoddi4+0x11e>
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b88:	d202      	bcs.n	8000b90 <__udivmoddi4+0x11c>
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	f200 80e0 	bhi.w	8000d50 <__udivmoddi4+0x2dc>
 8000b90:	46c4      	mov	ip, r8
 8000b92:	1a9b      	subs	r3, r3, r2
 8000b94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ba0:	fb02 f404 	mul.w	r4, r2, r4
 8000ba4:	429c      	cmp	r4, r3
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x144>
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x142>
 8000bb0:	429c      	cmp	r4, r3
 8000bb2:	f200 80ca 	bhi.w	8000d4a <__udivmoddi4+0x2d6>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	1b1b      	subs	r3, r3, r4
 8000bba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bbe:	e7a5      	b.n	8000b0c <__udivmoddi4+0x98>
 8000bc0:	f1c1 0620 	rsb	r6, r1, #32
 8000bc4:	408b      	lsls	r3, r1
 8000bc6:	fa22 f706 	lsr.w	r7, r2, r6
 8000bca:	431f      	orrs	r7, r3
 8000bcc:	fa0e f401 	lsl.w	r4, lr, r1
 8000bd0:	fa20 f306 	lsr.w	r3, r0, r6
 8000bd4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000bd8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bdc:	4323      	orrs	r3, r4
 8000bde:	fa00 f801 	lsl.w	r8, r0, r1
 8000be2:	fa1f fc87 	uxth.w	ip, r7
 8000be6:	fbbe f0f9 	udiv	r0, lr, r9
 8000bea:	0c1c      	lsrs	r4, r3, #16
 8000bec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bf0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bf4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000bf8:	45a6      	cmp	lr, r4
 8000bfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x1a0>
 8000c00:	193c      	adds	r4, r7, r4
 8000c02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c06:	f080 809c 	bcs.w	8000d42 <__udivmoddi4+0x2ce>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f240 8099 	bls.w	8000d42 <__udivmoddi4+0x2ce>
 8000c10:	3802      	subs	r0, #2
 8000c12:	443c      	add	r4, r7
 8000c14:	eba4 040e 	sub.w	r4, r4, lr
 8000c18:	fa1f fe83 	uxth.w	lr, r3
 8000c1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c20:	fb09 4413 	mls	r4, r9, r3, r4
 8000c24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c2c:	45a4      	cmp	ip, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x1ce>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c36:	f080 8082 	bcs.w	8000d3e <__udivmoddi4+0x2ca>
 8000c3a:	45a4      	cmp	ip, r4
 8000c3c:	d97f      	bls.n	8000d3e <__udivmoddi4+0x2ca>
 8000c3e:	3b02      	subs	r3, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c46:	eba4 040c 	sub.w	r4, r4, ip
 8000c4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c4e:	4564      	cmp	r4, ip
 8000c50:	4673      	mov	r3, lr
 8000c52:	46e1      	mov	r9, ip
 8000c54:	d362      	bcc.n	8000d1c <__udivmoddi4+0x2a8>
 8000c56:	d05f      	beq.n	8000d18 <__udivmoddi4+0x2a4>
 8000c58:	b15d      	cbz	r5, 8000c72 <__udivmoddi4+0x1fe>
 8000c5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c62:	fa04 f606 	lsl.w	r6, r4, r6
 8000c66:	fa22 f301 	lsr.w	r3, r2, r1
 8000c6a:	431e      	orrs	r6, r3
 8000c6c:	40cc      	lsrs	r4, r1
 8000c6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c72:	2100      	movs	r1, #0
 8000c74:	e74f      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000c76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c7a:	0c01      	lsrs	r1, r0, #16
 8000c7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c80:	b280      	uxth	r0, r0
 8000c82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c86:	463b      	mov	r3, r7
 8000c88:	4638      	mov	r0, r7
 8000c8a:	463c      	mov	r4, r7
 8000c8c:	46b8      	mov	r8, r7
 8000c8e:	46be      	mov	lr, r7
 8000c90:	2620      	movs	r6, #32
 8000c92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c96:	eba2 0208 	sub.w	r2, r2, r8
 8000c9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c9e:	e766      	b.n	8000b6e <__udivmoddi4+0xfa>
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	e718      	b.n	8000ad6 <__udivmoddi4+0x62>
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	e72c      	b.n	8000b02 <__udivmoddi4+0x8e>
 8000ca8:	f1c6 0220 	rsb	r2, r6, #32
 8000cac:	fa2e f302 	lsr.w	r3, lr, r2
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	40b1      	lsls	r1, r6
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cc2:	b2bc      	uxth	r4, r7
 8000cc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cc8:	0c11      	lsrs	r1, r2, #16
 8000cca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cce:	fb08 f904 	mul.w	r9, r8, r4
 8000cd2:	40b0      	lsls	r0, r6
 8000cd4:	4589      	cmp	r9, r1
 8000cd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cda:	b280      	uxth	r0, r0
 8000cdc:	d93e      	bls.n	8000d5c <__udivmoddi4+0x2e8>
 8000cde:	1879      	adds	r1, r7, r1
 8000ce0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ce4:	d201      	bcs.n	8000cea <__udivmoddi4+0x276>
 8000ce6:	4589      	cmp	r9, r1
 8000ce8:	d81f      	bhi.n	8000d2a <__udivmoddi4+0x2b6>
 8000cea:	eba1 0109 	sub.w	r1, r1, r9
 8000cee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cf2:	fb09 f804 	mul.w	r8, r9, r4
 8000cf6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cfa:	b292      	uxth	r2, r2
 8000cfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d00:	4542      	cmp	r2, r8
 8000d02:	d229      	bcs.n	8000d58 <__udivmoddi4+0x2e4>
 8000d04:	18ba      	adds	r2, r7, r2
 8000d06:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d0a:	d2c4      	bcs.n	8000c96 <__udivmoddi4+0x222>
 8000d0c:	4542      	cmp	r2, r8
 8000d0e:	d2c2      	bcs.n	8000c96 <__udivmoddi4+0x222>
 8000d10:	f1a9 0102 	sub.w	r1, r9, #2
 8000d14:	443a      	add	r2, r7
 8000d16:	e7be      	b.n	8000c96 <__udivmoddi4+0x222>
 8000d18:	45f0      	cmp	r8, lr
 8000d1a:	d29d      	bcs.n	8000c58 <__udivmoddi4+0x1e4>
 8000d1c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d20:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d24:	3801      	subs	r0, #1
 8000d26:	46e1      	mov	r9, ip
 8000d28:	e796      	b.n	8000c58 <__udivmoddi4+0x1e4>
 8000d2a:	eba7 0909 	sub.w	r9, r7, r9
 8000d2e:	4449      	add	r1, r9
 8000d30:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d34:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d38:	fb09 f804 	mul.w	r8, r9, r4
 8000d3c:	e7db      	b.n	8000cf6 <__udivmoddi4+0x282>
 8000d3e:	4673      	mov	r3, lr
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1ce>
 8000d42:	4650      	mov	r0, sl
 8000d44:	e766      	b.n	8000c14 <__udivmoddi4+0x1a0>
 8000d46:	4608      	mov	r0, r1
 8000d48:	e6fd      	b.n	8000b46 <__udivmoddi4+0xd2>
 8000d4a:	443b      	add	r3, r7
 8000d4c:	3a02      	subs	r2, #2
 8000d4e:	e733      	b.n	8000bb8 <__udivmoddi4+0x144>
 8000d50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d54:	443b      	add	r3, r7
 8000d56:	e71c      	b.n	8000b92 <__udivmoddi4+0x11e>
 8000d58:	4649      	mov	r1, r9
 8000d5a:	e79c      	b.n	8000c96 <__udivmoddi4+0x222>
 8000d5c:	eba1 0109 	sub.w	r1, r1, r9
 8000d60:	46c4      	mov	ip, r8
 8000d62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d66:	fb09 f804 	mul.w	r8, r9, r4
 8000d6a:	e7c4      	b.n	8000cf6 <__udivmoddi4+0x282>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
	int done=1;
 8000d76:	2301      	movs	r3, #1
 8000d78:	607b      	str	r3, [r7, #4]
	while(done)
 8000d7a:	e1ac      	b.n	80010d6 <Get_Key+0x366>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d82:	48b4      	ldr	r0, [pc, #720]	@ (8001054 <Get_Key+0x2e4>)
 8000d84:	f004 fdb0 	bl	80058e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d8e:	48b1      	ldr	r0, [pc, #708]	@ (8001054 <Get_Key+0x2e4>)
 8000d90:	f004 fdaa 	bl	80058e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000d94:	2200      	movs	r2, #0
 8000d96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d9a:	48ae      	ldr	r0, [pc, #696]	@ (8001054 <Get_Key+0x2e4>)
 8000d9c:	f004 fda4 	bl	80058e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 8000da0:	2200      	movs	r2, #0
 8000da2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000da6:	48ab      	ldr	r0, [pc, #684]	@ (8001054 <Get_Key+0x2e4>)
 8000da8:	f004 fd9e 	bl	80058e8 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000dac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000db0:	48a8      	ldr	r0, [pc, #672]	@ (8001054 <Get_Key+0x2e4>)
 8000db2:	f004 fd81 	bl	80058b8 <HAL_GPIO_ReadPin>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d00c      	beq.n	8000dd6 <Get_Key+0x66>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000dbc:	bf00      	nop
 8000dbe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dc2:	48a4      	ldr	r0, [pc, #656]	@ (8001054 <Get_Key+0x2e4>)
 8000dc4:	f004 fd78 	bl	80058b8 <HAL_GPIO_ReadPin>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d1f7      	bne.n	8000dbe <Get_Key+0x4e>
		key='1';
 8000dce:	4ba2      	ldr	r3, [pc, #648]	@ (8001058 <Get_Key+0x2e8>)
 8000dd0:	2231      	movs	r2, #49	@ 0x31
 8000dd2:	701a      	strb	r2, [r3, #0]
		break;
 8000dd4:	e183      	b.n	80010de <Get_Key+0x36e>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000dd6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dda:	489e      	ldr	r0, [pc, #632]	@ (8001054 <Get_Key+0x2e4>)
 8000ddc:	f004 fd6c 	bl	80058b8 <HAL_GPIO_ReadPin>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d00c      	beq.n	8000e00 <Get_Key+0x90>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000de6:	bf00      	nop
 8000de8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dec:	4899      	ldr	r0, [pc, #612]	@ (8001054 <Get_Key+0x2e4>)
 8000dee:	f004 fd63 	bl	80058b8 <HAL_GPIO_ReadPin>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1f7      	bne.n	8000de8 <Get_Key+0x78>
		key='4';
 8000df8:	4b97      	ldr	r3, [pc, #604]	@ (8001058 <Get_Key+0x2e8>)
 8000dfa:	2234      	movs	r2, #52	@ 0x34
 8000dfc:	701a      	strb	r2, [r3, #0]
		break;
 8000dfe:	e16e      	b.n	80010de <Get_Key+0x36e>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000e00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e04:	4893      	ldr	r0, [pc, #588]	@ (8001054 <Get_Key+0x2e4>)
 8000e06:	f004 fd57 	bl	80058b8 <HAL_GPIO_ReadPin>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d00c      	beq.n	8000e2a <Get_Key+0xba>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000e10:	bf00      	nop
 8000e12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e16:	488f      	ldr	r0, [pc, #572]	@ (8001054 <Get_Key+0x2e4>)
 8000e18:	f004 fd4e 	bl	80058b8 <HAL_GPIO_ReadPin>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1f7      	bne.n	8000e12 <Get_Key+0xa2>
		key='7';
 8000e22:	4b8d      	ldr	r3, [pc, #564]	@ (8001058 <Get_Key+0x2e8>)
 8000e24:	2237      	movs	r2, #55	@ 0x37
 8000e26:	701a      	strb	r2, [r3, #0]
		break;
 8000e28:	e159      	b.n	80010de <Get_Key+0x36e>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000e2a:	2180      	movs	r1, #128	@ 0x80
 8000e2c:	4889      	ldr	r0, [pc, #548]	@ (8001054 <Get_Key+0x2e4>)
 8000e2e:	f004 fd43 	bl	80058b8 <HAL_GPIO_ReadPin>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d00b      	beq.n	8000e50 <Get_Key+0xe0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000e38:	bf00      	nop
 8000e3a:	2180      	movs	r1, #128	@ 0x80
 8000e3c:	4885      	ldr	r0, [pc, #532]	@ (8001054 <Get_Key+0x2e4>)
 8000e3e:	f004 fd3b 	bl	80058b8 <HAL_GPIO_ReadPin>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1f8      	bne.n	8000e3a <Get_Key+0xca>
		key='*';
 8000e48:	4b83      	ldr	r3, [pc, #524]	@ (8001058 <Get_Key+0x2e8>)
 8000e4a:	222a      	movs	r2, #42	@ 0x2a
 8000e4c:	701a      	strb	r2, [r3, #0]
		break;
 8000e4e:	e146      	b.n	80010de <Get_Key+0x36e>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000e50:	2200      	movs	r2, #0
 8000e52:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e56:	487f      	ldr	r0, [pc, #508]	@ (8001054 <Get_Key+0x2e4>)
 8000e58:	f004 fd46 	bl	80058e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e62:	487c      	ldr	r0, [pc, #496]	@ (8001054 <Get_Key+0x2e4>)
 8000e64:	f004 fd40 	bl	80058e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e6e:	4879      	ldr	r0, [pc, #484]	@ (8001054 <Get_Key+0x2e4>)
 8000e70:	f004 fd3a 	bl	80058e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e7a:	4876      	ldr	r0, [pc, #472]	@ (8001054 <Get_Key+0x2e4>)
 8000e7c:	f004 fd34 	bl	80058e8 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000e80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e84:	4873      	ldr	r0, [pc, #460]	@ (8001054 <Get_Key+0x2e4>)
 8000e86:	f004 fd17 	bl	80058b8 <HAL_GPIO_ReadPin>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d00c      	beq.n	8000eaa <Get_Key+0x13a>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000e90:	bf00      	nop
 8000e92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e96:	486f      	ldr	r0, [pc, #444]	@ (8001054 <Get_Key+0x2e4>)
 8000e98:	f004 fd0e 	bl	80058b8 <HAL_GPIO_ReadPin>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1f7      	bne.n	8000e92 <Get_Key+0x122>
		key='2';
 8000ea2:	4b6d      	ldr	r3, [pc, #436]	@ (8001058 <Get_Key+0x2e8>)
 8000ea4:	2232      	movs	r2, #50	@ 0x32
 8000ea6:	701a      	strb	r2, [r3, #0]
		break;
 8000ea8:	e119      	b.n	80010de <Get_Key+0x36e>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000eaa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eae:	4869      	ldr	r0, [pc, #420]	@ (8001054 <Get_Key+0x2e4>)
 8000eb0:	f004 fd02 	bl	80058b8 <HAL_GPIO_ReadPin>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d00c      	beq.n	8000ed4 <Get_Key+0x164>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000eba:	bf00      	nop
 8000ebc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ec0:	4864      	ldr	r0, [pc, #400]	@ (8001054 <Get_Key+0x2e4>)
 8000ec2:	f004 fcf9 	bl	80058b8 <HAL_GPIO_ReadPin>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1f7      	bne.n	8000ebc <Get_Key+0x14c>
		key='5';
 8000ecc:	4b62      	ldr	r3, [pc, #392]	@ (8001058 <Get_Key+0x2e8>)
 8000ece:	2235      	movs	r2, #53	@ 0x35
 8000ed0:	701a      	strb	r2, [r3, #0]
		break;
 8000ed2:	e104      	b.n	80010de <Get_Key+0x36e>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000ed4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ed8:	485e      	ldr	r0, [pc, #376]	@ (8001054 <Get_Key+0x2e4>)
 8000eda:	f004 fced 	bl	80058b8 <HAL_GPIO_ReadPin>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d00c      	beq.n	8000efe <Get_Key+0x18e>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000ee4:	bf00      	nop
 8000ee6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eea:	485a      	ldr	r0, [pc, #360]	@ (8001054 <Get_Key+0x2e4>)
 8000eec:	f004 fce4 	bl	80058b8 <HAL_GPIO_ReadPin>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d1f7      	bne.n	8000ee6 <Get_Key+0x176>
		key='8';
 8000ef6:	4b58      	ldr	r3, [pc, #352]	@ (8001058 <Get_Key+0x2e8>)
 8000ef8:	2238      	movs	r2, #56	@ 0x38
 8000efa:	701a      	strb	r2, [r3, #0]
		break;
 8000efc:	e0ef      	b.n	80010de <Get_Key+0x36e>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000efe:	2180      	movs	r1, #128	@ 0x80
 8000f00:	4854      	ldr	r0, [pc, #336]	@ (8001054 <Get_Key+0x2e4>)
 8000f02:	f004 fcd9 	bl	80058b8 <HAL_GPIO_ReadPin>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00b      	beq.n	8000f24 <Get_Key+0x1b4>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000f0c:	bf00      	nop
 8000f0e:	2180      	movs	r1, #128	@ 0x80
 8000f10:	4850      	ldr	r0, [pc, #320]	@ (8001054 <Get_Key+0x2e4>)
 8000f12:	f004 fcd1 	bl	80058b8 <HAL_GPIO_ReadPin>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1f8      	bne.n	8000f0e <Get_Key+0x19e>
		key='0';
 8000f1c:	4b4e      	ldr	r3, [pc, #312]	@ (8001058 <Get_Key+0x2e8>)
 8000f1e:	2230      	movs	r2, #48	@ 0x30
 8000f20:	701a      	strb	r2, [r3, #0]
		break;
 8000f22:	e0dc      	b.n	80010de <Get_Key+0x36e>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 8000f24:	2200      	movs	r2, #0
 8000f26:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f2a:	484a      	ldr	r0, [pc, #296]	@ (8001054 <Get_Key+0x2e4>)
 8000f2c:	f004 fcdc 	bl	80058e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f36:	4847      	ldr	r0, [pc, #284]	@ (8001054 <Get_Key+0x2e4>)
 8000f38:	f004 fcd6 	bl	80058e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f42:	4844      	ldr	r0, [pc, #272]	@ (8001054 <Get_Key+0x2e4>)
 8000f44:	f004 fcd0 	bl	80058e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f4e:	4841      	ldr	r0, [pc, #260]	@ (8001054 <Get_Key+0x2e4>)
 8000f50:	f004 fcca 	bl	80058e8 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000f54:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f58:	483e      	ldr	r0, [pc, #248]	@ (8001054 <Get_Key+0x2e4>)
 8000f5a:	f004 fcad 	bl	80058b8 <HAL_GPIO_ReadPin>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00c      	beq.n	8000f7e <Get_Key+0x20e>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000f64:	bf00      	nop
 8000f66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f6a:	483a      	ldr	r0, [pc, #232]	@ (8001054 <Get_Key+0x2e4>)
 8000f6c:	f004 fca4 	bl	80058b8 <HAL_GPIO_ReadPin>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f7      	bne.n	8000f66 <Get_Key+0x1f6>
		key='3';
 8000f76:	4b38      	ldr	r3, [pc, #224]	@ (8001058 <Get_Key+0x2e8>)
 8000f78:	2233      	movs	r2, #51	@ 0x33
 8000f7a:	701a      	strb	r2, [r3, #0]
		break;
 8000f7c:	e0af      	b.n	80010de <Get_Key+0x36e>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000f7e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f82:	4834      	ldr	r0, [pc, #208]	@ (8001054 <Get_Key+0x2e4>)
 8000f84:	f004 fc98 	bl	80058b8 <HAL_GPIO_ReadPin>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d00c      	beq.n	8000fa8 <Get_Key+0x238>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000f8e:	bf00      	nop
 8000f90:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f94:	482f      	ldr	r0, [pc, #188]	@ (8001054 <Get_Key+0x2e4>)
 8000f96:	f004 fc8f 	bl	80058b8 <HAL_GPIO_ReadPin>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1f7      	bne.n	8000f90 <Get_Key+0x220>
		key='6';
 8000fa0:	4b2d      	ldr	r3, [pc, #180]	@ (8001058 <Get_Key+0x2e8>)
 8000fa2:	2236      	movs	r2, #54	@ 0x36
 8000fa4:	701a      	strb	r2, [r3, #0]
		break;
 8000fa6:	e09a      	b.n	80010de <Get_Key+0x36e>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000fa8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fac:	4829      	ldr	r0, [pc, #164]	@ (8001054 <Get_Key+0x2e4>)
 8000fae:	f004 fc83 	bl	80058b8 <HAL_GPIO_ReadPin>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d00c      	beq.n	8000fd2 <Get_Key+0x262>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000fb8:	bf00      	nop
 8000fba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fbe:	4825      	ldr	r0, [pc, #148]	@ (8001054 <Get_Key+0x2e4>)
 8000fc0:	f004 fc7a 	bl	80058b8 <HAL_GPIO_ReadPin>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f7      	bne.n	8000fba <Get_Key+0x24a>
		key='9';
 8000fca:	4b23      	ldr	r3, [pc, #140]	@ (8001058 <Get_Key+0x2e8>)
 8000fcc:	2239      	movs	r2, #57	@ 0x39
 8000fce:	701a      	strb	r2, [r3, #0]
		break;
 8000fd0:	e085      	b.n	80010de <Get_Key+0x36e>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000fd2:	2180      	movs	r1, #128	@ 0x80
 8000fd4:	481f      	ldr	r0, [pc, #124]	@ (8001054 <Get_Key+0x2e4>)
 8000fd6:	f004 fc6f 	bl	80058b8 <HAL_GPIO_ReadPin>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d00b      	beq.n	8000ff8 <Get_Key+0x288>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000fe0:	bf00      	nop
 8000fe2:	2180      	movs	r1, #128	@ 0x80
 8000fe4:	481b      	ldr	r0, [pc, #108]	@ (8001054 <Get_Key+0x2e4>)
 8000fe6:	f004 fc67 	bl	80058b8 <HAL_GPIO_ReadPin>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1f8      	bne.n	8000fe2 <Get_Key+0x272>
		key='#';
 8000ff0:	4b19      	ldr	r3, [pc, #100]	@ (8001058 <Get_Key+0x2e8>)
 8000ff2:	2223      	movs	r2, #35	@ 0x23
 8000ff4:	701a      	strb	r2, [r3, #0]
		break;
 8000ff6:	e072      	b.n	80010de <Get_Key+0x36e>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ffe:	4815      	ldr	r0, [pc, #84]	@ (8001054 <Get_Key+0x2e4>)
 8001000:	f004 fc72 	bl	80058e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800100a:	4812      	ldr	r0, [pc, #72]	@ (8001054 <Get_Key+0x2e4>)
 800100c:	f004 fc6c 	bl	80058e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001016:	480f      	ldr	r0, [pc, #60]	@ (8001054 <Get_Key+0x2e4>)
 8001018:	f004 fc66 	bl	80058e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 800101c:	2201      	movs	r2, #1
 800101e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001022:	480c      	ldr	r0, [pc, #48]	@ (8001054 <Get_Key+0x2e4>)
 8001024:	f004 fc60 	bl	80058e8 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8001028:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800102c:	4809      	ldr	r0, [pc, #36]	@ (8001054 <Get_Key+0x2e4>)
 800102e:	f004 fc43 	bl	80058b8 <HAL_GPIO_ReadPin>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d011      	beq.n	800105c <Get_Key+0x2ec>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8001038:	bf00      	nop
 800103a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800103e:	4805      	ldr	r0, [pc, #20]	@ (8001054 <Get_Key+0x2e4>)
 8001040:	f004 fc3a 	bl	80058b8 <HAL_GPIO_ReadPin>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f7      	bne.n	800103a <Get_Key+0x2ca>
		key='A';
 800104a:	4b03      	ldr	r3, [pc, #12]	@ (8001058 <Get_Key+0x2e8>)
 800104c:	2241      	movs	r2, #65	@ 0x41
 800104e:	701a      	strb	r2, [r3, #0]
		break;
 8001050:	e045      	b.n	80010de <Get_Key+0x36e>
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000
 8001058:	200000bc 	.word	0x200000bc
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 800105c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001060:	4822      	ldr	r0, [pc, #136]	@ (80010ec <Get_Key+0x37c>)
 8001062:	f004 fc29 	bl	80058b8 <HAL_GPIO_ReadPin>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d00c      	beq.n	8001086 <Get_Key+0x316>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800106c:	bf00      	nop
 800106e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001072:	481e      	ldr	r0, [pc, #120]	@ (80010ec <Get_Key+0x37c>)
 8001074:	f004 fc20 	bl	80058b8 <HAL_GPIO_ReadPin>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1f7      	bne.n	800106e <Get_Key+0x2fe>
		key='B';
 800107e:	4b1c      	ldr	r3, [pc, #112]	@ (80010f0 <Get_Key+0x380>)
 8001080:	2242      	movs	r2, #66	@ 0x42
 8001082:	701a      	strb	r2, [r3, #0]
		break;
 8001084:	e02b      	b.n	80010de <Get_Key+0x36e>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8001086:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800108a:	4818      	ldr	r0, [pc, #96]	@ (80010ec <Get_Key+0x37c>)
 800108c:	f004 fc14 	bl	80058b8 <HAL_GPIO_ReadPin>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00c      	beq.n	80010b0 <Get_Key+0x340>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8001096:	bf00      	nop
 8001098:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800109c:	4813      	ldr	r0, [pc, #76]	@ (80010ec <Get_Key+0x37c>)
 800109e:	f004 fc0b 	bl	80058b8 <HAL_GPIO_ReadPin>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1f7      	bne.n	8001098 <Get_Key+0x328>
		key='C';
 80010a8:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <Get_Key+0x380>)
 80010aa:	2243      	movs	r2, #67	@ 0x43
 80010ac:	701a      	strb	r2, [r3, #0]
		break;
 80010ae:	e016      	b.n	80010de <Get_Key+0x36e>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80010b0:	2180      	movs	r1, #128	@ 0x80
 80010b2:	480e      	ldr	r0, [pc, #56]	@ (80010ec <Get_Key+0x37c>)
 80010b4:	f004 fc00 	bl	80058b8 <HAL_GPIO_ReadPin>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00b      	beq.n	80010d6 <Get_Key+0x366>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80010be:	bf00      	nop
 80010c0:	2180      	movs	r1, #128	@ 0x80
 80010c2:	480a      	ldr	r0, [pc, #40]	@ (80010ec <Get_Key+0x37c>)
 80010c4:	f004 fbf8 	bl	80058b8 <HAL_GPIO_ReadPin>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1f8      	bne.n	80010c0 <Get_Key+0x350>
		key='D';
 80010ce:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <Get_Key+0x380>)
 80010d0:	2244      	movs	r2, #68	@ 0x44
 80010d2:	701a      	strb	r2, [r3, #0]
		break;
 80010d4:	e003      	b.n	80010de <Get_Key+0x36e>
	while(done)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f47f ae4f 	bne.w	8000d7c <Get_Key+0xc>
	}
}
	return(key);
 80010de:	4b04      	ldr	r3, [pc, #16]	@ (80010f0 <Get_Key+0x380>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000
 80010f0:	200000bc 	.word	0x200000bc

080010f4 <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af02      	add	r7, sp, #8
 80010fa:	4603      	mov	r3, r0
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8001100:	4a09      	ldr	r2, [pc, #36]	@ (8001128 <write_register+0x34>)
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	781a      	ldrb	r2, [r3, #0]
 800110a:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <write_register+0x34>)
 800110c:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 800110e:	2364      	movs	r3, #100	@ 0x64
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2302      	movs	r3, #2
 8001114:	4a04      	ldr	r2, [pc, #16]	@ (8001128 <write_register+0x34>)
 8001116:	2194      	movs	r1, #148	@ 0x94
 8001118:	4804      	ldr	r0, [pc, #16]	@ (800112c <write_register+0x38>)
 800111a:	f004 fd5b 	bl	8005bd4 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200000c0 	.word	0x200000c0
 800112c:	200000c4 	.word	0x200000c4

08001130 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af02      	add	r7, sp, #8
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 800113c:	4a0b      	ldr	r2, [pc, #44]	@ (800116c <read_register+0x3c>)
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8001142:	2364      	movs	r3, #100	@ 0x64
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2301      	movs	r3, #1
 8001148:	4a08      	ldr	r2, [pc, #32]	@ (800116c <read_register+0x3c>)
 800114a:	2194      	movs	r1, #148	@ 0x94
 800114c:	4808      	ldr	r0, [pc, #32]	@ (8001170 <read_register+0x40>)
 800114e:	f004 fd41 	bl	8005bd4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8001152:	2364      	movs	r3, #100	@ 0x64
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	2301      	movs	r3, #1
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	2194      	movs	r1, #148	@ 0x94
 800115c:	4804      	ldr	r0, [pc, #16]	@ (8001170 <read_register+0x40>)
 800115e:	f004 fe37 	bl	8005dd0 <HAL_I2C_Master_Receive>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200000c0 	.word	0x200000c0
 8001170:	200000c4 	.word	0x200000c4

08001174 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8001174:	b084      	sub	sp, #16
 8001176:	b580      	push	{r7, lr}
 8001178:	af00      	add	r7, sp, #0
 800117a:	f107 0c08 	add.w	ip, r7, #8
 800117e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8001182:	4b81      	ldr	r3, [pc, #516]	@ (8001388 <CS43_Init+0x214>)
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800118a:	4b7f      	ldr	r3, [pc, #508]	@ (8001388 <CS43_Init+0x214>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	69da      	ldr	r2, [r3, #28]
 8001190:	4b7d      	ldr	r3, [pc, #500]	@ (8001388 <CS43_Init+0x214>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001198:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800119a:	2201      	movs	r2, #1
 800119c:	2110      	movs	r1, #16
 800119e:	487b      	ldr	r0, [pc, #492]	@ (800138c <CS43_Init+0x218>)
 80011a0:	f004 fba2 	bl	80058e8 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 80011a4:	4b7a      	ldr	r3, [pc, #488]	@ (8001390 <CS43_Init+0x21c>)
 80011a6:	4618      	mov	r0, r3
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	2254      	movs	r2, #84	@ 0x54
 80011ae:	4619      	mov	r1, r3
 80011b0:	f007 fd4a 	bl	8008c48 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 80011b4:	4b77      	ldr	r3, [pc, #476]	@ (8001394 <CS43_Init+0x220>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 80011ba:	4976      	ldr	r1, [pc, #472]	@ (8001394 <CS43_Init+0x220>)
 80011bc:	2002      	movs	r0, #2
 80011be:	f7ff ff99 	bl	80010f4 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80011c2:	4b74      	ldr	r3, [pc, #464]	@ (8001394 <CS43_Init+0x220>)
 80011c4:	2280      	movs	r2, #128	@ 0x80
 80011c6:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80011c8:	4b72      	ldr	r3, [pc, #456]	@ (8001394 <CS43_Init+0x220>)
 80011ca:	785b      	ldrb	r3, [r3, #1]
 80011cc:	f043 0320 	orr.w	r3, r3, #32
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4b70      	ldr	r3, [pc, #448]	@ (8001394 <CS43_Init+0x220>)
 80011d4:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80011d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001394 <CS43_Init+0x220>)
 80011d8:	785b      	ldrb	r3, [r3, #1]
 80011da:	f043 030c 	orr.w	r3, r3, #12
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	4b6c      	ldr	r3, [pc, #432]	@ (8001394 <CS43_Init+0x220>)
 80011e2:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80011e4:	4b6b      	ldr	r3, [pc, #428]	@ (8001394 <CS43_Init+0x220>)
 80011e6:	785b      	ldrb	r3, [r3, #1]
 80011e8:	f043 0303 	orr.w	r3, r3, #3
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4b69      	ldr	r3, [pc, #420]	@ (8001394 <CS43_Init+0x220>)
 80011f0:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 80011f2:	4969      	ldr	r1, [pc, #420]	@ (8001398 <CS43_Init+0x224>)
 80011f4:	2004      	movs	r0, #4
 80011f6:	f7ff ff7d 	bl	80010f4 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80011fa:	4b66      	ldr	r3, [pc, #408]	@ (8001394 <CS43_Init+0x220>)
 80011fc:	2280      	movs	r2, #128	@ 0x80
 80011fe:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 8001200:	4965      	ldr	r1, [pc, #404]	@ (8001398 <CS43_Init+0x224>)
 8001202:	2005      	movs	r0, #5
 8001204:	f7ff ff76 	bl	80010f4 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 8001208:	4962      	ldr	r1, [pc, #392]	@ (8001394 <CS43_Init+0x220>)
 800120a:	2006      	movs	r0, #6
 800120c:	f7ff ff90 	bl	8001130 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8001210:	4b60      	ldr	r3, [pc, #384]	@ (8001394 <CS43_Init+0x220>)
 8001212:	785b      	ldrb	r3, [r3, #1]
 8001214:	f003 0320 	and.w	r3, r3, #32
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4b5e      	ldr	r3, [pc, #376]	@ (8001394 <CS43_Init+0x220>)
 800121c:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 800121e:	4b5d      	ldr	r3, [pc, #372]	@ (8001394 <CS43_Init+0x220>)
 8001220:	785b      	ldrb	r3, [r3, #1]
 8001222:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001226:	b2da      	uxtb	r2, r3
 8001228:	4b5a      	ldr	r3, [pc, #360]	@ (8001394 <CS43_Init+0x220>)
 800122a:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 800122c:	4b59      	ldr	r3, [pc, #356]	@ (8001394 <CS43_Init+0x220>)
 800122e:	785b      	ldrb	r3, [r3, #1]
 8001230:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4b57      	ldr	r3, [pc, #348]	@ (8001394 <CS43_Init+0x220>)
 8001238:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 800123a:	4b56      	ldr	r3, [pc, #344]	@ (8001394 <CS43_Init+0x220>)
 800123c:	785b      	ldrb	r3, [r3, #1]
 800123e:	f023 0310 	bic.w	r3, r3, #16
 8001242:	b2da      	uxtb	r2, r3
 8001244:	4b53      	ldr	r3, [pc, #332]	@ (8001394 <CS43_Init+0x220>)
 8001246:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8001248:	4b52      	ldr	r3, [pc, #328]	@ (8001394 <CS43_Init+0x220>)
 800124a:	785b      	ldrb	r3, [r3, #1]
 800124c:	f023 0304 	bic.w	r3, r3, #4
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4b50      	ldr	r3, [pc, #320]	@ (8001394 <CS43_Init+0x220>)
 8001254:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 8001256:	4b4f      	ldr	r3, [pc, #316]	@ (8001394 <CS43_Init+0x220>)
 8001258:	785b      	ldrb	r3, [r3, #1]
 800125a:	f043 0304 	orr.w	r3, r3, #4
 800125e:	b2da      	uxtb	r2, r3
 8001260:	4b4c      	ldr	r3, [pc, #304]	@ (8001394 <CS43_Init+0x220>)
 8001262:	705a      	strb	r2, [r3, #1]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8001264:	4b4b      	ldr	r3, [pc, #300]	@ (8001394 <CS43_Init+0x220>)
 8001266:	785b      	ldrb	r3, [r3, #1]
 8001268:	f043 0303 	orr.w	r3, r3, #3
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4b49      	ldr	r3, [pc, #292]	@ (8001394 <CS43_Init+0x220>)
 8001270:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8001272:	4949      	ldr	r1, [pc, #292]	@ (8001398 <CS43_Init+0x224>)
 8001274:	2006      	movs	r0, #6
 8001276:	f7ff ff3d 	bl	80010f4 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 800127a:	4947      	ldr	r1, [pc, #284]	@ (8001398 <CS43_Init+0x224>)
 800127c:	2008      	movs	r0, #8
 800127e:	f7ff ff57 	bl	8001130 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8001282:	4b44      	ldr	r3, [pc, #272]	@ (8001394 <CS43_Init+0x220>)
 8001284:	785b      	ldrb	r3, [r3, #1]
 8001286:	f023 030f 	bic.w	r3, r3, #15
 800128a:	b2da      	uxtb	r2, r3
 800128c:	4b41      	ldr	r3, [pc, #260]	@ (8001394 <CS43_Init+0x220>)
 800128e:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8001290:	4b40      	ldr	r3, [pc, #256]	@ (8001394 <CS43_Init+0x220>)
 8001292:	785b      	ldrb	r3, [r3, #1]
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4b3e      	ldr	r3, [pc, #248]	@ (8001394 <CS43_Init+0x220>)
 800129c:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 800129e:	493e      	ldr	r1, [pc, #248]	@ (8001398 <CS43_Init+0x224>)
 80012a0:	2008      	movs	r0, #8
 80012a2:	f7ff ff27 	bl	80010f4 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 80012a6:	493c      	ldr	r1, [pc, #240]	@ (8001398 <CS43_Init+0x224>)
 80012a8:	2009      	movs	r0, #9
 80012aa:	f7ff ff41 	bl	8001130 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 80012ae:	4b39      	ldr	r3, [pc, #228]	@ (8001394 <CS43_Init+0x220>)
 80012b0:	785b      	ldrb	r3, [r3, #1]
 80012b2:	f023 030f 	bic.w	r3, r3, #15
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	4b36      	ldr	r3, [pc, #216]	@ (8001394 <CS43_Init+0x220>)
 80012ba:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 80012bc:	4b35      	ldr	r3, [pc, #212]	@ (8001394 <CS43_Init+0x220>)
 80012be:	785b      	ldrb	r3, [r3, #1]
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4b33      	ldr	r3, [pc, #204]	@ (8001394 <CS43_Init+0x220>)
 80012c8:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 80012ca:	4933      	ldr	r1, [pc, #204]	@ (8001398 <CS43_Init+0x224>)
 80012cc:	2009      	movs	r0, #9
 80012ce:	f7ff ff11 	bl	80010f4 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 80012d2:	4931      	ldr	r1, [pc, #196]	@ (8001398 <CS43_Init+0x224>)
 80012d4:	200e      	movs	r0, #14
 80012d6:	f7ff ff2b 	bl	8001130 <read_register>
	if(outputMode == AUDIO_MODE_ANALOG)
 80012da:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d123      	bne.n	800132a <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 80012e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001394 <CS43_Init+0x220>)
 80012e4:	785b      	ldrb	r3, [r3, #1]
 80012e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	4b29      	ldr	r3, [pc, #164]	@ (8001394 <CS43_Init+0x220>)
 80012ee:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80012f0:	4b28      	ldr	r3, [pc, #160]	@ (8001394 <CS43_Init+0x220>)
 80012f2:	785b      	ldrb	r3, [r3, #1]
 80012f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4b26      	ldr	r3, [pc, #152]	@ (8001394 <CS43_Init+0x220>)
 80012fc:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80012fe:	4b25      	ldr	r3, [pc, #148]	@ (8001394 <CS43_Init+0x220>)
 8001300:	785b      	ldrb	r3, [r3, #1]
 8001302:	f023 0320 	bic.w	r3, r3, #32
 8001306:	b2da      	uxtb	r2, r3
 8001308:	4b22      	ldr	r3, [pc, #136]	@ (8001394 <CS43_Init+0x220>)
 800130a:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 800130c:	4b21      	ldr	r3, [pc, #132]	@ (8001394 <CS43_Init+0x220>)
 800130e:	785b      	ldrb	r3, [r3, #1]
 8001310:	f023 0310 	bic.w	r3, r3, #16
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4b1f      	ldr	r3, [pc, #124]	@ (8001394 <CS43_Init+0x220>)
 8001318:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 800131a:	4b1e      	ldr	r3, [pc, #120]	@ (8001394 <CS43_Init+0x220>)
 800131c:	785b      	ldrb	r3, [r3, #1]
 800131e:	f023 0308 	bic.w	r3, r3, #8
 8001322:	b2da      	uxtb	r2, r3
 8001324:	4b1b      	ldr	r3, [pc, #108]	@ (8001394 <CS43_Init+0x220>)
 8001326:	705a      	strb	r2, [r3, #1]
 8001328:	e006      	b.n	8001338 <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 800132a:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800132e:	2b00      	cmp	r3, #0
 8001330:	d102      	bne.n	8001338 <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 8001332:	4b18      	ldr	r3, [pc, #96]	@ (8001394 <CS43_Init+0x220>)
 8001334:	2202      	movs	r2, #2
 8001336:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8001338:	4917      	ldr	r1, [pc, #92]	@ (8001398 <CS43_Init+0x224>)
 800133a:	200e      	movs	r0, #14
 800133c:	f7ff feda 	bl	80010f4 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 8001340:	4915      	ldr	r1, [pc, #84]	@ (8001398 <CS43_Init+0x224>)
 8001342:	200f      	movs	r0, #15
 8001344:	f7ff fef4 	bl	8001130 <read_register>
	iData[1] = 0x00;
 8001348:	4b12      	ldr	r3, [pc, #72]	@ (8001394 <CS43_Init+0x220>)
 800134a:	2200      	movs	r2, #0
 800134c:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 800134e:	4912      	ldr	r1, [pc, #72]	@ (8001398 <CS43_Init+0x224>)
 8001350:	200f      	movs	r0, #15
 8001352:	f7ff fecf 	bl	80010f4 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 8001356:	4b0f      	ldr	r3, [pc, #60]	@ (8001394 <CS43_Init+0x220>)
 8001358:	2200      	movs	r2, #0
 800135a:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 800135c:	490e      	ldr	r1, [pc, #56]	@ (8001398 <CS43_Init+0x224>)
 800135e:	2014      	movs	r0, #20
 8001360:	f7ff fec8 	bl	80010f4 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8001364:	490c      	ldr	r1, [pc, #48]	@ (8001398 <CS43_Init+0x224>)
 8001366:	2015      	movs	r0, #21
 8001368:	f7ff fec4 	bl	80010f4 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 800136c:	490a      	ldr	r1, [pc, #40]	@ (8001398 <CS43_Init+0x224>)
 800136e:	201a      	movs	r0, #26
 8001370:	f7ff fec0 	bl	80010f4 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8001374:	4908      	ldr	r1, [pc, #32]	@ (8001398 <CS43_Init+0x224>)
 8001376:	201b      	movs	r0, #27
 8001378:	f7ff febc 	bl	80010f4 <write_register>
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001384:	b004      	add	sp, #16
 8001386:	4770      	bx	lr
 8001388:	200002bc 	.word	0x200002bc
 800138c:	40020c00 	.word	0x40020c00
 8001390:	200000c4 	.word	0x200000c4
 8001394:	200000c0 	.word	0x200000c0
 8001398:	200000c1 	.word	0x200000c1

0800139c <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
	switch (side)
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	d837      	bhi.n	800141c <CS43_Enable_RightLeft+0x80>
 80013ac:	a201      	add	r2, pc, #4	@ (adr r2, 80013b4 <CS43_Enable_RightLeft+0x18>)
 80013ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b2:	bf00      	nop
 80013b4:	080013c5 	.word	0x080013c5
 80013b8:	080013db 	.word	0x080013db
 80013bc:	080013f1 	.word	0x080013f1
 80013c0:	08001407 	.word	0x08001407
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80013c4:	4b21      	ldr	r3, [pc, #132]	@ (800144c <CS43_Enable_RightLeft+0xb0>)
 80013c6:	22c0      	movs	r2, #192	@ 0xc0
 80013c8:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80013ca:	4b20      	ldr	r3, [pc, #128]	@ (800144c <CS43_Enable_RightLeft+0xb0>)
 80013cc:	785b      	ldrb	r3, [r3, #1]
 80013ce:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	4b1d      	ldr	r3, [pc, #116]	@ (800144c <CS43_Enable_RightLeft+0xb0>)
 80013d6:	705a      	strb	r2, [r3, #1]
			break;
 80013d8:	e021      	b.n	800141e <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80013da:	4b1c      	ldr	r3, [pc, #112]	@ (800144c <CS43_Enable_RightLeft+0xb0>)
 80013dc:	2280      	movs	r2, #128	@ 0x80
 80013de:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80013e0:	4b1a      	ldr	r3, [pc, #104]	@ (800144c <CS43_Enable_RightLeft+0xb0>)
 80013e2:	785b      	ldrb	r3, [r3, #1]
 80013e4:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4b18      	ldr	r3, [pc, #96]	@ (800144c <CS43_Enable_RightLeft+0xb0>)
 80013ec:	705a      	strb	r2, [r3, #1]
			break;
 80013ee:	e016      	b.n	800141e <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80013f0:	4b16      	ldr	r3, [pc, #88]	@ (800144c <CS43_Enable_RightLeft+0xb0>)
 80013f2:	22c0      	movs	r2, #192	@ 0xc0
 80013f4:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80013f6:	4b15      	ldr	r3, [pc, #84]	@ (800144c <CS43_Enable_RightLeft+0xb0>)
 80013f8:	785b      	ldrb	r3, [r3, #1]
 80013fa:	f043 0320 	orr.w	r3, r3, #32
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	4b12      	ldr	r3, [pc, #72]	@ (800144c <CS43_Enable_RightLeft+0xb0>)
 8001402:	705a      	strb	r2, [r3, #1]
			break;
 8001404:	e00b      	b.n	800141e <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001406:	4b11      	ldr	r3, [pc, #68]	@ (800144c <CS43_Enable_RightLeft+0xb0>)
 8001408:	2280      	movs	r2, #128	@ 0x80
 800140a:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800140c:	4b0f      	ldr	r3, [pc, #60]	@ (800144c <CS43_Enable_RightLeft+0xb0>)
 800140e:	785b      	ldrb	r3, [r3, #1]
 8001410:	f043 0320 	orr.w	r3, r3, #32
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4b0d      	ldr	r3, [pc, #52]	@ (800144c <CS43_Enable_RightLeft+0xb0>)
 8001418:	705a      	strb	r2, [r3, #1]
			break;
 800141a:	e000      	b.n	800141e <CS43_Enable_RightLeft+0x82>
		default:
			break;
 800141c:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 800141e:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <CS43_Enable_RightLeft+0xb0>)
 8001420:	785b      	ldrb	r3, [r3, #1]
 8001422:	f043 030c 	orr.w	r3, r3, #12
 8001426:	b2da      	uxtb	r2, r3
 8001428:	4b08      	ldr	r3, [pc, #32]	@ (800144c <CS43_Enable_RightLeft+0xb0>)
 800142a:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 800142c:	4b07      	ldr	r3, [pc, #28]	@ (800144c <CS43_Enable_RightLeft+0xb0>)
 800142e:	785b      	ldrb	r3, [r3, #1]
 8001430:	f043 0303 	orr.w	r3, r3, #3
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4b05      	ldr	r3, [pc, #20]	@ (800144c <CS43_Enable_RightLeft+0xb0>)
 8001438:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 800143a:	4905      	ldr	r1, [pc, #20]	@ (8001450 <CS43_Enable_RightLeft+0xb4>)
 800143c:	2004      	movs	r0, #4
 800143e:	f7ff fe59 	bl	80010f4 <write_register>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200000c0 	.word	0x200000c0
 8001450:	200000c1 	.word	0x200000c1

08001454 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	3b32      	subs	r3, #50	@ 0x32
 8001462:	b2db      	uxtb	r3, r3
 8001464:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	b2db      	uxtb	r3, r3
 800146c:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 8001472:	4a16      	ldr	r2, [pc, #88]	@ (80014cc <CS43_SetVolume+0x78>)
 8001474:	7bbb      	ldrb	r3, [r7, #14]
 8001476:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8001478:	4915      	ldr	r1, [pc, #84]	@ (80014d0 <CS43_SetVolume+0x7c>)
 800147a:	2014      	movs	r0, #20
 800147c:	f7ff fe3a 	bl	80010f4 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8001480:	4913      	ldr	r1, [pc, #76]	@ (80014d0 <CS43_SetVolume+0x7c>)
 8001482:	2015      	movs	r0, #21
 8001484:	f7ff fe36 	bl	80010f4 <write_register>
	
	iData[1] = VOLUME_CONVERT_D(volume);
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	2b64      	cmp	r3, #100	@ 0x64
 800148c:	d80e      	bhi.n	80014ac <CS43_SetVolume+0x58>
 800148e:	79fa      	ldrb	r2, [r7, #7]
 8001490:	4613      	mov	r3, r2
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4413      	add	r3, r2
 8001496:	011b      	lsls	r3, r3, #4
 8001498:	4a0e      	ldr	r2, [pc, #56]	@ (80014d4 <CS43_SetVolume+0x80>)
 800149a:	fb82 1203 	smull	r1, r2, r2, r3
 800149e:	1152      	asrs	r2, r2, #5
 80014a0:	17db      	asrs	r3, r3, #31
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	3b18      	subs	r3, #24
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	e000      	b.n	80014ae <CS43_SetVolume+0x5a>
 80014ac:	2318      	movs	r3, #24
 80014ae:	4a07      	ldr	r2, [pc, #28]	@ (80014cc <CS43_SetVolume+0x78>)
 80014b0:	7053      	strb	r3, [r2, #1]
	
	/* Set the Master volume */ 
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 80014b2:	4907      	ldr	r1, [pc, #28]	@ (80014d0 <CS43_SetVolume+0x7c>)
 80014b4:	2020      	movs	r0, #32
 80014b6:	f7ff fe1d 	bl	80010f4 <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 80014ba:	4905      	ldr	r1, [pc, #20]	@ (80014d0 <CS43_SetVolume+0x7c>)
 80014bc:	2021      	movs	r0, #33	@ 0x21
 80014be:	f7ff fe19 	bl	80010f4 <write_register>
}
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200000c0 	.word	0x200000c0
 80014d0:	200000c1 	.word	0x200000c1
 80014d4:	51eb851f 	.word	0x51eb851f

080014d8 <softClip>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static float softClip(float x, float threshold, float gain) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	ed2d 8b02 	vpush	{d8}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	ed87 0a03 	vstr	s0, [r7, #12]
 80014e6:	edc7 0a02 	vstr	s1, [r7, #8]
 80014ea:	ed87 1a01 	vstr	s2, [r7, #4]
    const float clipStart = threshold * 0.95f; // Start soft clipping at 95% of range
 80014ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80014f2:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80015d4 <softClip+0xfc>
 80014f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014fa:	edc7 7a07 	vstr	s15, [r7, #28]
    const float range = threshold - clipStart;
 80014fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8001502:	edd7 7a07 	vldr	s15, [r7, #28]
 8001506:	ee77 7a67 	vsub.f32	s15, s14, s15
 800150a:	edc7 7a06 	vstr	s15, [r7, #24]

    if (x > clipStart) {
 800150e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001512:	edd7 7a07 	vldr	s15, [r7, #28]
 8001516:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800151a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151e:	dd20      	ble.n	8001562 <softClip+0x8a>
        float t = (x - clipStart) / range;
 8001520:	ed97 7a03 	vldr	s14, [r7, #12]
 8001524:	edd7 7a07 	vldr	s15, [r7, #28]
 8001528:	ee77 6a67 	vsub.f32	s13, s14, s15
 800152c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001530:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001534:	edc7 7a04 	vstr	s15, [r7, #16]
        return clipStart + range * tanhf(t * gain); // smooth compression
 8001538:	ed97 7a04 	vldr	s14, [r7, #16]
 800153c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001544:	eeb0 0a67 	vmov.f32	s0, s15
 8001548:	f007 fc6e 	bl	8008e28 <tanhf>
 800154c:	eeb0 7a40 	vmov.f32	s14, s0
 8001550:	edd7 7a06 	vldr	s15, [r7, #24]
 8001554:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001558:	edd7 7a07 	vldr	s15, [r7, #28]
 800155c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001560:	e031      	b.n	80015c6 <softClip+0xee>
    } else if (x < -clipStart) {
 8001562:	edd7 7a07 	vldr	s15, [r7, #28]
 8001566:	eef1 7a67 	vneg.f32	s15, s15
 800156a:	ed97 7a03 	vldr	s14, [r7, #12]
 800156e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001576:	d524      	bpl.n	80015c2 <softClip+0xea>
        float t = (-x - clipStart) / range;
 8001578:	edd7 7a03 	vldr	s15, [r7, #12]
 800157c:	eeb1 7a67 	vneg.f32	s14, s15
 8001580:	edd7 7a07 	vldr	s15, [r7, #28]
 8001584:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001588:	ed97 7a06 	vldr	s14, [r7, #24]
 800158c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001590:	edc7 7a05 	vstr	s15, [r7, #20]
        return -clipStart - range * tanhf(t * gain); // symmetric
 8001594:	edd7 7a07 	vldr	s15, [r7, #28]
 8001598:	eeb1 8a67 	vneg.f32	s16, s15
 800159c:	ed97 7a05 	vldr	s14, [r7, #20]
 80015a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80015a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a8:	eeb0 0a67 	vmov.f32	s0, s15
 80015ac:	f007 fc3c 	bl	8008e28 <tanhf>
 80015b0:	eeb0 7a40 	vmov.f32	s14, s0
 80015b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80015b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015bc:	ee78 7a67 	vsub.f32	s15, s16, s15
 80015c0:	e001      	b.n	80015c6 <softClip+0xee>
    } else {
        return x;
 80015c2:	edd7 7a03 	vldr	s15, [r7, #12]
    }
}
 80015c6:	eeb0 0a67 	vmov.f32	s0, s15
 80015ca:	3720      	adds	r7, #32
 80015cc:	46bd      	mov	sp, r7
 80015ce:	ecbd 8b02 	vpop	{d8}
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	3f733333 	.word	0x3f733333

080015d8 <polyBLEP>:
float polyBLEP(float t, float phaseInc) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	ed87 0a01 	vstr	s0, [r7, #4]
 80015e2:	edc7 0a00 	vstr	s1, [r7]
	float dt = phaseInc / 2 * PI;
 80015e6:	edd7 7a00 	vldr	s15, [r7]
 80015ea:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80015ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015f2:	ee16 0a90 	vmov	r0, s13
 80015f6:	f7fe ff4b 	bl	8000490 <__aeabi_f2d>
 80015fa:	a330      	add	r3, pc, #192	@ (adr r3, 80016bc <polyBLEP+0xe4>)
 80015fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001600:	f7fe ff9e 	bl	8000540 <__aeabi_dmul>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff f9ca 	bl	80009a4 <__aeabi_d2f>
 8001610:	4603      	mov	r3, r0
 8001612:	60fb      	str	r3, [r7, #12]
    if (t < dt) {
 8001614:	ed97 7a01 	vldr	s14, [r7, #4]
 8001618:	edd7 7a03 	vldr	s15, [r7, #12]
 800161c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001624:	d516      	bpl.n	8001654 <polyBLEP+0x7c>
        t /= dt;
 8001626:	edd7 6a01 	vldr	s13, [r7, #4]
 800162a:	ed97 7a03 	vldr	s14, [r7, #12]
 800162e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001632:	edc7 7a01 	vstr	s15, [r7, #4]
        return t + t - t * t - 1.0f;
 8001636:	edd7 7a01 	vldr	s15, [r7, #4]
 800163a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800163e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001642:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001646:	ee77 7a67 	vsub.f32	s15, s14, s15
 800164a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800164e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001652:	e02b      	b.n	80016ac <polyBLEP+0xd4>
    } else if (t > 1.0f - dt) {
 8001654:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001658:	edd7 7a03 	vldr	s15, [r7, #12]
 800165c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001660:	ed97 7a01 	vldr	s14, [r7, #4]
 8001664:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166c:	dd1c      	ble.n	80016a8 <polyBLEP+0xd0>
        t = (t - 1.0f) / dt;
 800166e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001672:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001676:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800167a:	ed97 7a03 	vldr	s14, [r7, #12]
 800167e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001682:	edc7 7a01 	vstr	s15, [r7, #4]
        return t * t + t + t + 1.0f;
 8001686:	edd7 7a01 	vldr	s15, [r7, #4]
 800168a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800168e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001692:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001696:	edd7 7a01 	vldr	s15, [r7, #4]
 800169a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800169e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80016a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016a6:	e001      	b.n	80016ac <polyBLEP+0xd4>
    } else {
        return 0.0f;
 80016a8:	eddf 7a03 	vldr	s15, [pc, #12]	@ 80016b8 <polyBLEP+0xe0>
    }
}
 80016ac:	eeb0 0a67 	vmov.f32	s0, s15
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	00000000 	.word	0x00000000
 80016bc:	54442d18 	.word	0x54442d18
 80016c0:	400921fb 	.word	0x400921fb

080016c4 <noiseGate>:
static float noiseGate(float sample, float threshold) {
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80016ce:	edc7 0a00 	vstr	s1, [r7]
    if (fabsf(sample) < threshold) {
 80016d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80016d6:	eef0 7ae7 	vabs.f32	s15, s15
 80016da:	ed97 7a00 	vldr	s14, [r7]
 80016de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e6:	dd02      	ble.n	80016ee <noiseGate+0x2a>
        return 0.0f;
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	e000      	b.n	80016f0 <noiseGate+0x2c>
    }
    return sample;
 80016ee:	687b      	ldr	r3, [r7, #4]
}
 80016f0:	ee07 3a90 	vmov	s15, r3
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <movingAverage>:
static float movingAverage(float sample, float *smoothBuffer, uint8_t *smoothIndex) {
 8001704:	b480      	push	{r7}
 8001706:	b087      	sub	sp, #28
 8001708:	af00      	add	r7, sp, #0
 800170a:	ed87 0a03 	vstr	s0, [r7, #12]
 800170e:	60b8      	str	r0, [r7, #8]
 8001710:	6079      	str	r1, [r7, #4]
    smoothBuffer[*smoothIndex] = sample;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	68ba      	ldr	r2, [r7, #8]
 800171a:	4413      	add	r3, r2
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	601a      	str	r2, [r3, #0]
    *smoothIndex = (*smoothIndex + 1) % SMOOTH_LEN;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	1c5a      	adds	r2, r3, #1
 8001726:	4b19      	ldr	r3, [pc, #100]	@ (800178c <movingAverage+0x88>)
 8001728:	fb83 3102 	smull	r3, r1, r3, r2
 800172c:	17d3      	asrs	r3, r2, #31
 800172e:	1ac9      	subs	r1, r1, r3
 8001730:	460b      	mov	r3, r1
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	440b      	add	r3, r1
 8001736:	1ad1      	subs	r1, r2, r3
 8001738:	b2ca      	uxtb	r2, r1
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	701a      	strb	r2, [r3, #0]

    float sum = 0.0f;
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < SMOOTH_LEN; i++) {
 8001744:	2300      	movs	r3, #0
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	e00e      	b.n	8001768 <movingAverage+0x64>
        sum += smoothBuffer[i];
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	4413      	add	r3, r2
 8001752:	edd3 7a00 	vldr	s15, [r3]
 8001756:	ed97 7a05 	vldr	s14, [r7, #20]
 800175a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800175e:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < SMOOTH_LEN; i++) {
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	3301      	adds	r3, #1
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	2b02      	cmp	r3, #2
 800176c:	dded      	ble.n	800174a <movingAverage+0x46>
    }
    return sum / SMOOTH_LEN;
 800176e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001772:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001776:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800177a:	eef0 7a66 	vmov.f32	s15, s13
}
 800177e:	eeb0 0a67 	vmov.f32	s0, s15
 8001782:	371c      	adds	r7, #28
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	55555556 	.word	0x55555556

08001790 <fillSawBlock>:
static void fillSawBlock(int16_t *buf, int len, float freq, float vol) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	ed87 0a01 	vstr	s0, [r7, #4]
 800179e:	edc7 0a00 	vstr	s1, [r7]
    static float phase = 0.0f;
    static float smoothBuffer[SMOOTH_LEN] = {0};
    static uint8_t smoothIndex;
    float phaseInc = freq / SAMPLE_RATE;
 80017a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80017a6:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8001934 <fillSawBlock+0x1a4>
 80017aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ae:	edc7 7a05 	vstr	s15, [r7, #20]

    for (int i = 0; i < len; i = i + 2) {
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
 80017b6:	e0b3      	b.n	8001920 <fillSawBlock+0x190>
        float t = phase;
 80017b8:	4b5f      	ldr	r3, [pc, #380]	@ (8001938 <fillSawBlock+0x1a8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	613b      	str	r3, [r7, #16]
        float value = 2.0f * t - 1.0f;
 80017be:	edd7 7a04 	vldr	s15, [r7, #16]
 80017c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80017ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017ce:	edc7 7a06 	vstr	s15, [r7, #24]
        value -= polyBLEP(t, phaseInc); // apply PolyBLEP correction
 80017d2:	edd7 0a05 	vldr	s1, [r7, #20]
 80017d6:	ed97 0a04 	vldr	s0, [r7, #16]
 80017da:	f7ff fefd 	bl	80015d8 <polyBLEP>
 80017de:	eeb0 7a40 	vmov.f32	s14, s0
 80017e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80017e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017ea:	edc7 7a06 	vstr	s15, [r7, #24]
        if(vol > 1.0){
 80017ee:	edd7 7a00 	vldr	s15, [r7]
 80017f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80017f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fe:	dd18      	ble.n	8001832 <fillSawBlock+0xa2>
        	value = value * 32768.0f * (1.0f + (vol - 1.0f) * 8);
 8001800:	edd7 7a06 	vldr	s15, [r7, #24]
 8001804:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800193c <fillSawBlock+0x1ac>
 8001808:	ee27 7a87 	vmul.f32	s14, s15, s14
 800180c:	edd7 7a00 	vldr	s15, [r7]
 8001810:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001814:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001818:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800181c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001820:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001824:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800182c:	edc7 7a06 	vstr	s15, [r7, #24]
 8001830:	e00b      	b.n	800184a <fillSawBlock+0xba>
        }
        else{
        	value = value * 32768.0f * vol;
 8001832:	edd7 7a06 	vldr	s15, [r7, #24]
 8001836:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 800193c <fillSawBlock+0x1ac>
 800183a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800183e:	ed97 7a00 	vldr	s14, [r7]
 8001842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001846:	edc7 7a06 	vstr	s15, [r7, #24]
        }

		value = noiseGate(value, 1e-4f);
 800184a:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 8001940 <fillSawBlock+0x1b0>
 800184e:	ed97 0a06 	vldr	s0, [r7, #24]
 8001852:	f7ff ff37 	bl	80016c4 <noiseGate>
 8001856:	ed87 0a06 	vstr	s0, [r7, #24]
		value = movingAverage(value, smoothBuffer, &smoothIndex);
 800185a:	493a      	ldr	r1, [pc, #232]	@ (8001944 <fillSawBlock+0x1b4>)
 800185c:	483a      	ldr	r0, [pc, #232]	@ (8001948 <fillSawBlock+0x1b8>)
 800185e:	ed97 0a06 	vldr	s0, [r7, #24]
 8001862:	f7ff ff4f 	bl	8001704 <movingAverage>
 8001866:	ed87 0a06 	vstr	s0, [r7, #24]

		// Apply soft clipping only if value exceeds int16 range
		value = softClip(value, 32768.0f, 0.2f);
 800186a:	ed9f 1a38 	vldr	s2, [pc, #224]	@ 800194c <fillSawBlock+0x1bc>
 800186e:	eddf 0a33 	vldr	s1, [pc, #204]	@ 800193c <fillSawBlock+0x1ac>
 8001872:	ed97 0a06 	vldr	s0, [r7, #24]
 8001876:	f7ff fe2f 	bl	80014d8 <softClip>
 800187a:	ed87 0a06 	vstr	s0, [r7, #24]
		// Clamp just in case (safety net)
		if (value > 32767.0f) value = 32767.0f;
 800187e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001882:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001950 <fillSawBlock+0x1c0>
 8001886:	eef4 7ac7 	vcmpe.f32	s15, s14
 800188a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188e:	dd01      	ble.n	8001894 <fillSawBlock+0x104>
 8001890:	4b30      	ldr	r3, [pc, #192]	@ (8001954 <fillSawBlock+0x1c4>)
 8001892:	61bb      	str	r3, [r7, #24]
		if (value < -32768.0f) value = -32768.0f;
 8001894:	edd7 7a06 	vldr	s15, [r7, #24]
 8001898:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001958 <fillSawBlock+0x1c8>
 800189c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a4:	d502      	bpl.n	80018ac <fillSawBlock+0x11c>
 80018a6:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 80018aa:	61bb      	str	r3, [r7, #24]

        buf[i] = (int16_t)value;
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	4413      	add	r3, r2
 80018b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80018b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018bc:	ee17 2a90 	vmov	r2, s15
 80018c0:	b212      	sxth	r2, r2
 80018c2:	801a      	strh	r2, [r3, #0]
        buf[i+1] = (int16_t)value;
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	3301      	adds	r3, #1
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	4413      	add	r3, r2
 80018ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80018d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018d6:	ee17 2a90 	vmov	r2, s15
 80018da:	b212      	sxth	r2, r2
 80018dc:	801a      	strh	r2, [r3, #0]
        phase += phaseInc;
 80018de:	4b16      	ldr	r3, [pc, #88]	@ (8001938 <fillSawBlock+0x1a8>)
 80018e0:	ed93 7a00 	vldr	s14, [r3]
 80018e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80018e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ec:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <fillSawBlock+0x1a8>)
 80018ee:	edc3 7a00 	vstr	s15, [r3]
        if (phase >= 1.0f) phase -= 1.0f;
 80018f2:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <fillSawBlock+0x1a8>)
 80018f4:	edd3 7a00 	vldr	s15, [r3]
 80018f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80018fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001904:	db09      	blt.n	800191a <fillSawBlock+0x18a>
 8001906:	4b0c      	ldr	r3, [pc, #48]	@ (8001938 <fillSawBlock+0x1a8>)
 8001908:	edd3 7a00 	vldr	s15, [r3]
 800190c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001910:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001914:	4b08      	ldr	r3, [pc, #32]	@ (8001938 <fillSawBlock+0x1a8>)
 8001916:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < len; i = i + 2) {
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3302      	adds	r3, #2
 800191e:	61fb      	str	r3, [r7, #28]
 8001920:	69fa      	ldr	r2, [r7, #28]
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	429a      	cmp	r2, r3
 8001926:	f6ff af47 	blt.w	80017b8 <fillSawBlock+0x28>
    }
}
 800192a:	bf00      	nop
 800192c:	bf00      	nop
 800192e:	3720      	adds	r7, #32
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	473ebc00 	.word	0x473ebc00
 8001938:	200005bc 	.word	0x200005bc
 800193c:	47000000 	.word	0x47000000
 8001940:	38d1b717 	.word	0x38d1b717
 8001944:	200005cc 	.word	0x200005cc
 8001948:	200005c0 	.word	0x200005c0
 800194c:	3e4ccccd 	.word	0x3e4ccccd
 8001950:	46fffe00 	.word	0x46fffe00
 8001954:	46fffe00 	.word	0x46fffe00
 8001958:	c7000000 	.word	0xc7000000
 800195c:	00000000 	.word	0x00000000

08001960 <IIR_LowPassFilter>:
static void IIR_LowPassFilter(int16_t *buf, int len, float freq_cutoff){
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	@ 0x28
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	ed87 0a01 	vstr	s0, [r7, #4]
	float dt = 1.0f / SAMPLE_RATE;
 800196e:	4b48      	ldr	r3, [pc, #288]	@ (8001a90 <IIR_LowPassFilter+0x130>)
 8001970:	623b      	str	r3, [r7, #32]
	float RC = 1 / (2 * PI * freq_cutoff);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7fe fd8c 	bl	8000490 <__aeabi_f2d>
 8001978:	a343      	add	r3, pc, #268	@ (adr r3, 8001a88 <IIR_LowPassFilter+0x128>)
 800197a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197e:	f7fe fddf 	bl	8000540 <__aeabi_dmul>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	f04f 0000 	mov.w	r0, #0
 800198a:	4942      	ldr	r1, [pc, #264]	@ (8001a94 <IIR_LowPassFilter+0x134>)
 800198c:	f7fe ff02 	bl	8000794 <__aeabi_ddiv>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	f7ff f804 	bl	80009a4 <__aeabi_d2f>
 800199c:	4603      	mov	r3, r0
 800199e:	61fb      	str	r3, [r7, #28]
	float a = dt / (RC + dt);
 80019a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80019a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80019a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019ac:	edd7 6a08 	vldr	s13, [r7, #32]
 80019b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019b4:	edc7 7a06 	vstr	s15, [r7, #24]
	static float y_prev = 0.0f;
	for (int i = 0; i < len; i = i + 2) {
 80019b8:	2300      	movs	r3, #0
 80019ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80019bc:	e05a      	b.n	8001a74 <IIR_LowPassFilter+0x114>
		float x = (float)buf[i];
 80019be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	4413      	add	r3, r2
 80019c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ca:	ee07 3a90 	vmov	s15, r3
 80019ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019d2:	edc7 7a05 	vstr	s15, [r7, #20]
		y_prev = (a * x + (1 - a) * y_prev);
 80019d6:	ed97 7a06 	vldr	s14, [r7, #24]
 80019da:	edd7 7a05 	vldr	s15, [r7, #20]
 80019de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80019e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80019ea:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001a98 <IIR_LowPassFilter+0x138>)
 80019f0:	edd3 7a00 	vldr	s15, [r3]
 80019f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019fc:	4b26      	ldr	r3, [pc, #152]	@ (8001a98 <IIR_LowPassFilter+0x138>)
 80019fe:	edc3 7a00 	vstr	s15, [r3]
		if (y_prev < -32768.0f) y_prev = -32768.0f;
 8001a02:	4b25      	ldr	r3, [pc, #148]	@ (8001a98 <IIR_LowPassFilter+0x138>)
 8001a04:	edd3 7a00 	vldr	s15, [r3]
 8001a08:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001a9c <IIR_LowPassFilter+0x13c>
 8001a0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a14:	d503      	bpl.n	8001a1e <IIR_LowPassFilter+0xbe>
 8001a16:	4b20      	ldr	r3, [pc, #128]	@ (8001a98 <IIR_LowPassFilter+0x138>)
 8001a18:	f04f 4247 	mov.w	r2, #3338665984	@ 0xc7000000
 8001a1c:	601a      	str	r2, [r3, #0]
		if (y_prev > 32767.0f) y_prev = 32767.0f;
 8001a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a98 <IIR_LowPassFilter+0x138>)
 8001a20:	edd3 7a00 	vldr	s15, [r3]
 8001a24:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001aa0 <IIR_LowPassFilter+0x140>
 8001a28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a30:	dd02      	ble.n	8001a38 <IIR_LowPassFilter+0xd8>
 8001a32:	4b19      	ldr	r3, [pc, #100]	@ (8001a98 <IIR_LowPassFilter+0x138>)
 8001a34:	4a1b      	ldr	r2, [pc, #108]	@ (8001aa4 <IIR_LowPassFilter+0x144>)
 8001a36:	601a      	str	r2, [r3, #0]
		buf[i] = (int16_t)y_prev;
 8001a38:	4b17      	ldr	r3, [pc, #92]	@ (8001a98 <IIR_LowPassFilter+0x138>)
 8001a3a:	edd3 7a00 	vldr	s15, [r3]
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	4413      	add	r3, r2
 8001a46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a4a:	ee17 2a90 	vmov	r2, s15
 8001a4e:	b212      	sxth	r2, r2
 8001a50:	801a      	strh	r2, [r3, #0]
		buf[i+1] = (int16_t)y_prev;
 8001a52:	4b11      	ldr	r3, [pc, #68]	@ (8001a98 <IIR_LowPassFilter+0x138>)
 8001a54:	edd3 7a00 	vldr	s15, [r3]
 8001a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	4413      	add	r3, r2
 8001a62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a66:	ee17 2a90 	vmov	r2, s15
 8001a6a:	b212      	sxth	r2, r2
 8001a6c:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < len; i = i + 2) {
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a70:	3302      	adds	r3, #2
 8001a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	dba0      	blt.n	80019be <IIR_LowPassFilter+0x5e>
	    }
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	3728      	adds	r7, #40	@ 0x28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	54442d18 	.word	0x54442d18
 8001a8c:	401921fb 	.word	0x401921fb
 8001a90:	37abcc94 	.word	0x37abcc94
 8001a94:	3ff00000 	.word	0x3ff00000
 8001a98:	200005d0 	.word	0x200005d0
 8001a9c:	c7000000 	.word	0xc7000000
 8001aa0:	46fffe00 	.word	0x46fffe00
 8001aa4:	46fffe00 	.word	0x46fffe00

08001aa8 <IIR_2ndOrderFilter>:

static void IIR_2ndOrderFilter(int16_t *in_buf, int16_t *out_buf, int len, filter_par *F_par, biquad_state *Stt){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b090      	sub	sp, #64	@ 0x40
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
 8001ab4:	603b      	str	r3, [r7, #0]
	float omega_0 = 2* PI * (F_par->f_0/SAMPLE_RATE);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	edd3 7a00 	vldr	s15, [r3]
 8001abc:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 8001df0 <IIR_2ndOrderFilter+0x348>
 8001ac0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001ac4:	ee16 0a90 	vmov	r0, s13
 8001ac8:	f7fe fce2 	bl	8000490 <__aeabi_f2d>
 8001acc:	a3c6      	add	r3, pc, #792	@ (adr r3, 8001de8 <IIR_2ndOrderFilter+0x340>)
 8001ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad2:	f7fe fd35 	bl	8000540 <__aeabi_dmul>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4610      	mov	r0, r2
 8001adc:	4619      	mov	r1, r3
 8001ade:	f7fe ff61 	bl	80009a4 <__aeabi_d2f>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	637b      	str	r3, [r7, #52]	@ 0x34
	float alpha = sinf(omega_0) / (2 * F_par -> Q);
 8001ae6:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8001aea:	f007 f957 	bl	8008d9c <sinf>
 8001aee:	eef0 6a40 	vmov.f32	s13, s0
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001af8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001afc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b00:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	biquad_coeffs par;
	if(F_par ->mode == 0){
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	7c1b      	ldrb	r3, [r3, #16]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d13a      	bne.n	8001b82 <IIR_2ndOrderFilter+0xda>
		//LPF mode selected
		par.b0 = (1.0f - cosf(omega_0)) / 2.0f;
 8001b0c:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8001b10:	f007 f900 	bl	8008d14 <cosf>
 8001b14:	eef0 7a40 	vmov.f32	s15, s0
 8001b18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b20:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001b24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b28:	edc7 7a08 	vstr	s15, [r7, #32]
		par.b1 = 1.0f - cosf(omega_0);
 8001b2c:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8001b30:	f007 f8f0 	bl	8008d14 <cosf>
 8001b34:	eef0 7a40 	vmov.f32	s15, s0
 8001b38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b40:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		par.b2 = par.b0;
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	62bb      	str	r3, [r7, #40]	@ 0x28
		par.a0 = 1.0f + alpha;
 8001b48:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001b4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b54:	edc7 7a05 	vstr	s15, [r7, #20]
		par.a1 = -2.0f * cosf(omega_0);
 8001b58:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8001b5c:	f007 f8da 	bl	8008d14 <cosf>
 8001b60:	eef0 7a40 	vmov.f32	s15, s0
 8001b64:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001b68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b6c:	edc7 7a06 	vstr	s15, [r7, #24]
		par.a2 = 1.0f - alpha;
 8001b70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b74:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001b78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b7c:	edc7 7a07 	vstr	s15, [r7, #28]
 8001b80:	e02a      	b.n	8001bd8 <IIR_2ndOrderFilter+0x130>

	}
	else if(F_par -> mode == 1){
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	7c1b      	ldrb	r3, [r3, #16]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d126      	bne.n	8001bd8 <IIR_2ndOrderFilter+0x130>
		//BPF mode selected
		par.b0 = alpha;
 8001b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b8c:	623b      	str	r3, [r7, #32]
		par.b1 = 0;
 8001b8e:	f04f 0300 	mov.w	r3, #0
 8001b92:	627b      	str	r3, [r7, #36]	@ 0x24
		par.b2 = -alpha;
 8001b94:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001b98:	eef1 7a67 	vneg.f32	s15, s15
 8001b9c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		par.a0 = 1.0f + alpha;
 8001ba0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001ba4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ba8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bac:	edc7 7a05 	vstr	s15, [r7, #20]
		par.a1 = -2.0f * cosf(omega_0);
 8001bb0:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8001bb4:	f007 f8ae 	bl	8008d14 <cosf>
 8001bb8:	eef0 7a40 	vmov.f32	s15, s0
 8001bbc:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001bc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bc4:	edc7 7a06 	vstr	s15, [r7, #24]
		par.a2 = 1.0f - alpha;
 8001bc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001bcc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001bd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bd4:	edc7 7a07 	vstr	s15, [r7, #28]

	}
	par.b0 /= par.a0;
 8001bd8:	edd7 6a08 	vldr	s13, [r7, #32]
 8001bdc:	ed97 7a05 	vldr	s14, [r7, #20]
 8001be0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001be4:	edc7 7a08 	vstr	s15, [r7, #32]
	par.b1 /= par.a0;
 8001be8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001bec:	ed97 7a05 	vldr	s14, [r7, #20]
 8001bf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bf4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    par.b2 /= par.a0;
 8001bf8:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001bfc:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c04:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	par.a1 /= par.a0;
 8001c08:	edd7 6a06 	vldr	s13, [r7, #24]
 8001c0c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c14:	edc7 7a06 	vstr	s15, [r7, #24]
	par.a2 /= par.a0;
 8001c18:	edd7 6a07 	vldr	s13, [r7, #28]
 8001c1c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c24:	edc7 7a07 	vstr	s15, [r7, #28]
    for(uint8_t i = 0; i < len; i = i + 2){
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001c2e:	e0cd      	b.n	8001dcc <IIR_2ndOrderFilter+0x324>
    	float y = 0.0f;
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	63bb      	str	r3, [r7, #56]	@ 0x38
    	float x = (float)in_buf[i];
 8001c36:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	4413      	add	r3, r2
 8001c40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c44:	ee07 3a90 	vmov	s15, r3
 8001c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c4c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    	y = par.b0 * x + par.b1 * (Stt -> x_prev) + par.b2 * (Stt -> x_prev_prev) - par.a1 * (Stt -> y_prev) - par.a2 * (Stt -> y_prev_prev);
 8001c50:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c54:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001c58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c5c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001c60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c62:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c6e:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001c72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c74:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c80:	edd7 6a06 	vldr	s13, [r7, #24]
 8001c84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c86:	edd3 7a00 	vldr	s15, [r3]
 8001c8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c92:	edd7 6a07 	vldr	s13, [r7, #28]
 8001c96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c98:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ca0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    	Stt -> x_prev_prev = Stt -> x_prev;
 8001ca8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cae:	60da      	str	r2, [r3, #12]
    	Stt -> x_prev = x;
 8001cb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001cb4:	609a      	str	r2, [r3, #8]
    	Stt -> y_prev_prev = Stt -> y_prev;
 8001cb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cbc:	605a      	str	r2, [r3, #4]
    	Stt -> y_prev = y;
 8001cbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001cc2:	601a      	str	r2, [r3, #0]
		if(F_par ->vol > 1.0){
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001cce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd6:	dd15      	ble.n	8001d04 <IIR_2ndOrderFilter+0x25c>
			y = y * (1.0f + (F_par ->vol - 1.0f) * 8);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ce2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ce6:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8001cea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001cf2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cf6:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cfe:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
 8001d02:	e008      	b.n	8001d16 <IIR_2ndOrderFilter+0x26e>
		}
		else{
			y = y * F_par ->vol;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d0a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d12:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		}
		// Apply soft clipping only if value exceeds int16 range
		y = softClip(y, 32768.0f, 0.2f);
 8001d16:	ed9f 1a37 	vldr	s2, [pc, #220]	@ 8001df4 <IIR_2ndOrderFilter+0x34c>
 8001d1a:	eddf 0a37 	vldr	s1, [pc, #220]	@ 8001df8 <IIR_2ndOrderFilter+0x350>
 8001d1e:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 8001d22:	f7ff fbd9 	bl	80014d8 <softClip>
 8001d26:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
		// Clamp just in case (safety net)
		if (y > 32767.0f) y = 32767.0f;
 8001d2a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001d2e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001dfc <IIR_2ndOrderFilter+0x354>
 8001d32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3a:	dd01      	ble.n	8001d40 <IIR_2ndOrderFilter+0x298>
 8001d3c:	4b30      	ldr	r3, [pc, #192]	@ (8001e00 <IIR_2ndOrderFilter+0x358>)
 8001d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (y < -32768.0f) y = -32768.0f;
 8001d40:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001d44:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001e04 <IIR_2ndOrderFilter+0x35c>
 8001d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d50:	d502      	bpl.n	8001d58 <IIR_2ndOrderFilter+0x2b0>
 8001d52:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 8001d56:	63bb      	str	r3, [r7, #56]	@ 0x38
		if(F_par ->vol > 0.01f){
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d5e:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001e08 <IIR_2ndOrderFilter+0x360>
 8001d62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6a:	dd1b      	ble.n	8001da4 <IIR_2ndOrderFilter+0x2fc>
			out_buf[i] = (int16_t)y;
 8001d6c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	4413      	add	r3, r2
 8001d76:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001d7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d7e:	ee17 2a90 	vmov	r2, s15
 8001d82:	b212      	sxth	r2, r2
 8001d84:	801a      	strh	r2, [r3, #0]
			out_buf[i+1] = (int16_t)y;
 8001d86:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	4413      	add	r3, r2
 8001d92:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001d96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d9a:	ee17 2a90 	vmov	r2, s15
 8001d9e:	b212      	sxth	r2, r2
 8001da0:	801a      	strh	r2, [r3, #0]
 8001da2:	e00e      	b.n	8001dc2 <IIR_2ndOrderFilter+0x31a>
		}
		else{
			out_buf[i] = 0;
 8001da4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	4413      	add	r3, r2
 8001dae:	2200      	movs	r2, #0
 8001db0:	801a      	strh	r2, [r3, #0]
			out_buf[i+1] = 0;
 8001db2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001db6:	3301      	adds	r3, #1
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	801a      	strh	r2, [r3, #0]
    for(uint8_t i = 0; i < len; i = i + 2){
 8001dc2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001dc6:	3302      	adds	r3, #2
 8001dc8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001dcc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	f73f af2c 	bgt.w	8001c30 <IIR_2ndOrderFilter+0x188>
		}

    }
}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	3740      	adds	r7, #64	@ 0x40
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	f3af 8000 	nop.w
 8001de8:	54442d18 	.word	0x54442d18
 8001dec:	401921fb 	.word	0x401921fb
 8001df0:	473ebc00 	.word	0x473ebc00
 8001df4:	3e4ccccd 	.word	0x3e4ccccd
 8001df8:	47000000 	.word	0x47000000
 8001dfc:	46fffe00 	.word	0x46fffe00
 8001e00:	46fffe00 	.word	0x46fffe00
 8001e04:	c7000000 	.word	0xc7000000
 8001e08:	3c23d70a 	.word	0x3c23d70a

08001e0c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a29      	ldr	r2, [pc, #164]	@ (8001ec0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d14c      	bne.n	8001eb8 <HAL_TIM_PeriodElapsedCallback+0xac>
		HAL_TIM_Base_Stop_IT(&htim4); // Stop debounce timer
 8001e1e:	4829      	ldr	r0, [pc, #164]	@ (8001ec4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001e20:	f006 f9a2 	bl	8008168 <HAL_TIM_Base_Stop_IT>

		// Now read stable switch state
		if (HAL_GPIO_ReadPin(GPIOA, PreFilterSwitch_Pin) == GPIO_PIN_SET) {
 8001e24:	2101      	movs	r1, #1
 8001e26:	4828      	ldr	r0, [pc, #160]	@ (8001ec8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001e28:	f003 fd46 	bl	80058b8 <HAL_GPIO_ReadPin>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d142      	bne.n	8001eb8 <HAL_TIM_PeriodElapsedCallback+0xac>
			// Button released or in high state
			preFilSwMode = (preFilSwMode + 1) % 3;
 8001e32:	4b26      	ldr	r3, [pc, #152]	@ (8001ecc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	4b25      	ldr	r3, [pc, #148]	@ (8001ed0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001e3a:	fb83 3102 	smull	r3, r1, r3, r2
 8001e3e:	17d3      	asrs	r3, r2, #31
 8001e40:	1ac9      	subs	r1, r1, r3
 8001e42:	460b      	mov	r3, r1
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	440b      	add	r3, r1
 8001e48:	1ad1      	subs	r1, r2, r3
 8001e4a:	b2ca      	uxtb	r2, r1
 8001e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ecc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001e4e:	701a      	strb	r2, [r3, #0]
			switch(preFilSwMode){
 8001e50:	4b1e      	ldr	r3, [pc, #120]	@ (8001ecc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d002      	beq.n	8001e5e <HAL_TIM_PeriodElapsedCallback+0x52>
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d010      	beq.n	8001e7e <HAL_TIM_PeriodElapsedCallback+0x72>
 8001e5c:	e01f      	b.n	8001e9e <HAL_TIM_PeriodElapsedCallback+0x92>
				  case 1:
					  cutoffFreq = 100.0f;
 8001e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001e60:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001e62:	601a      	str	r2, [r3, #0]
					  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001e64:	2201      	movs	r2, #1
 8001e66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e6a:	481c      	ldr	r0, [pc, #112]	@ (8001edc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001e6c:	f003 fd3c 	bl	80058e8 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001e70:	2200      	movs	r2, #0
 8001e72:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e76:	4819      	ldr	r0, [pc, #100]	@ (8001edc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001e78:	f003 fd36 	bl	80058e8 <HAL_GPIO_WritePin>
					  break;
 8001e7c:	e01c      	b.n	8001eb8 <HAL_TIM_PeriodElapsedCallback+0xac>
				  case 2:
					  cutoffFreq = 500.0f;
 8001e7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ed4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001e80:	4a17      	ldr	r2, [pc, #92]	@ (8001ee0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001e82:	601a      	str	r2, [r3, #0]
					  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e84:	2200      	movs	r2, #0
 8001e86:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e8a:	4814      	ldr	r0, [pc, #80]	@ (8001edc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001e8c:	f003 fd2c 	bl	80058e8 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001e90:	2201      	movs	r2, #1
 8001e92:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e96:	4811      	ldr	r0, [pc, #68]	@ (8001edc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001e98:	f003 fd26 	bl	80058e8 <HAL_GPIO_WritePin>
					  break;
 8001e9c:	e00c      	b.n	8001eb8 <HAL_TIM_PeriodElapsedCallback+0xac>
				  default:
					  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ea4:	480d      	ldr	r0, [pc, #52]	@ (8001edc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001ea6:	f003 fd1f 	bl	80058e8 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001eb0:	480a      	ldr	r0, [pc, #40]	@ (8001edc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001eb2:	f003 fd19 	bl	80058e8 <HAL_GPIO_WritePin>
					  break;
 8001eb6:	bf00      	nop
			}
		}
	}
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40000800 	.word	0x40000800
 8001ec4:	200003f4 	.word	0x200003f4
 8001ec8:	40020000 	.word	0x40020000
 8001ecc:	20000574 	.word	0x20000574
 8001ed0:	55555556 	.word	0x55555556
 8001ed4:	20000010 	.word	0x20000010
 8001ed8:	42c80000 	.word	0x42c80000
 8001edc:	40020c00 	.word	0x40020c00
 8001ee0:	43fa0000 	.word	0x43fa0000

08001ee4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN == PreFilterSwitch_Pin){
 8001eee:	88fb      	ldrh	r3, [r7, #6]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d102      	bne.n	8001efa <HAL_GPIO_EXTI_Callback+0x16>
		HAL_TIM_Base_Start_IT(&htim4);
 8001ef4:	4810      	ldr	r0, [pc, #64]	@ (8001f38 <HAL_GPIO_EXTI_Callback+0x54>)
 8001ef6:	f006 f8c7 	bl	8008088 <HAL_TIM_Base_Start_IT>
	}

	//1x4 keypad
	if(GPIO_PIN == OCT1_Pin){
 8001efa:	88fb      	ldrh	r3, [r7, #6]
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d103      	bne.n	8001f08 <HAL_GPIO_EXTI_Callback+0x24>
		currentOct = 1;
 8001f00:	4b0e      	ldr	r3, [pc, #56]	@ (8001f3c <HAL_GPIO_EXTI_Callback+0x58>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	701a      	strb	r2, [r3, #0]
		currentOct = 3;
	}
	else if(GPIO_PIN == OCT4_Pin){
		currentOct = 4;
	}
}
 8001f06:	e013      	b.n	8001f30 <HAL_GPIO_EXTI_Callback+0x4c>
	else if(GPIO_PIN == OCT2_Pin){
 8001f08:	88fb      	ldrh	r3, [r7, #6]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d103      	bne.n	8001f16 <HAL_GPIO_EXTI_Callback+0x32>
		currentOct = 2;
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f3c <HAL_GPIO_EXTI_Callback+0x58>)
 8001f10:	2202      	movs	r2, #2
 8001f12:	701a      	strb	r2, [r3, #0]
}
 8001f14:	e00c      	b.n	8001f30 <HAL_GPIO_EXTI_Callback+0x4c>
	else if(GPIO_PIN == OCT3_Pin){
 8001f16:	88fb      	ldrh	r3, [r7, #6]
 8001f18:	2b40      	cmp	r3, #64	@ 0x40
 8001f1a:	d103      	bne.n	8001f24 <HAL_GPIO_EXTI_Callback+0x40>
		currentOct = 3;
 8001f1c:	4b07      	ldr	r3, [pc, #28]	@ (8001f3c <HAL_GPIO_EXTI_Callback+0x58>)
 8001f1e:	2203      	movs	r2, #3
 8001f20:	701a      	strb	r2, [r3, #0]
}
 8001f22:	e005      	b.n	8001f30 <HAL_GPIO_EXTI_Callback+0x4c>
	else if(GPIO_PIN == OCT4_Pin){
 8001f24:	88fb      	ldrh	r3, [r7, #6]
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d102      	bne.n	8001f30 <HAL_GPIO_EXTI_Callback+0x4c>
		currentOct = 4;
 8001f2a:	4b04      	ldr	r3, [pc, #16]	@ (8001f3c <HAL_GPIO_EXTI_Callback+0x58>)
 8001f2c:	2204      	movs	r2, #4
 8001f2e:	701a      	strb	r2, [r3, #0]
}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	200003f4 	.word	0x200003f4
 8001f3c:	20000014 	.word	0x20000014

08001f40 <HAL_I2S_TxHalfCpltCallback>:
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	ed2d 8b02 	vpush	{d8}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af02      	add	r7, sp, #8
 8001f4a:	6078      	str	r0, [r7, #4]
	Enc1_counter = __HAL_TIM_GET_COUNTER(&htim3);
 8001f4c:	4bba      	ldr	r3, [pc, #744]	@ (8002238 <HAL_I2S_TxHalfCpltCallback+0x2f8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f52:	4aba      	ldr	r2, [pc, #744]	@ (800223c <HAL_I2S_TxHalfCpltCallback+0x2fc>)
 8001f54:	6013      	str	r3, [r2, #0]
	if (Enc1_counter > 60000)
 8001f56:	4bb9      	ldr	r3, [pc, #740]	@ (800223c <HAL_I2S_TxHalfCpltCallback+0x2fc>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d906      	bls.n	8001f70 <HAL_I2S_TxHalfCpltCallback+0x30>
	{
	  __HAL_TIM_SET_COUNTER(&htim3,0);
 8001f62:	4bb5      	ldr	r3, [pc, #724]	@ (8002238 <HAL_I2S_TxHalfCpltCallback+0x2f8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2200      	movs	r2, #0
 8001f68:	625a      	str	r2, [r3, #36]	@ 0x24
	  Enc1_counter=0;
 8001f6a:	4bb4      	ldr	r3, [pc, #720]	@ (800223c <HAL_I2S_TxHalfCpltCallback+0x2fc>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
	}
	if (Enc1_counter > 100)
 8001f70:	4bb2      	ldr	r3, [pc, #712]	@ (800223c <HAL_I2S_TxHalfCpltCallback+0x2fc>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b64      	cmp	r3, #100	@ 0x64
 8001f76:	d906      	bls.n	8001f86 <HAL_I2S_TxHalfCpltCallback+0x46>
	{
	  __HAL_TIM_SET_COUNTER(&htim3,100);
 8001f78:	4baf      	ldr	r3, [pc, #700]	@ (8002238 <HAL_I2S_TxHalfCpltCallback+0x2f8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2264      	movs	r2, #100	@ 0x64
 8001f7e:	625a      	str	r2, [r3, #36]	@ 0x24
	  Enc1_counter=100;
 8001f80:	4bae      	ldr	r3, [pc, #696]	@ (800223c <HAL_I2S_TxHalfCpltCallback+0x2fc>)
 8001f82:	2264      	movs	r2, #100	@ 0x64
 8001f84:	601a      	str	r2, [r3, #0]
	}
	portamentoSpeed = (100 - Enc1_counter)/10000.0f;
 8001f86:	4bad      	ldr	r3, [pc, #692]	@ (800223c <HAL_I2S_TxHalfCpltCallback+0x2fc>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8001f8e:	ee07 3a90 	vmov	s15, r3
 8001f92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f96:	eddf 6aaa 	vldr	s13, [pc, #680]	@ 8002240 <HAL_I2S_TxHalfCpltCallback+0x300>
 8001f9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f9e:	4ba9      	ldr	r3, [pc, #676]	@ (8002244 <HAL_I2S_TxHalfCpltCallback+0x304>)
 8001fa0:	edc3 7a00 	vstr	s15, [r3]
	if(portamentoSpeed > 0.01f){
 8001fa4:	4ba7      	ldr	r3, [pc, #668]	@ (8002244 <HAL_I2S_TxHalfCpltCallback+0x304>)
 8001fa6:	edd3 7a00 	vldr	s15, [r3]
 8001faa:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 8002248 <HAL_I2S_TxHalfCpltCallback+0x308>
 8001fae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb6:	dd03      	ble.n	8001fc0 <HAL_I2S_TxHalfCpltCallback+0x80>
		portamentoSpeed = 0.01f;
 8001fb8:	4ba2      	ldr	r3, [pc, #648]	@ (8002244 <HAL_I2S_TxHalfCpltCallback+0x304>)
 8001fba:	4aa4      	ldr	r2, [pc, #656]	@ (800224c <HAL_I2S_TxHalfCpltCallback+0x30c>)
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	e00c      	b.n	8001fda <HAL_I2S_TxHalfCpltCallback+0x9a>
	}
	else if(portamentoSpeed < 0.0001f){
 8001fc0:	4ba0      	ldr	r3, [pc, #640]	@ (8002244 <HAL_I2S_TxHalfCpltCallback+0x304>)
 8001fc2:	edd3 7a00 	vldr	s15, [r3]
 8001fc6:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8002250 <HAL_I2S_TxHalfCpltCallback+0x310>
 8001fca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd2:	d502      	bpl.n	8001fda <HAL_I2S_TxHalfCpltCallback+0x9a>
		portamentoSpeed = 0.0001f;
 8001fd4:	4b9b      	ldr	r3, [pc, #620]	@ (8002244 <HAL_I2S_TxHalfCpltCallback+0x304>)
 8001fd6:	4a9f      	ldr	r2, [pc, #636]	@ (8002254 <HAL_I2S_TxHalfCpltCallback+0x314>)
 8001fd8:	601a      	str	r2, [r3, #0]
	}

	Enc2_counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001fda:	4b9f      	ldr	r3, [pc, #636]	@ (8002258 <HAL_I2S_TxHalfCpltCallback+0x318>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe0:	4a9e      	ldr	r2, [pc, #632]	@ (800225c <HAL_I2S_TxHalfCpltCallback+0x31c>)
 8001fe2:	6013      	str	r3, [r2, #0]
	if (Enc2_counter > 60000)
 8001fe4:	4b9d      	ldr	r3, [pc, #628]	@ (800225c <HAL_I2S_TxHalfCpltCallback+0x31c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d906      	bls.n	8001ffe <HAL_I2S_TxHalfCpltCallback+0xbe>
	{
	  __HAL_TIM_SET_COUNTER(&htim2,0);
 8001ff0:	4b99      	ldr	r3, [pc, #612]	@ (8002258 <HAL_I2S_TxHalfCpltCallback+0x318>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	625a      	str	r2, [r3, #36]	@ 0x24
	  Enc2_counter=0;
 8001ff8:	4b98      	ldr	r3, [pc, #608]	@ (800225c <HAL_I2S_TxHalfCpltCallback+0x31c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
	}
	if (Enc2_counter > 200)
 8001ffe:	4b97      	ldr	r3, [pc, #604]	@ (800225c <HAL_I2S_TxHalfCpltCallback+0x31c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2bc8      	cmp	r3, #200	@ 0xc8
 8002004:	d906      	bls.n	8002014 <HAL_I2S_TxHalfCpltCallback+0xd4>
	{
	  __HAL_TIM_SET_COUNTER(&htim2,200);
 8002006:	4b94      	ldr	r3, [pc, #592]	@ (8002258 <HAL_I2S_TxHalfCpltCallback+0x318>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	22c8      	movs	r2, #200	@ 0xc8
 800200c:	625a      	str	r2, [r3, #36]	@ 0x24
	  Enc2_counter=200;
 800200e:	4b93      	ldr	r3, [pc, #588]	@ (800225c <HAL_I2S_TxHalfCpltCallback+0x31c>)
 8002010:	22c8      	movs	r2, #200	@ 0xc8
 8002012:	601a      	str	r2, [r3, #0]
	}
	OscillatorVol = Enc2_counter / 160.0f;
 8002014:	4b91      	ldr	r3, [pc, #580]	@ (800225c <HAL_I2S_TxHalfCpltCallback+0x31c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	ee07 3a90 	vmov	s15, r3
 800201c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002020:	eddf 6a8f 	vldr	s13, [pc, #572]	@ 8002260 <HAL_I2S_TxHalfCpltCallback+0x320>
 8002024:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002028:	4b8e      	ldr	r3, [pc, #568]	@ (8002264 <HAL_I2S_TxHalfCpltCallback+0x324>)
 800202a:	edc3 7a00 	vstr	s15, [r3]
    // Refill first half [0 .. BUF_SIZE/2)
	if(!fixedScaleMode){
 800202e:	4b8e      	ldr	r3, [pc, #568]	@ (8002268 <HAL_I2S_TxHalfCpltCallback+0x328>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d12e      	bne.n	8002094 <HAL_I2S_TxHalfCpltCallback+0x154>
		currentFreq = 110 * powf(4.0, (4095 - CurrFreqADC)/4095.0f) * powf(2, currentOct - 1);
 8002036:	4b8d      	ldr	r3, [pc, #564]	@ (800226c <HAL_I2S_TxHalfCpltCallback+0x32c>)
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	b29b      	uxth	r3, r3
 800203c:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8002040:	330f      	adds	r3, #15
 8002042:	ee07 3a90 	vmov	s15, r3
 8002046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800204a:	eddf 6a89 	vldr	s13, [pc, #548]	@ 8002270 <HAL_I2S_TxHalfCpltCallback+0x330>
 800204e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002052:	eef0 0a47 	vmov.f32	s1, s14
 8002056:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 800205a:	f006 fe03 	bl	8008c64 <powf>
 800205e:	eef0 7a40 	vmov.f32	s15, s0
 8002062:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8002274 <HAL_I2S_TxHalfCpltCallback+0x334>
 8002066:	ee27 8a87 	vmul.f32	s16, s15, s14
 800206a:	4b83      	ldr	r3, [pc, #524]	@ (8002278 <HAL_I2S_TxHalfCpltCallback+0x338>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	3b01      	subs	r3, #1
 8002070:	ee07 3a90 	vmov	s15, r3
 8002074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002078:	eef0 0a67 	vmov.f32	s1, s15
 800207c:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8002080:	f006 fdf0 	bl	8008c64 <powf>
 8002084:	eef0 7a40 	vmov.f32	s15, s0
 8002088:	ee68 7a27 	vmul.f32	s15, s16, s15
 800208c:	4b7b      	ldr	r3, [pc, #492]	@ (800227c <HAL_I2S_TxHalfCpltCallback+0x33c>)
 800208e:	edc3 7a00 	vstr	s15, [r3]
 8002092:	e098      	b.n	80021c6 <HAL_I2S_TxHalfCpltCallback+0x286>
	}
	else{
		fixedScale = (uint8_t)((4095 - CurrFreqADC)*24/4095.0f + 0.5);
 8002094:	4b75      	ldr	r3, [pc, #468]	@ (800226c <HAL_I2S_TxHalfCpltCallback+0x32c>)
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	b29b      	uxth	r3, r3
 800209a:	f5c3 627f 	rsb	r2, r3, #4080	@ 0xff0
 800209e:	320f      	adds	r2, #15
 80020a0:	4613      	mov	r3, r2
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	4413      	add	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	ee07 3a90 	vmov	s15, r3
 80020ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020b0:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8002270 <HAL_I2S_TxHalfCpltCallback+0x330>
 80020b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80020b8:	ee16 0a90 	vmov	r0, s13
 80020bc:	f7fe f9e8 	bl	8000490 <__aeabi_f2d>
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	4b6e      	ldr	r3, [pc, #440]	@ (8002280 <HAL_I2S_TxHalfCpltCallback+0x340>)
 80020c6:	f7fe f885 	bl	80001d4 <__adddf3>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	4610      	mov	r0, r2
 80020d0:	4619      	mov	r1, r3
 80020d2:	f7fe fc47 	bl	8000964 <__aeabi_d2uiz>
 80020d6:	4603      	mov	r3, r0
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4b6a      	ldr	r3, [pc, #424]	@ (8002284 <HAL_I2S_TxHalfCpltCallback+0x344>)
 80020dc:	701a      	strb	r2, [r3, #0]
		if(currentAmp < 0.01f){
 80020de:	4b6a      	ldr	r3, [pc, #424]	@ (8002288 <HAL_I2S_TxHalfCpltCallback+0x348>)
 80020e0:	edd3 7a00 	vldr	s15, [r3]
 80020e4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002248 <HAL_I2S_TxHalfCpltCallback+0x308>
 80020e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f0:	d52a      	bpl.n	8002148 <HAL_I2S_TxHalfCpltCallback+0x208>
			currentFreq = 110 * powf(4.0, fixedScale/24.0f) * powf(2, currentOct - 1);
 80020f2:	4b64      	ldr	r3, [pc, #400]	@ (8002284 <HAL_I2S_TxHalfCpltCallback+0x344>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	ee07 3a90 	vmov	s15, r3
 80020fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020fe:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8002102:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002106:	eef0 0a47 	vmov.f32	s1, s14
 800210a:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 800210e:	f006 fda9 	bl	8008c64 <powf>
 8002112:	eef0 7a40 	vmov.f32	s15, s0
 8002116:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8002274 <HAL_I2S_TxHalfCpltCallback+0x334>
 800211a:	ee27 8a87 	vmul.f32	s16, s15, s14
 800211e:	4b56      	ldr	r3, [pc, #344]	@ (8002278 <HAL_I2S_TxHalfCpltCallback+0x338>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	3b01      	subs	r3, #1
 8002124:	ee07 3a90 	vmov	s15, r3
 8002128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800212c:	eef0 0a67 	vmov.f32	s1, s15
 8002130:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8002134:	f006 fd96 	bl	8008c64 <powf>
 8002138:	eef0 7a40 	vmov.f32	s15, s0
 800213c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002140:	4b4e      	ldr	r3, [pc, #312]	@ (800227c <HAL_I2S_TxHalfCpltCallback+0x33c>)
 8002142:	edc3 7a00 	vstr	s15, [r3]
 8002146:	e03e      	b.n	80021c6 <HAL_I2S_TxHalfCpltCallback+0x286>
		}
		else{
			targetFreq = 110 * powf(4.0, fixedScale/24.0f) * powf(2, currentOct - 1);
 8002148:	4b4e      	ldr	r3, [pc, #312]	@ (8002284 <HAL_I2S_TxHalfCpltCallback+0x344>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	ee07 3a90 	vmov	s15, r3
 8002150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002154:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8002158:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800215c:	eef0 0a47 	vmov.f32	s1, s14
 8002160:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8002164:	f006 fd7e 	bl	8008c64 <powf>
 8002168:	eef0 7a40 	vmov.f32	s15, s0
 800216c:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8002274 <HAL_I2S_TxHalfCpltCallback+0x334>
 8002170:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002174:	4b40      	ldr	r3, [pc, #256]	@ (8002278 <HAL_I2S_TxHalfCpltCallback+0x338>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	3b01      	subs	r3, #1
 800217a:	ee07 3a90 	vmov	s15, r3
 800217e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002182:	eef0 0a67 	vmov.f32	s1, s15
 8002186:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800218a:	f006 fd6b 	bl	8008c64 <powf>
 800218e:	eef0 7a40 	vmov.f32	s15, s0
 8002192:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002196:	4b3d      	ldr	r3, [pc, #244]	@ (800228c <HAL_I2S_TxHalfCpltCallback+0x34c>)
 8002198:	edc3 7a00 	vstr	s15, [r3]
			currentFreq += (targetFreq - currentFreq) * portamentoSpeed;
 800219c:	4b3b      	ldr	r3, [pc, #236]	@ (800228c <HAL_I2S_TxHalfCpltCallback+0x34c>)
 800219e:	ed93 7a00 	vldr	s14, [r3]
 80021a2:	4b36      	ldr	r3, [pc, #216]	@ (800227c <HAL_I2S_TxHalfCpltCallback+0x33c>)
 80021a4:	edd3 7a00 	vldr	s15, [r3]
 80021a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021ac:	4b25      	ldr	r3, [pc, #148]	@ (8002244 <HAL_I2S_TxHalfCpltCallback+0x304>)
 80021ae:	edd3 7a00 	vldr	s15, [r3]
 80021b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021b6:	4b31      	ldr	r3, [pc, #196]	@ (800227c <HAL_I2S_TxHalfCpltCallback+0x33c>)
 80021b8:	edd3 7a00 	vldr	s15, [r3]
 80021bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c0:	4b2e      	ldr	r3, [pc, #184]	@ (800227c <HAL_I2S_TxHalfCpltCallback+0x33c>)
 80021c2:	edc3 7a00 	vstr	s15, [r3]
		}
	}

	currentAmp = ((CurrAmpADC - 300)*1.0)/3400;
 80021c6:	4b29      	ldr	r3, [pc, #164]	@ (800226c <HAL_I2S_TxHalfCpltCallback+0x32c>)
 80021c8:	885b      	ldrh	r3, [r3, #2]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe f94b 	bl	800046c <__aeabi_i2d>
 80021d6:	a316      	add	r3, pc, #88	@ (adr r3, 8002230 <HAL_I2S_TxHalfCpltCallback+0x2f0>)
 80021d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021dc:	f7fe fada 	bl	8000794 <__aeabi_ddiv>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4610      	mov	r0, r2
 80021e6:	4619      	mov	r1, r3
 80021e8:	f7fe fbdc 	bl	80009a4 <__aeabi_d2f>
 80021ec:	4603      	mov	r3, r0
 80021ee:	4a26      	ldr	r2, [pc, #152]	@ (8002288 <HAL_I2S_TxHalfCpltCallback+0x348>)
 80021f0:	6013      	str	r3, [r2, #0]
	if(currentAmp > 1.0f){
 80021f2:	4b25      	ldr	r3, [pc, #148]	@ (8002288 <HAL_I2S_TxHalfCpltCallback+0x348>)
 80021f4:	edd3 7a00 	vldr	s15, [r3]
 80021f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80021fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002204:	dd03      	ble.n	800220e <HAL_I2S_TxHalfCpltCallback+0x2ce>
		currentAmp = 1.0f;
 8002206:	4b20      	ldr	r3, [pc, #128]	@ (8002288 <HAL_I2S_TxHalfCpltCallback+0x348>)
 8002208:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800220c:	601a      	str	r2, [r3, #0]
	}
	if(currentAmp < 0.01f){
 800220e:	4b1e      	ldr	r3, [pc, #120]	@ (8002288 <HAL_I2S_TxHalfCpltCallback+0x348>)
 8002210:	edd3 7a00 	vldr	s15, [r3]
 8002214:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8002248 <HAL_I2S_TxHalfCpltCallback+0x308>
 8002218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800221c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002220:	d548      	bpl.n	80022b4 <HAL_I2S_TxHalfCpltCallback+0x374>
		currentAmp = 0.0f;
 8002222:	4b19      	ldr	r3, [pc, #100]	@ (8002288 <HAL_I2S_TxHalfCpltCallback+0x348>)
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
		 for (int i = 0; i < BUF_SIZE/2; i = i + 2) {
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	e03d      	b.n	80022ac <HAL_I2S_TxHalfCpltCallback+0x36c>
 8002230:	00000000 	.word	0x00000000
 8002234:	40aa9000 	.word	0x40aa9000
 8002238:	200003ac 	.word	0x200003ac
 800223c:	200005b4 	.word	0x200005b4
 8002240:	461c4000 	.word	0x461c4000
 8002244:	20000040 	.word	0x20000040
 8002248:	3c23d70a 	.word	0x3c23d70a
 800224c:	3c23d70a 	.word	0x3c23d70a
 8002250:	38d1b717 	.word	0x38d1b717
 8002254:	38d1b717 	.word	0x38d1b717
 8002258:	20000364 	.word	0x20000364
 800225c:	200005b8 	.word	0x200005b8
 8002260:	43200000 	.word	0x43200000
 8002264:	2000000c 	.word	0x2000000c
 8002268:	20000575 	.word	0x20000575
 800226c:	20000578 	.word	0x20000578
 8002270:	457ff000 	.word	0x457ff000
 8002274:	42dc0000 	.word	0x42dc0000
 8002278:	20000014 	.word	0x20000014
 800227c:	20000000 	.word	0x20000000
 8002280:	3fe00000 	.word	0x3fe00000
 8002284:	20000576 	.word	0x20000576
 8002288:	20000004 	.word	0x20000004
 800228c:	200005b0 	.word	0x200005b0
			 i2sBuf[i] = 0;
 8002290:	4a92      	ldr	r2, [pc, #584]	@ (80024dc <HAL_I2S_TxHalfCpltCallback+0x59c>)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2100      	movs	r1, #0
 8002296:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			 i2sBuf[i+1] = 0;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	3301      	adds	r3, #1
 800229e:	4a8f      	ldr	r2, [pc, #572]	@ (80024dc <HAL_I2S_TxHalfCpltCallback+0x59c>)
 80022a0:	2100      	movs	r1, #0
 80022a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		 for (int i = 0; i < BUF_SIZE/2; i = i + 2) {
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	3302      	adds	r3, #2
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	2b19      	cmp	r3, #25
 80022b0:	ddee      	ble.n	8002290 <HAL_I2S_TxHalfCpltCallback+0x350>
	for(int i = 0; i < BUF_SIZE/2; i = i + 2){
		i2sBuf[i] = (int16_t)(i2sBuf[i] * MasterVol * currentAmp);
		i2sBuf[i+1] = i2sBuf[i] ;
	}
	}
}
 80022b2:	e2b3      	b.n	800281c <HAL_I2S_TxHalfCpltCallback+0x8dc>
    fillSawBlock(i2sBuf + 0, BUF_SIZE/2, currentFreq, OscillatorVol);
 80022b4:	4b8a      	ldr	r3, [pc, #552]	@ (80024e0 <HAL_I2S_TxHalfCpltCallback+0x5a0>)
 80022b6:	edd3 7a00 	vldr	s15, [r3]
 80022ba:	4b8a      	ldr	r3, [pc, #552]	@ (80024e4 <HAL_I2S_TxHalfCpltCallback+0x5a4>)
 80022bc:	ed93 7a00 	vldr	s14, [r3]
 80022c0:	eef0 0a47 	vmov.f32	s1, s14
 80022c4:	eeb0 0a67 	vmov.f32	s0, s15
 80022c8:	211a      	movs	r1, #26
 80022ca:	4884      	ldr	r0, [pc, #528]	@ (80024dc <HAL_I2S_TxHalfCpltCallback+0x59c>)
 80022cc:	f7ff fa60 	bl	8001790 <fillSawBlock>
    if(preFilSwMode != 0) IIR_LowPassFilter(i2sBuf + 0, BUF_SIZE/2, cutoffFreq);
 80022d0:	4b85      	ldr	r3, [pc, #532]	@ (80024e8 <HAL_I2S_TxHalfCpltCallback+0x5a8>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d008      	beq.n	80022ea <HAL_I2S_TxHalfCpltCallback+0x3aa>
 80022d8:	4b84      	ldr	r3, [pc, #528]	@ (80024ec <HAL_I2S_TxHalfCpltCallback+0x5ac>)
 80022da:	edd3 7a00 	vldr	s15, [r3]
 80022de:	eeb0 0a67 	vmov.f32	s0, s15
 80022e2:	211a      	movs	r1, #26
 80022e4:	487d      	ldr	r0, [pc, #500]	@ (80024dc <HAL_I2S_TxHalfCpltCallback+0x59c>)
 80022e6:	f7ff fb3b 	bl	8001960 <IIR_LowPassFilter>
    switch(EnbFMode){
 80022ea:	4b81      	ldr	r3, [pc, #516]	@ (80024f0 <HAL_I2S_TxHalfCpltCallback+0x5b0>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	f000 8110 	beq.w	8002514 <HAL_I2S_TxHalfCpltCallback+0x5d4>
 80022f4:	2b03      	cmp	r3, #3
 80022f6:	f300 8243 	bgt.w	8002780 <HAL_I2S_TxHalfCpltCallback+0x840>
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d002      	beq.n	8002304 <HAL_I2S_TxHalfCpltCallback+0x3c4>
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d076      	beq.n	80023f0 <HAL_I2S_TxHalfCpltCallback+0x4b0>
    	break;
 8002302:	e23d      	b.n	8002780 <HAL_I2S_TxHalfCpltCallback+0x840>
    	F1_par.vol = ((uint8_t)((F1VolADC / 4095.0f) * 100))/80.0f;
 8002304:	4b7b      	ldr	r3, [pc, #492]	@ (80024f4 <HAL_I2S_TxHalfCpltCallback+0x5b4>)
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	b29b      	uxth	r3, r3
 800230a:	ee07 3a90 	vmov	s15, r3
 800230e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002312:	eddf 6a79 	vldr	s13, [pc, #484]	@ 80024f8 <HAL_I2S_TxHalfCpltCallback+0x5b8>
 8002316:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800231a:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 80024fc <HAL_I2S_TxHalfCpltCallback+0x5bc>
 800231e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002326:	edc7 7a00 	vstr	s15, [r7]
 800232a:	783b      	ldrb	r3, [r7, #0]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	ee07 3a90 	vmov	s15, r3
 8002332:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002336:	eddf 6a72 	vldr	s13, [pc, #456]	@ 8002500 <HAL_I2S_TxHalfCpltCallback+0x5c0>
 800233a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800233e:	4b71      	ldr	r3, [pc, #452]	@ (8002504 <HAL_I2S_TxHalfCpltCallback+0x5c4>)
 8002340:	edc3 7a02 	vstr	s15, [r3, #8]
		F1_par.f_0 = F1_par.FreqRange * ((uint8_t)((F1FreqADC / 4095.0f) * 100))/100.0f;
 8002344:	4b6f      	ldr	r3, [pc, #444]	@ (8002504 <HAL_I2S_TxHalfCpltCallback+0x5c4>)
 8002346:	ed93 7a03 	vldr	s14, [r3, #12]
 800234a:	4b6a      	ldr	r3, [pc, #424]	@ (80024f4 <HAL_I2S_TxHalfCpltCallback+0x5b4>)
 800234c:	885b      	ldrh	r3, [r3, #2]
 800234e:	b29b      	uxth	r3, r3
 8002350:	ee07 3a90 	vmov	s15, r3
 8002354:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002358:	ed9f 6a67 	vldr	s12, [pc, #412]	@ 80024f8 <HAL_I2S_TxHalfCpltCallback+0x5b8>
 800235c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002360:	eddf 6a66 	vldr	s13, [pc, #408]	@ 80024fc <HAL_I2S_TxHalfCpltCallback+0x5bc>
 8002364:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002368:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800236c:	edc7 7a00 	vstr	s15, [r7]
 8002370:	783b      	ldrb	r3, [r7, #0]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	ee07 3a90 	vmov	s15, r3
 8002378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800237c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002380:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80024fc <HAL_I2S_TxHalfCpltCallback+0x5bc>
 8002384:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002388:	4b5e      	ldr	r3, [pc, #376]	@ (8002504 <HAL_I2S_TxHalfCpltCallback+0x5c4>)
 800238a:	edc3 7a00 	vstr	s15, [r3]
		F1_par.Q = 14.0f * ((uint8_t)((F1ResADC / 4095.0f) * 100))/100.0f + 1.0f;
 800238e:	4b59      	ldr	r3, [pc, #356]	@ (80024f4 <HAL_I2S_TxHalfCpltCallback+0x5b4>)
 8002390:	889b      	ldrh	r3, [r3, #4]
 8002392:	b29b      	uxth	r3, r3
 8002394:	ee07 3a90 	vmov	s15, r3
 8002398:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800239c:	eddf 6a56 	vldr	s13, [pc, #344]	@ 80024f8 <HAL_I2S_TxHalfCpltCallback+0x5b8>
 80023a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023a4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80024fc <HAL_I2S_TxHalfCpltCallback+0x5bc>
 80023a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023b0:	edc7 7a00 	vstr	s15, [r7]
 80023b4:	783b      	ldrb	r3, [r7, #0]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	ee07 3a90 	vmov	s15, r3
 80023bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023c0:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 80023c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023c8:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 80024fc <HAL_I2S_TxHalfCpltCallback+0x5bc>
 80023cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80023d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023d8:	4b4a      	ldr	r3, [pc, #296]	@ (8002504 <HAL_I2S_TxHalfCpltCallback+0x5c4>)
 80023da:	edc3 7a01 	vstr	s15, [r3, #4]
    	IIR_2ndOrderFilter(i2sBuf, i2sBuf, BUF_SIZE/2, &F1_par, &SttF1);
 80023de:	4b4a      	ldr	r3, [pc, #296]	@ (8002508 <HAL_I2S_TxHalfCpltCallback+0x5c8>)
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	4b48      	ldr	r3, [pc, #288]	@ (8002504 <HAL_I2S_TxHalfCpltCallback+0x5c4>)
 80023e4:	221a      	movs	r2, #26
 80023e6:	493d      	ldr	r1, [pc, #244]	@ (80024dc <HAL_I2S_TxHalfCpltCallback+0x59c>)
 80023e8:	483c      	ldr	r0, [pc, #240]	@ (80024dc <HAL_I2S_TxHalfCpltCallback+0x59c>)
 80023ea:	f7ff fb5d 	bl	8001aa8 <IIR_2ndOrderFilter>
    	break;
 80023ee:	e1c8      	b.n	8002782 <HAL_I2S_TxHalfCpltCallback+0x842>
    	F2_par.vol = ((uint8_t)((F2VolADC / 4095.0f) * 100))/80.0f;
 80023f0:	4b40      	ldr	r3, [pc, #256]	@ (80024f4 <HAL_I2S_TxHalfCpltCallback+0x5b4>)
 80023f2:	88db      	ldrh	r3, [r3, #6]
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	ee07 3a90 	vmov	s15, r3
 80023fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023fe:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 80024f8 <HAL_I2S_TxHalfCpltCallback+0x5b8>
 8002402:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002406:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 80024fc <HAL_I2S_TxHalfCpltCallback+0x5bc>
 800240a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800240e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002412:	edc7 7a00 	vstr	s15, [r7]
 8002416:	783b      	ldrb	r3, [r7, #0]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	ee07 3a90 	vmov	s15, r3
 800241e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002422:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8002500 <HAL_I2S_TxHalfCpltCallback+0x5c0>
 8002426:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800242a:	4b38      	ldr	r3, [pc, #224]	@ (800250c <HAL_I2S_TxHalfCpltCallback+0x5cc>)
 800242c:	edc3 7a02 	vstr	s15, [r3, #8]
		F2_par.f_0 = F2_par.FreqRange * ((uint8_t)((F2FreqADC / 4095.0f) * 100))/100.0f;
 8002430:	4b36      	ldr	r3, [pc, #216]	@ (800250c <HAL_I2S_TxHalfCpltCallback+0x5cc>)
 8002432:	ed93 7a03 	vldr	s14, [r3, #12]
 8002436:	4b2f      	ldr	r3, [pc, #188]	@ (80024f4 <HAL_I2S_TxHalfCpltCallback+0x5b4>)
 8002438:	891b      	ldrh	r3, [r3, #8]
 800243a:	b29b      	uxth	r3, r3
 800243c:	ee07 3a90 	vmov	s15, r3
 8002440:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002444:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 80024f8 <HAL_I2S_TxHalfCpltCallback+0x5b8>
 8002448:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800244c:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 80024fc <HAL_I2S_TxHalfCpltCallback+0x5bc>
 8002450:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002458:	edc7 7a00 	vstr	s15, [r7]
 800245c:	783b      	ldrb	r3, [r7, #0]
 800245e:	b2db      	uxtb	r3, r3
 8002460:	ee07 3a90 	vmov	s15, r3
 8002464:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002468:	ee27 7a27 	vmul.f32	s14, s14, s15
 800246c:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80024fc <HAL_I2S_TxHalfCpltCallback+0x5bc>
 8002470:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002474:	4b25      	ldr	r3, [pc, #148]	@ (800250c <HAL_I2S_TxHalfCpltCallback+0x5cc>)
 8002476:	edc3 7a00 	vstr	s15, [r3]
		F2_par.Q = 14.0f * ((uint8_t)((F2ResADC / 4095.0f) * 100))/100.0f + 1.0f;
 800247a:	4b1e      	ldr	r3, [pc, #120]	@ (80024f4 <HAL_I2S_TxHalfCpltCallback+0x5b4>)
 800247c:	895b      	ldrh	r3, [r3, #10]
 800247e:	b29b      	uxth	r3, r3
 8002480:	ee07 3a90 	vmov	s15, r3
 8002484:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002488:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 80024f8 <HAL_I2S_TxHalfCpltCallback+0x5b8>
 800248c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002490:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80024fc <HAL_I2S_TxHalfCpltCallback+0x5bc>
 8002494:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800249c:	edc7 7a00 	vstr	s15, [r7]
 80024a0:	783b      	ldrb	r3, [r7, #0]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	ee07 3a90 	vmov	s15, r3
 80024a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ac:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 80024b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024b4:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80024fc <HAL_I2S_TxHalfCpltCallback+0x5bc>
 80024b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80024c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024c4:	4b11      	ldr	r3, [pc, #68]	@ (800250c <HAL_I2S_TxHalfCpltCallback+0x5cc>)
 80024c6:	edc3 7a01 	vstr	s15, [r3, #4]
    	IIR_2ndOrderFilter(i2sBuf, i2sBuf, BUF_SIZE/2, &F2_par, &SttF2);
 80024ca:	4b11      	ldr	r3, [pc, #68]	@ (8002510 <HAL_I2S_TxHalfCpltCallback+0x5d0>)
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	4b0f      	ldr	r3, [pc, #60]	@ (800250c <HAL_I2S_TxHalfCpltCallback+0x5cc>)
 80024d0:	221a      	movs	r2, #26
 80024d2:	4902      	ldr	r1, [pc, #8]	@ (80024dc <HAL_I2S_TxHalfCpltCallback+0x59c>)
 80024d4:	4801      	ldr	r0, [pc, #4]	@ (80024dc <HAL_I2S_TxHalfCpltCallback+0x59c>)
 80024d6:	f7ff fae7 	bl	8001aa8 <IIR_2ndOrderFilter>
    	break;
 80024da:	e152      	b.n	8002782 <HAL_I2S_TxHalfCpltCallback+0x842>
 80024dc:	2000043c 	.word	0x2000043c
 80024e0:	20000000 	.word	0x20000000
 80024e4:	2000000c 	.word	0x2000000c
 80024e8:	20000574 	.word	0x20000574
 80024ec:	20000010 	.word	0x20000010
 80024f0:	20000577 	.word	0x20000577
 80024f4:	2000057c 	.word	0x2000057c
 80024f8:	457ff000 	.word	0x457ff000
 80024fc:	42c80000 	.word	0x42c80000
 8002500:	42a00000 	.word	0x42a00000
 8002504:	20000018 	.word	0x20000018
 8002508:	2000058c 	.word	0x2000058c
 800250c:	2000002c 	.word	0x2000002c
 8002510:	2000059c 	.word	0x2000059c
    	F1_par.vol = ((uint8_t)((F1VolADC / 4095.0f) * 100))/80.0f;
 8002514:	4bc4      	ldr	r3, [pc, #784]	@ (8002828 <HAL_I2S_TxHalfCpltCallback+0x8e8>)
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	b29b      	uxth	r3, r3
 800251a:	ee07 3a90 	vmov	s15, r3
 800251e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002522:	eddf 6ac2 	vldr	s13, [pc, #776]	@ 800282c <HAL_I2S_TxHalfCpltCallback+0x8ec>
 8002526:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800252a:	ed9f 7ac1 	vldr	s14, [pc, #772]	@ 8002830 <HAL_I2S_TxHalfCpltCallback+0x8f0>
 800252e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002536:	edc7 7a00 	vstr	s15, [r7]
 800253a:	783b      	ldrb	r3, [r7, #0]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	ee07 3a90 	vmov	s15, r3
 8002542:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002546:	eddf 6abb 	vldr	s13, [pc, #748]	@ 8002834 <HAL_I2S_TxHalfCpltCallback+0x8f4>
 800254a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800254e:	4bba      	ldr	r3, [pc, #744]	@ (8002838 <HAL_I2S_TxHalfCpltCallback+0x8f8>)
 8002550:	edc3 7a02 	vstr	s15, [r3, #8]
		F1_par.f_0 = F1_par.FreqRange * ((uint8_t)((F1FreqADC / 4095.0f) * 100))/100.0f;
 8002554:	4bb8      	ldr	r3, [pc, #736]	@ (8002838 <HAL_I2S_TxHalfCpltCallback+0x8f8>)
 8002556:	ed93 7a03 	vldr	s14, [r3, #12]
 800255a:	4bb3      	ldr	r3, [pc, #716]	@ (8002828 <HAL_I2S_TxHalfCpltCallback+0x8e8>)
 800255c:	885b      	ldrh	r3, [r3, #2]
 800255e:	b29b      	uxth	r3, r3
 8002560:	ee07 3a90 	vmov	s15, r3
 8002564:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002568:	ed9f 6ab0 	vldr	s12, [pc, #704]	@ 800282c <HAL_I2S_TxHalfCpltCallback+0x8ec>
 800256c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002570:	eddf 6aaf 	vldr	s13, [pc, #700]	@ 8002830 <HAL_I2S_TxHalfCpltCallback+0x8f0>
 8002574:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800257c:	edc7 7a00 	vstr	s15, [r7]
 8002580:	783b      	ldrb	r3, [r7, #0]
 8002582:	b2db      	uxtb	r3, r3
 8002584:	ee07 3a90 	vmov	s15, r3
 8002588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800258c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002590:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8002830 <HAL_I2S_TxHalfCpltCallback+0x8f0>
 8002594:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002598:	4ba7      	ldr	r3, [pc, #668]	@ (8002838 <HAL_I2S_TxHalfCpltCallback+0x8f8>)
 800259a:	edc3 7a00 	vstr	s15, [r3]
		F1_par.Q = 14.0f * ((uint8_t)((F1ResADC / 4095.0f) * 100))/100.0f + 1.0f;
 800259e:	4ba2      	ldr	r3, [pc, #648]	@ (8002828 <HAL_I2S_TxHalfCpltCallback+0x8e8>)
 80025a0:	889b      	ldrh	r3, [r3, #4]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	ee07 3a90 	vmov	s15, r3
 80025a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025ac:	eddf 6a9f 	vldr	s13, [pc, #636]	@ 800282c <HAL_I2S_TxHalfCpltCallback+0x8ec>
 80025b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025b4:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8002830 <HAL_I2S_TxHalfCpltCallback+0x8f0>
 80025b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025c0:	edc7 7a00 	vstr	s15, [r7]
 80025c4:	783b      	ldrb	r3, [r7, #0]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	ee07 3a90 	vmov	s15, r3
 80025cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025d0:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 80025d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025d8:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002830 <HAL_I2S_TxHalfCpltCallback+0x8f0>
 80025dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80025e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025e8:	4b93      	ldr	r3, [pc, #588]	@ (8002838 <HAL_I2S_TxHalfCpltCallback+0x8f8>)
 80025ea:	edc3 7a01 	vstr	s15, [r3, #4]
		F2_par.vol = ((uint8_t)((F2VolADC / 4095.0f) * 100))/80.0f;
 80025ee:	4b8e      	ldr	r3, [pc, #568]	@ (8002828 <HAL_I2S_TxHalfCpltCallback+0x8e8>)
 80025f0:	88db      	ldrh	r3, [r3, #6]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	ee07 3a90 	vmov	s15, r3
 80025f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025fc:	eddf 6a8b 	vldr	s13, [pc, #556]	@ 800282c <HAL_I2S_TxHalfCpltCallback+0x8ec>
 8002600:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002604:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8002830 <HAL_I2S_TxHalfCpltCallback+0x8f0>
 8002608:	ee67 7a87 	vmul.f32	s15, s15, s14
 800260c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002610:	edc7 7a00 	vstr	s15, [r7]
 8002614:	783b      	ldrb	r3, [r7, #0]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	ee07 3a90 	vmov	s15, r3
 800261c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002620:	eddf 6a84 	vldr	s13, [pc, #528]	@ 8002834 <HAL_I2S_TxHalfCpltCallback+0x8f4>
 8002624:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002628:	4b84      	ldr	r3, [pc, #528]	@ (800283c <HAL_I2S_TxHalfCpltCallback+0x8fc>)
 800262a:	edc3 7a02 	vstr	s15, [r3, #8]
		F2_par.f_0 = F2_par.FreqRange * ((uint8_t)((F2FreqADC / 4095.0f) * 100))/100.0f;
 800262e:	4b83      	ldr	r3, [pc, #524]	@ (800283c <HAL_I2S_TxHalfCpltCallback+0x8fc>)
 8002630:	ed93 7a03 	vldr	s14, [r3, #12]
 8002634:	4b7c      	ldr	r3, [pc, #496]	@ (8002828 <HAL_I2S_TxHalfCpltCallback+0x8e8>)
 8002636:	891b      	ldrh	r3, [r3, #8]
 8002638:	b29b      	uxth	r3, r3
 800263a:	ee07 3a90 	vmov	s15, r3
 800263e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002642:	ed9f 6a7a 	vldr	s12, [pc, #488]	@ 800282c <HAL_I2S_TxHalfCpltCallback+0x8ec>
 8002646:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800264a:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002830 <HAL_I2S_TxHalfCpltCallback+0x8f0>
 800264e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002656:	edc7 7a00 	vstr	s15, [r7]
 800265a:	783b      	ldrb	r3, [r7, #0]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	ee07 3a90 	vmov	s15, r3
 8002662:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002666:	ee27 7a27 	vmul.f32	s14, s14, s15
 800266a:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8002830 <HAL_I2S_TxHalfCpltCallback+0x8f0>
 800266e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002672:	4b72      	ldr	r3, [pc, #456]	@ (800283c <HAL_I2S_TxHalfCpltCallback+0x8fc>)
 8002674:	edc3 7a00 	vstr	s15, [r3]
		F2_par.Q = 14.0f * ((uint8_t)((F2ResADC / 4095.0f) * 100))/100.0f +1.0f;
 8002678:	4b6b      	ldr	r3, [pc, #428]	@ (8002828 <HAL_I2S_TxHalfCpltCallback+0x8e8>)
 800267a:	895b      	ldrh	r3, [r3, #10]
 800267c:	b29b      	uxth	r3, r3
 800267e:	ee07 3a90 	vmov	s15, r3
 8002682:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002686:	eddf 6a69 	vldr	s13, [pc, #420]	@ 800282c <HAL_I2S_TxHalfCpltCallback+0x8ec>
 800268a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800268e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8002830 <HAL_I2S_TxHalfCpltCallback+0x8f0>
 8002692:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800269a:	edc7 7a00 	vstr	s15, [r7]
 800269e:	783b      	ldrb	r3, [r7, #0]
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	ee07 3a90 	vmov	s15, r3
 80026a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026aa:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 80026ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026b2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002830 <HAL_I2S_TxHalfCpltCallback+0x8f0>
 80026b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80026be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026c2:	4b5e      	ldr	r3, [pc, #376]	@ (800283c <HAL_I2S_TxHalfCpltCallback+0x8fc>)
 80026c4:	edc3 7a01 	vstr	s15, [r3, #4]
    	IIR_2ndOrderFilter(i2sBuf, F1Buf, BUF_SIZE/2, &F1_par, &SttF1);
 80026c8:	4b5d      	ldr	r3, [pc, #372]	@ (8002840 <HAL_I2S_TxHalfCpltCallback+0x900>)
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	4b5a      	ldr	r3, [pc, #360]	@ (8002838 <HAL_I2S_TxHalfCpltCallback+0x8f8>)
 80026ce:	221a      	movs	r2, #26
 80026d0:	495c      	ldr	r1, [pc, #368]	@ (8002844 <HAL_I2S_TxHalfCpltCallback+0x904>)
 80026d2:	485d      	ldr	r0, [pc, #372]	@ (8002848 <HAL_I2S_TxHalfCpltCallback+0x908>)
 80026d4:	f7ff f9e8 	bl	8001aa8 <IIR_2ndOrderFilter>
    	IIR_2ndOrderFilter(i2sBuf, F2Buf, BUF_SIZE/2, &F2_par, &SttF2);
 80026d8:	4b5c      	ldr	r3, [pc, #368]	@ (800284c <HAL_I2S_TxHalfCpltCallback+0x90c>)
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	4b57      	ldr	r3, [pc, #348]	@ (800283c <HAL_I2S_TxHalfCpltCallback+0x8fc>)
 80026de:	221a      	movs	r2, #26
 80026e0:	495b      	ldr	r1, [pc, #364]	@ (8002850 <HAL_I2S_TxHalfCpltCallback+0x910>)
 80026e2:	4859      	ldr	r0, [pc, #356]	@ (8002848 <HAL_I2S_TxHalfCpltCallback+0x908>)
 80026e4:	f7ff f9e0 	bl	8001aa8 <IIR_2ndOrderFilter>
    	for(int i = 0; i < BUF_SIZE/2; i = i + 2){
 80026e8:	2300      	movs	r3, #0
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	e044      	b.n	8002778 <HAL_I2S_TxHalfCpltCallback+0x838>
    		float mixed = (float)F1Buf[i] + (float)F2Buf[i];
 80026ee:	4a55      	ldr	r2, [pc, #340]	@ (8002844 <HAL_I2S_TxHalfCpltCallback+0x904>)
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80026f6:	ee07 3a90 	vmov	s15, r3
 80026fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026fe:	4a54      	ldr	r2, [pc, #336]	@ (8002850 <HAL_I2S_TxHalfCpltCallback+0x910>)
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002706:	ee07 3a90 	vmov	s15, r3
 800270a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800270e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002712:	edc7 7a03 	vstr	s15, [r7, #12]
    		if (mixed > 32767.0f) mixed = 32767.0f;
 8002716:	edd7 7a03 	vldr	s15, [r7, #12]
 800271a:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8002854 <HAL_I2S_TxHalfCpltCallback+0x914>
 800271e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002726:	dd01      	ble.n	800272c <HAL_I2S_TxHalfCpltCallback+0x7ec>
 8002728:	4b4b      	ldr	r3, [pc, #300]	@ (8002858 <HAL_I2S_TxHalfCpltCallback+0x918>)
 800272a:	60fb      	str	r3, [r7, #12]
    		if (mixed < -32768.0f) mixed = -32768.0f;
 800272c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002730:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800285c <HAL_I2S_TxHalfCpltCallback+0x91c>
 8002734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273c:	d502      	bpl.n	8002744 <HAL_I2S_TxHalfCpltCallback+0x804>
 800273e:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 8002742:	60fb      	str	r3, [r7, #12]
    		i2sBuf[i] = (int16_t)mixed;
 8002744:	edd7 7a03 	vldr	s15, [r7, #12]
 8002748:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800274c:	ee17 3a90 	vmov	r3, s15
 8002750:	b219      	sxth	r1, r3
 8002752:	4a3d      	ldr	r2, [pc, #244]	@ (8002848 <HAL_I2S_TxHalfCpltCallback+0x908>)
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    		i2sBuf[i+1] = (int16_t)mixed;
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	3301      	adds	r3, #1
 800275e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002762:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002766:	ee17 2a90 	vmov	r2, s15
 800276a:	b211      	sxth	r1, r2
 800276c:	4a36      	ldr	r2, [pc, #216]	@ (8002848 <HAL_I2S_TxHalfCpltCallback+0x908>)
 800276e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    	for(int i = 0; i < BUF_SIZE/2; i = i + 2){
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	3302      	adds	r3, #2
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	2b19      	cmp	r3, #25
 800277c:	ddb7      	ble.n	80026ee <HAL_I2S_TxHalfCpltCallback+0x7ae>
    	break;
 800277e:	e000      	b.n	8002782 <HAL_I2S_TxHalfCpltCallback+0x842>
    	break;
 8002780:	bf00      	nop
    MasterVol = ((uint8_t)((MasterVolADC/4095.0f) * 100))/100.0f;
 8002782:	4b29      	ldr	r3, [pc, #164]	@ (8002828 <HAL_I2S_TxHalfCpltCallback+0x8e8>)
 8002784:	899b      	ldrh	r3, [r3, #12]
 8002786:	b29b      	uxth	r3, r3
 8002788:	ee07 3a90 	vmov	s15, r3
 800278c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002790:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800282c <HAL_I2S_TxHalfCpltCallback+0x8ec>
 8002794:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002798:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8002830 <HAL_I2S_TxHalfCpltCallback+0x8f0>
 800279c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027a4:	edc7 7a00 	vstr	s15, [r7]
 80027a8:	783b      	ldrb	r3, [r7, #0]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	ee07 3a90 	vmov	s15, r3
 80027b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027b4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8002830 <HAL_I2S_TxHalfCpltCallback+0x8f0>
 80027b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027bc:	4b28      	ldr	r3, [pc, #160]	@ (8002860 <HAL_I2S_TxHalfCpltCallback+0x920>)
 80027be:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < BUF_SIZE/2; i = i + 2){
 80027c2:	2300      	movs	r3, #0
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	e026      	b.n	8002816 <HAL_I2S_TxHalfCpltCallback+0x8d6>
		i2sBuf[i] = (int16_t)(i2sBuf[i] * MasterVol * currentAmp);
 80027c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002848 <HAL_I2S_TxHalfCpltCallback+0x908>)
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80027d0:	ee07 3a90 	vmov	s15, r3
 80027d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027d8:	4b21      	ldr	r3, [pc, #132]	@ (8002860 <HAL_I2S_TxHalfCpltCallback+0x920>)
 80027da:	edd3 7a00 	vldr	s15, [r3]
 80027de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027e2:	4b20      	ldr	r3, [pc, #128]	@ (8002864 <HAL_I2S_TxHalfCpltCallback+0x924>)
 80027e4:	edd3 7a00 	vldr	s15, [r3]
 80027e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027f0:	ee17 3a90 	vmov	r3, s15
 80027f4:	b219      	sxth	r1, r3
 80027f6:	4a14      	ldr	r2, [pc, #80]	@ (8002848 <HAL_I2S_TxHalfCpltCallback+0x908>)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		i2sBuf[i+1] = i2sBuf[i] ;
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	3301      	adds	r3, #1
 8002802:	4911      	ldr	r1, [pc, #68]	@ (8002848 <HAL_I2S_TxHalfCpltCallback+0x908>)
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800280a:	4a0f      	ldr	r2, [pc, #60]	@ (8002848 <HAL_I2S_TxHalfCpltCallback+0x908>)
 800280c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < BUF_SIZE/2; i = i + 2){
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	3302      	adds	r3, #2
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2b19      	cmp	r3, #25
 800281a:	ddd5      	ble.n	80027c8 <HAL_I2S_TxHalfCpltCallback+0x888>
}
 800281c:	bf00      	nop
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	ecbd 8b02 	vpop	{d8}
 8002826:	bd80      	pop	{r7, pc}
 8002828:	2000057c 	.word	0x2000057c
 800282c:	457ff000 	.word	0x457ff000
 8002830:	42c80000 	.word	0x42c80000
 8002834:	42a00000 	.word	0x42a00000
 8002838:	20000018 	.word	0x20000018
 800283c:	2000002c 	.word	0x2000002c
 8002840:	2000058c 	.word	0x2000058c
 8002844:	200004a4 	.word	0x200004a4
 8002848:	2000043c 	.word	0x2000043c
 800284c:	2000059c 	.word	0x2000059c
 8002850:	2000050c 	.word	0x2000050c
 8002854:	46fffe00 	.word	0x46fffe00
 8002858:	46fffe00 	.word	0x46fffe00
 800285c:	c7000000 	.word	0xc7000000
 8002860:	20000008 	.word	0x20000008
 8002864:	20000004 	.word	0x20000004

08002868 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8002868:	b580      	push	{r7, lr}
 800286a:	ed2d 8b02 	vpush	{d8}
 800286e:	b088      	sub	sp, #32
 8002870:	af02      	add	r7, sp, #8
 8002872:	6078      	str	r0, [r7, #4]
	Enc1_counter = __HAL_TIM_GET_COUNTER(&htim3);
 8002874:	4bba      	ldr	r3, [pc, #744]	@ (8002b60 <HAL_I2S_TxCpltCallback+0x2f8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287a:	4aba      	ldr	r2, [pc, #744]	@ (8002b64 <HAL_I2S_TxCpltCallback+0x2fc>)
 800287c:	6013      	str	r3, [r2, #0]
	if (Enc1_counter > 60000)
 800287e:	4bb9      	ldr	r3, [pc, #740]	@ (8002b64 <HAL_I2S_TxCpltCallback+0x2fc>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8002886:	4293      	cmp	r3, r2
 8002888:	d906      	bls.n	8002898 <HAL_I2S_TxCpltCallback+0x30>
	{
	  __HAL_TIM_SET_COUNTER(&htim3,0);
 800288a:	4bb5      	ldr	r3, [pc, #724]	@ (8002b60 <HAL_I2S_TxCpltCallback+0x2f8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2200      	movs	r2, #0
 8002890:	625a      	str	r2, [r3, #36]	@ 0x24
	  Enc1_counter=0;
 8002892:	4bb4      	ldr	r3, [pc, #720]	@ (8002b64 <HAL_I2S_TxCpltCallback+0x2fc>)
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
	}
	if (Enc1_counter > 100)
 8002898:	4bb2      	ldr	r3, [pc, #712]	@ (8002b64 <HAL_I2S_TxCpltCallback+0x2fc>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b64      	cmp	r3, #100	@ 0x64
 800289e:	d906      	bls.n	80028ae <HAL_I2S_TxCpltCallback+0x46>
	{
	  __HAL_TIM_SET_COUNTER(&htim3,100);
 80028a0:	4baf      	ldr	r3, [pc, #700]	@ (8002b60 <HAL_I2S_TxCpltCallback+0x2f8>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2264      	movs	r2, #100	@ 0x64
 80028a6:	625a      	str	r2, [r3, #36]	@ 0x24
	  Enc1_counter=100;
 80028a8:	4bae      	ldr	r3, [pc, #696]	@ (8002b64 <HAL_I2S_TxCpltCallback+0x2fc>)
 80028aa:	2264      	movs	r2, #100	@ 0x64
 80028ac:	601a      	str	r2, [r3, #0]
	}
	portamentoSpeed = (100 - Enc1_counter)/10000.0f;
 80028ae:	4bad      	ldr	r3, [pc, #692]	@ (8002b64 <HAL_I2S_TxCpltCallback+0x2fc>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80028b6:	ee07 3a90 	vmov	s15, r3
 80028ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028be:	eddf 6aaa 	vldr	s13, [pc, #680]	@ 8002b68 <HAL_I2S_TxCpltCallback+0x300>
 80028c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028c6:	4ba9      	ldr	r3, [pc, #676]	@ (8002b6c <HAL_I2S_TxCpltCallback+0x304>)
 80028c8:	edc3 7a00 	vstr	s15, [r3]
	if(portamentoSpeed > 0.01f){
 80028cc:	4ba7      	ldr	r3, [pc, #668]	@ (8002b6c <HAL_I2S_TxCpltCallback+0x304>)
 80028ce:	edd3 7a00 	vldr	s15, [r3]
 80028d2:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 8002b70 <HAL_I2S_TxCpltCallback+0x308>
 80028d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028de:	dd03      	ble.n	80028e8 <HAL_I2S_TxCpltCallback+0x80>
		portamentoSpeed = 0.01f;
 80028e0:	4ba2      	ldr	r3, [pc, #648]	@ (8002b6c <HAL_I2S_TxCpltCallback+0x304>)
 80028e2:	4aa4      	ldr	r2, [pc, #656]	@ (8002b74 <HAL_I2S_TxCpltCallback+0x30c>)
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	e00c      	b.n	8002902 <HAL_I2S_TxCpltCallback+0x9a>
	}
	else if(portamentoSpeed < 0.0001f){
 80028e8:	4ba0      	ldr	r3, [pc, #640]	@ (8002b6c <HAL_I2S_TxCpltCallback+0x304>)
 80028ea:	edd3 7a00 	vldr	s15, [r3]
 80028ee:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8002b78 <HAL_I2S_TxCpltCallback+0x310>
 80028f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028fa:	d502      	bpl.n	8002902 <HAL_I2S_TxCpltCallback+0x9a>
		portamentoSpeed = 0.0001f;
 80028fc:	4b9b      	ldr	r3, [pc, #620]	@ (8002b6c <HAL_I2S_TxCpltCallback+0x304>)
 80028fe:	4a9f      	ldr	r2, [pc, #636]	@ (8002b7c <HAL_I2S_TxCpltCallback+0x314>)
 8002900:	601a      	str	r2, [r3, #0]
	}

	Enc2_counter = __HAL_TIM_GET_COUNTER(&htim2);
 8002902:	4b9f      	ldr	r3, [pc, #636]	@ (8002b80 <HAL_I2S_TxCpltCallback+0x318>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002908:	4a9e      	ldr	r2, [pc, #632]	@ (8002b84 <HAL_I2S_TxCpltCallback+0x31c>)
 800290a:	6013      	str	r3, [r2, #0]
	if (Enc2_counter > 60000)
 800290c:	4b9d      	ldr	r3, [pc, #628]	@ (8002b84 <HAL_I2S_TxCpltCallback+0x31c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8002914:	4293      	cmp	r3, r2
 8002916:	d906      	bls.n	8002926 <HAL_I2S_TxCpltCallback+0xbe>
	{
	  __HAL_TIM_SET_COUNTER(&htim2,0);
 8002918:	4b99      	ldr	r3, [pc, #612]	@ (8002b80 <HAL_I2S_TxCpltCallback+0x318>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2200      	movs	r2, #0
 800291e:	625a      	str	r2, [r3, #36]	@ 0x24
	  Enc2_counter=0;
 8002920:	4b98      	ldr	r3, [pc, #608]	@ (8002b84 <HAL_I2S_TxCpltCallback+0x31c>)
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
	}
	if (Enc2_counter > 200)
 8002926:	4b97      	ldr	r3, [pc, #604]	@ (8002b84 <HAL_I2S_TxCpltCallback+0x31c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2bc8      	cmp	r3, #200	@ 0xc8
 800292c:	d906      	bls.n	800293c <HAL_I2S_TxCpltCallback+0xd4>
	{
	  __HAL_TIM_SET_COUNTER(&htim2,200);
 800292e:	4b94      	ldr	r3, [pc, #592]	@ (8002b80 <HAL_I2S_TxCpltCallback+0x318>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	22c8      	movs	r2, #200	@ 0xc8
 8002934:	625a      	str	r2, [r3, #36]	@ 0x24
	  Enc2_counter=200;
 8002936:	4b93      	ldr	r3, [pc, #588]	@ (8002b84 <HAL_I2S_TxCpltCallback+0x31c>)
 8002938:	22c8      	movs	r2, #200	@ 0xc8
 800293a:	601a      	str	r2, [r3, #0]
	}
	OscillatorVol = Enc2_counter / 160.0f;
 800293c:	4b91      	ldr	r3, [pc, #580]	@ (8002b84 <HAL_I2S_TxCpltCallback+0x31c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	ee07 3a90 	vmov	s15, r3
 8002944:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002948:	eddf 6a8f 	vldr	s13, [pc, #572]	@ 8002b88 <HAL_I2S_TxCpltCallback+0x320>
 800294c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002950:	4b8e      	ldr	r3, [pc, #568]	@ (8002b8c <HAL_I2S_TxCpltCallback+0x324>)
 8002952:	edc3 7a00 	vstr	s15, [r3]
	// Refill second half [BUF_SIZE/2 .. BUF_SIZE)
	if(!fixedScaleMode){
 8002956:	4b8e      	ldr	r3, [pc, #568]	@ (8002b90 <HAL_I2S_TxCpltCallback+0x328>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d12e      	bne.n	80029bc <HAL_I2S_TxCpltCallback+0x154>
		currentFreq = 110 * powf(4.0, (4095 - CurrFreqADC)/4095.0f) * powf(2, currentOct - 1);
 800295e:	4b8d      	ldr	r3, [pc, #564]	@ (8002b94 <HAL_I2S_TxCpltCallback+0x32c>)
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	b29b      	uxth	r3, r3
 8002964:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8002968:	330f      	adds	r3, #15
 800296a:	ee07 3a90 	vmov	s15, r3
 800296e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002972:	eddf 6a89 	vldr	s13, [pc, #548]	@ 8002b98 <HAL_I2S_TxCpltCallback+0x330>
 8002976:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800297a:	eef0 0a47 	vmov.f32	s1, s14
 800297e:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8002982:	f006 f96f 	bl	8008c64 <powf>
 8002986:	eef0 7a40 	vmov.f32	s15, s0
 800298a:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8002b9c <HAL_I2S_TxCpltCallback+0x334>
 800298e:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002992:	4b83      	ldr	r3, [pc, #524]	@ (8002ba0 <HAL_I2S_TxCpltCallback+0x338>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	3b01      	subs	r3, #1
 8002998:	ee07 3a90 	vmov	s15, r3
 800299c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029a0:	eef0 0a67 	vmov.f32	s1, s15
 80029a4:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80029a8:	f006 f95c 	bl	8008c64 <powf>
 80029ac:	eef0 7a40 	vmov.f32	s15, s0
 80029b0:	ee68 7a27 	vmul.f32	s15, s16, s15
 80029b4:	4b7b      	ldr	r3, [pc, #492]	@ (8002ba4 <HAL_I2S_TxCpltCallback+0x33c>)
 80029b6:	edc3 7a00 	vstr	s15, [r3]
 80029ba:	e098      	b.n	8002aee <HAL_I2S_TxCpltCallback+0x286>
	}
	else{
		fixedScale = (uint8_t)((4095 - CurrFreqADC)*24/4095.0f + 0.5);
 80029bc:	4b75      	ldr	r3, [pc, #468]	@ (8002b94 <HAL_I2S_TxCpltCallback+0x32c>)
 80029be:	881b      	ldrh	r3, [r3, #0]
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	f5c3 627f 	rsb	r2, r3, #4080	@ 0xff0
 80029c6:	320f      	adds	r2, #15
 80029c8:	4613      	mov	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	4413      	add	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	ee07 3a90 	vmov	s15, r3
 80029d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029d8:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8002b98 <HAL_I2S_TxCpltCallback+0x330>
 80029dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80029e0:	ee16 0a90 	vmov	r0, s13
 80029e4:	f7fd fd54 	bl	8000490 <__aeabi_f2d>
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	4b6e      	ldr	r3, [pc, #440]	@ (8002ba8 <HAL_I2S_TxCpltCallback+0x340>)
 80029ee:	f7fd fbf1 	bl	80001d4 <__adddf3>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4610      	mov	r0, r2
 80029f8:	4619      	mov	r1, r3
 80029fa:	f7fd ffb3 	bl	8000964 <__aeabi_d2uiz>
 80029fe:	4603      	mov	r3, r0
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	4b6a      	ldr	r3, [pc, #424]	@ (8002bac <HAL_I2S_TxCpltCallback+0x344>)
 8002a04:	701a      	strb	r2, [r3, #0]
		if(currentAmp < 0.01f){
 8002a06:	4b6a      	ldr	r3, [pc, #424]	@ (8002bb0 <HAL_I2S_TxCpltCallback+0x348>)
 8002a08:	edd3 7a00 	vldr	s15, [r3]
 8002a0c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002b70 <HAL_I2S_TxCpltCallback+0x308>
 8002a10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a18:	d52a      	bpl.n	8002a70 <HAL_I2S_TxCpltCallback+0x208>
			currentFreq = 110 * powf(4.0, fixedScale/24.0f) * powf(2, currentOct - 1);
 8002a1a:	4b64      	ldr	r3, [pc, #400]	@ (8002bac <HAL_I2S_TxCpltCallback+0x344>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	ee07 3a90 	vmov	s15, r3
 8002a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a26:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8002a2a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a2e:	eef0 0a47 	vmov.f32	s1, s14
 8002a32:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8002a36:	f006 f915 	bl	8008c64 <powf>
 8002a3a:	eef0 7a40 	vmov.f32	s15, s0
 8002a3e:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8002b9c <HAL_I2S_TxCpltCallback+0x334>
 8002a42:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002a46:	4b56      	ldr	r3, [pc, #344]	@ (8002ba0 <HAL_I2S_TxCpltCallback+0x338>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	ee07 3a90 	vmov	s15, r3
 8002a50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a54:	eef0 0a67 	vmov.f32	s1, s15
 8002a58:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8002a5c:	f006 f902 	bl	8008c64 <powf>
 8002a60:	eef0 7a40 	vmov.f32	s15, s0
 8002a64:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002a68:	4b4e      	ldr	r3, [pc, #312]	@ (8002ba4 <HAL_I2S_TxCpltCallback+0x33c>)
 8002a6a:	edc3 7a00 	vstr	s15, [r3]
 8002a6e:	e03e      	b.n	8002aee <HAL_I2S_TxCpltCallback+0x286>
		}
		else{
			targetFreq = 110 * powf(4.0, fixedScale/24.0f) * powf(2, currentOct - 1);
 8002a70:	4b4e      	ldr	r3, [pc, #312]	@ (8002bac <HAL_I2S_TxCpltCallback+0x344>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	ee07 3a90 	vmov	s15, r3
 8002a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a7c:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8002a80:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a84:	eef0 0a47 	vmov.f32	s1, s14
 8002a88:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8002a8c:	f006 f8ea 	bl	8008c64 <powf>
 8002a90:	eef0 7a40 	vmov.f32	s15, s0
 8002a94:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8002b9c <HAL_I2S_TxCpltCallback+0x334>
 8002a98:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002a9c:	4b40      	ldr	r3, [pc, #256]	@ (8002ba0 <HAL_I2S_TxCpltCallback+0x338>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	ee07 3a90 	vmov	s15, r3
 8002aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aaa:	eef0 0a67 	vmov.f32	s1, s15
 8002aae:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8002ab2:	f006 f8d7 	bl	8008c64 <powf>
 8002ab6:	eef0 7a40 	vmov.f32	s15, s0
 8002aba:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002abe:	4b3d      	ldr	r3, [pc, #244]	@ (8002bb4 <HAL_I2S_TxCpltCallback+0x34c>)
 8002ac0:	edc3 7a00 	vstr	s15, [r3]
			currentFreq += (targetFreq - currentFreq) * portamentoSpeed;
 8002ac4:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb4 <HAL_I2S_TxCpltCallback+0x34c>)
 8002ac6:	ed93 7a00 	vldr	s14, [r3]
 8002aca:	4b36      	ldr	r3, [pc, #216]	@ (8002ba4 <HAL_I2S_TxCpltCallback+0x33c>)
 8002acc:	edd3 7a00 	vldr	s15, [r3]
 8002ad0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ad4:	4b25      	ldr	r3, [pc, #148]	@ (8002b6c <HAL_I2S_TxCpltCallback+0x304>)
 8002ad6:	edd3 7a00 	vldr	s15, [r3]
 8002ada:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ade:	4b31      	ldr	r3, [pc, #196]	@ (8002ba4 <HAL_I2S_TxCpltCallback+0x33c>)
 8002ae0:	edd3 7a00 	vldr	s15, [r3]
 8002ae4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ae8:	4b2e      	ldr	r3, [pc, #184]	@ (8002ba4 <HAL_I2S_TxCpltCallback+0x33c>)
 8002aea:	edc3 7a00 	vstr	s15, [r3]
		}
	}

	currentAmp = ((CurrAmpADC - 300)*1.0)/3400;
 8002aee:	4b29      	ldr	r3, [pc, #164]	@ (8002b94 <HAL_I2S_TxCpltCallback+0x32c>)
 8002af0:	885b      	ldrh	r3, [r3, #2]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fd fcb7 	bl	800046c <__aeabi_i2d>
 8002afe:	a316      	add	r3, pc, #88	@ (adr r3, 8002b58 <HAL_I2S_TxCpltCallback+0x2f0>)
 8002b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b04:	f7fd fe46 	bl	8000794 <__aeabi_ddiv>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	f7fd ff48 	bl	80009a4 <__aeabi_d2f>
 8002b14:	4603      	mov	r3, r0
 8002b16:	4a26      	ldr	r2, [pc, #152]	@ (8002bb0 <HAL_I2S_TxCpltCallback+0x348>)
 8002b18:	6013      	str	r3, [r2, #0]
	if(currentAmp > 1.0f){
 8002b1a:	4b25      	ldr	r3, [pc, #148]	@ (8002bb0 <HAL_I2S_TxCpltCallback+0x348>)
 8002b1c:	edd3 7a00 	vldr	s15, [r3]
 8002b20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b2c:	dd03      	ble.n	8002b36 <HAL_I2S_TxCpltCallback+0x2ce>
		currentAmp = 1.0f;
 8002b2e:	4b20      	ldr	r3, [pc, #128]	@ (8002bb0 <HAL_I2S_TxCpltCallback+0x348>)
 8002b30:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002b34:	601a      	str	r2, [r3, #0]
	}
	if(currentAmp < 0.01f){
 8002b36:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb0 <HAL_I2S_TxCpltCallback+0x348>)
 8002b38:	edd3 7a00 	vldr	s15, [r3]
 8002b3c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8002b70 <HAL_I2S_TxCpltCallback+0x308>
 8002b40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b48:	d548      	bpl.n	8002bdc <HAL_I2S_TxCpltCallback+0x374>
		currentAmp = 0.0f;
 8002b4a:	4b19      	ldr	r3, [pc, #100]	@ (8002bb0 <HAL_I2S_TxCpltCallback+0x348>)
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
		for (int i = BUF_SIZE/2; i < BUF_SIZE; i = i + 2) {
 8002b52:	231a      	movs	r3, #26
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	e03d      	b.n	8002bd4 <HAL_I2S_TxCpltCallback+0x36c>
 8002b58:	00000000 	.word	0x00000000
 8002b5c:	40aa9000 	.word	0x40aa9000
 8002b60:	200003ac 	.word	0x200003ac
 8002b64:	200005b4 	.word	0x200005b4
 8002b68:	461c4000 	.word	0x461c4000
 8002b6c:	20000040 	.word	0x20000040
 8002b70:	3c23d70a 	.word	0x3c23d70a
 8002b74:	3c23d70a 	.word	0x3c23d70a
 8002b78:	38d1b717 	.word	0x38d1b717
 8002b7c:	38d1b717 	.word	0x38d1b717
 8002b80:	20000364 	.word	0x20000364
 8002b84:	200005b8 	.word	0x200005b8
 8002b88:	43200000 	.word	0x43200000
 8002b8c:	2000000c 	.word	0x2000000c
 8002b90:	20000575 	.word	0x20000575
 8002b94:	20000578 	.word	0x20000578
 8002b98:	457ff000 	.word	0x457ff000
 8002b9c:	42dc0000 	.word	0x42dc0000
 8002ba0:	20000014 	.word	0x20000014
 8002ba4:	20000000 	.word	0x20000000
 8002ba8:	3fe00000 	.word	0x3fe00000
 8002bac:	20000576 	.word	0x20000576
 8002bb0:	20000004 	.word	0x20000004
 8002bb4:	200005b0 	.word	0x200005b0
			 i2sBuf[i] = 0;
 8002bb8:	4a93      	ldr	r2, [pc, #588]	@ (8002e08 <HAL_I2S_TxCpltCallback+0x5a0>)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			 i2sBuf[i+1] = 0;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	4a90      	ldr	r2, [pc, #576]	@ (8002e08 <HAL_I2S_TxCpltCallback+0x5a0>)
 8002bc8:	2100      	movs	r1, #0
 8002bca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = BUF_SIZE/2; i < BUF_SIZE; i = i + 2) {
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	3302      	adds	r3, #2
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2b33      	cmp	r3, #51	@ 0x33
 8002bd8:	ddee      	ble.n	8002bb8 <HAL_I2S_TxCpltCallback+0x350>
		i2sBuf[i] = (int16_t)(i2sBuf[i] * MasterVol * currentAmp);
		i2sBuf[i+1] = i2sBuf[i] ;
	}
	}

}
 8002bda:	e2b7      	b.n	800314c <HAL_I2S_TxCpltCallback+0x8e4>
    fillSawBlock(i2sBuf + BUF_SIZE/2, BUF_SIZE/2, currentFreq, OscillatorVol);
 8002bdc:	4a8b      	ldr	r2, [pc, #556]	@ (8002e0c <HAL_I2S_TxCpltCallback+0x5a4>)
 8002bde:	4b8c      	ldr	r3, [pc, #560]	@ (8002e10 <HAL_I2S_TxCpltCallback+0x5a8>)
 8002be0:	edd3 7a00 	vldr	s15, [r3]
 8002be4:	4b8b      	ldr	r3, [pc, #556]	@ (8002e14 <HAL_I2S_TxCpltCallback+0x5ac>)
 8002be6:	ed93 7a00 	vldr	s14, [r3]
 8002bea:	eef0 0a47 	vmov.f32	s1, s14
 8002bee:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf2:	211a      	movs	r1, #26
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	f7fe fdcb 	bl	8001790 <fillSawBlock>
    if(preFilSwMode != 0) IIR_LowPassFilter(i2sBuf + BUF_SIZE/2, BUF_SIZE/2, cutoffFreq);
 8002bfa:	4b87      	ldr	r3, [pc, #540]	@ (8002e18 <HAL_I2S_TxCpltCallback+0x5b0>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d009      	beq.n	8002c16 <HAL_I2S_TxCpltCallback+0x3ae>
 8002c02:	4a82      	ldr	r2, [pc, #520]	@ (8002e0c <HAL_I2S_TxCpltCallback+0x5a4>)
 8002c04:	4b85      	ldr	r3, [pc, #532]	@ (8002e1c <HAL_I2S_TxCpltCallback+0x5b4>)
 8002c06:	edd3 7a00 	vldr	s15, [r3]
 8002c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c0e:	211a      	movs	r1, #26
 8002c10:	4610      	mov	r0, r2
 8002c12:	f7fe fea5 	bl	8001960 <IIR_LowPassFilter>
    switch(EnbFMode){
 8002c16:	4b82      	ldr	r3, [pc, #520]	@ (8002e20 <HAL_I2S_TxCpltCallback+0x5b8>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	f000 8112 	beq.w	8002e44 <HAL_I2S_TxCpltCallback+0x5dc>
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	f300 8245 	bgt.w	80030b0 <HAL_I2S_TxCpltCallback+0x848>
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d002      	beq.n	8002c30 <HAL_I2S_TxCpltCallback+0x3c8>
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d076      	beq.n	8002d1c <HAL_I2S_TxCpltCallback+0x4b4>
        	break;
 8002c2e:	e23f      	b.n	80030b0 <HAL_I2S_TxCpltCallback+0x848>
        	F1_par.vol = ((uint8_t)((F1VolADC / 4095.0f) * 100))/80.0f;
 8002c30:	4b7c      	ldr	r3, [pc, #496]	@ (8002e24 <HAL_I2S_TxCpltCallback+0x5bc>)
 8002c32:	881b      	ldrh	r3, [r3, #0]
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	ee07 3a90 	vmov	s15, r3
 8002c3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c3e:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8002e28 <HAL_I2S_TxCpltCallback+0x5c0>
 8002c42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c46:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8002e2c <HAL_I2S_TxCpltCallback+0x5c4>
 8002c4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c52:	edc7 7a00 	vstr	s15, [r7]
 8002c56:	783b      	ldrb	r3, [r7, #0]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	ee07 3a90 	vmov	s15, r3
 8002c5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c62:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8002e30 <HAL_I2S_TxCpltCallback+0x5c8>
 8002c66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c6a:	4b72      	ldr	r3, [pc, #456]	@ (8002e34 <HAL_I2S_TxCpltCallback+0x5cc>)
 8002c6c:	edc3 7a02 	vstr	s15, [r3, #8]
			F1_par.f_0 = F1_par.FreqRange * ((uint8_t)((F1FreqADC / 4095.0f) * 100))/100.0f;
 8002c70:	4b70      	ldr	r3, [pc, #448]	@ (8002e34 <HAL_I2S_TxCpltCallback+0x5cc>)
 8002c72:	ed93 7a03 	vldr	s14, [r3, #12]
 8002c76:	4b6b      	ldr	r3, [pc, #428]	@ (8002e24 <HAL_I2S_TxCpltCallback+0x5bc>)
 8002c78:	885b      	ldrh	r3, [r3, #2]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	ee07 3a90 	vmov	s15, r3
 8002c80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c84:	ed9f 6a68 	vldr	s12, [pc, #416]	@ 8002e28 <HAL_I2S_TxCpltCallback+0x5c0>
 8002c88:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c8c:	eddf 6a67 	vldr	s13, [pc, #412]	@ 8002e2c <HAL_I2S_TxCpltCallback+0x5c4>
 8002c90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c98:	edc7 7a00 	vstr	s15, [r7]
 8002c9c:	783b      	ldrb	r3, [r7, #0]
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	ee07 3a90 	vmov	s15, r3
 8002ca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ca8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cac:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002e2c <HAL_I2S_TxCpltCallback+0x5c4>
 8002cb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cb4:	4b5f      	ldr	r3, [pc, #380]	@ (8002e34 <HAL_I2S_TxCpltCallback+0x5cc>)
 8002cb6:	edc3 7a00 	vstr	s15, [r3]
			F1_par.Q = 14.0f * ((uint8_t)((F1ResADC / 4095.0f) * 100))/100.0f + 1.0f;;
 8002cba:	4b5a      	ldr	r3, [pc, #360]	@ (8002e24 <HAL_I2S_TxCpltCallback+0x5bc>)
 8002cbc:	889b      	ldrh	r3, [r3, #4]
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	ee07 3a90 	vmov	s15, r3
 8002cc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cc8:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8002e28 <HAL_I2S_TxCpltCallback+0x5c0>
 8002ccc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cd0:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8002e2c <HAL_I2S_TxCpltCallback+0x5c4>
 8002cd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cdc:	edc7 7a00 	vstr	s15, [r7]
 8002ce0:	783b      	ldrb	r3, [r7, #0]
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	ee07 3a90 	vmov	s15, r3
 8002ce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cec:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 8002cf0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cf4:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8002e2c <HAL_I2S_TxCpltCallback+0x5c4>
 8002cf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cfc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002d00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d04:	4b4b      	ldr	r3, [pc, #300]	@ (8002e34 <HAL_I2S_TxCpltCallback+0x5cc>)
 8002d06:	edc3 7a01 	vstr	s15, [r3, #4]
        	IIR_2ndOrderFilter(i2sBuf + BUF_SIZE/2, i2sBuf + BUF_SIZE/2, BUF_SIZE/2, &F1_par, &SttF1);
 8002d0a:	4840      	ldr	r0, [pc, #256]	@ (8002e0c <HAL_I2S_TxCpltCallback+0x5a4>)
 8002d0c:	493f      	ldr	r1, [pc, #252]	@ (8002e0c <HAL_I2S_TxCpltCallback+0x5a4>)
 8002d0e:	4b4a      	ldr	r3, [pc, #296]	@ (8002e38 <HAL_I2S_TxCpltCallback+0x5d0>)
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	4b48      	ldr	r3, [pc, #288]	@ (8002e34 <HAL_I2S_TxCpltCallback+0x5cc>)
 8002d14:	221a      	movs	r2, #26
 8002d16:	f7fe fec7 	bl	8001aa8 <IIR_2ndOrderFilter>
        	break;
 8002d1a:	e1ca      	b.n	80030b2 <HAL_I2S_TxCpltCallback+0x84a>
        	F2_par.vol = ((uint8_t)((F2VolADC / 4095.0f) * 100))/80.0f;
 8002d1c:	4b41      	ldr	r3, [pc, #260]	@ (8002e24 <HAL_I2S_TxCpltCallback+0x5bc>)
 8002d1e:	88db      	ldrh	r3, [r3, #6]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	ee07 3a90 	vmov	s15, r3
 8002d26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d2a:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8002e28 <HAL_I2S_TxCpltCallback+0x5c0>
 8002d2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d32:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8002e2c <HAL_I2S_TxCpltCallback+0x5c4>
 8002d36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d3e:	edc7 7a00 	vstr	s15, [r7]
 8002d42:	783b      	ldrb	r3, [r7, #0]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	ee07 3a90 	vmov	s15, r3
 8002d4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d4e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002e30 <HAL_I2S_TxCpltCallback+0x5c8>
 8002d52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d56:	4b39      	ldr	r3, [pc, #228]	@ (8002e3c <HAL_I2S_TxCpltCallback+0x5d4>)
 8002d58:	edc3 7a02 	vstr	s15, [r3, #8]
			F2_par.f_0 = F2_par.FreqRange * ((uint8_t)((F2FreqADC / 4095.0f) * 100))/100.0f;
 8002d5c:	4b37      	ldr	r3, [pc, #220]	@ (8002e3c <HAL_I2S_TxCpltCallback+0x5d4>)
 8002d5e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002d62:	4b30      	ldr	r3, [pc, #192]	@ (8002e24 <HAL_I2S_TxCpltCallback+0x5bc>)
 8002d64:	891b      	ldrh	r3, [r3, #8]
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	ee07 3a90 	vmov	s15, r3
 8002d6c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d70:	ed9f 6a2d 	vldr	s12, [pc, #180]	@ 8002e28 <HAL_I2S_TxCpltCallback+0x5c0>
 8002d74:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d78:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8002e2c <HAL_I2S_TxCpltCallback+0x5c4>
 8002d7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d84:	edc7 7a00 	vstr	s15, [r7]
 8002d88:	783b      	ldrb	r3, [r7, #0]
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	ee07 3a90 	vmov	s15, r3
 8002d90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d98:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8002e2c <HAL_I2S_TxCpltCallback+0x5c4>
 8002d9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002da0:	4b26      	ldr	r3, [pc, #152]	@ (8002e3c <HAL_I2S_TxCpltCallback+0x5d4>)
 8002da2:	edc3 7a00 	vstr	s15, [r3]
			F2_par.Q = 14.0f * ((uint8_t)((F2ResADC / 4095.0f) * 100))/100.0f + 1.0f;
 8002da6:	4b1f      	ldr	r3, [pc, #124]	@ (8002e24 <HAL_I2S_TxCpltCallback+0x5bc>)
 8002da8:	895b      	ldrh	r3, [r3, #10]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	ee07 3a90 	vmov	s15, r3
 8002db0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002db4:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8002e28 <HAL_I2S_TxCpltCallback+0x5c0>
 8002db8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dbc:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002e2c <HAL_I2S_TxCpltCallback+0x5c4>
 8002dc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dc8:	edc7 7a00 	vstr	s15, [r7]
 8002dcc:	783b      	ldrb	r3, [r7, #0]
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	ee07 3a90 	vmov	s15, r3
 8002dd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dd8:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 8002ddc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002de0:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002e2c <HAL_I2S_TxCpltCallback+0x5c4>
 8002de4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002de8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002dec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002df0:	4b12      	ldr	r3, [pc, #72]	@ (8002e3c <HAL_I2S_TxCpltCallback+0x5d4>)
 8002df2:	edc3 7a01 	vstr	s15, [r3, #4]
        	IIR_2ndOrderFilter(i2sBuf + BUF_SIZE/2, i2sBuf + BUF_SIZE/2, BUF_SIZE/2, &F2_par, &SttF2);
 8002df6:	4805      	ldr	r0, [pc, #20]	@ (8002e0c <HAL_I2S_TxCpltCallback+0x5a4>)
 8002df8:	4904      	ldr	r1, [pc, #16]	@ (8002e0c <HAL_I2S_TxCpltCallback+0x5a4>)
 8002dfa:	4b11      	ldr	r3, [pc, #68]	@ (8002e40 <HAL_I2S_TxCpltCallback+0x5d8>)
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8002e3c <HAL_I2S_TxCpltCallback+0x5d4>)
 8002e00:	221a      	movs	r2, #26
 8002e02:	f7fe fe51 	bl	8001aa8 <IIR_2ndOrderFilter>
        	break;
 8002e06:	e154      	b.n	80030b2 <HAL_I2S_TxCpltCallback+0x84a>
 8002e08:	2000043c 	.word	0x2000043c
 8002e0c:	20000470 	.word	0x20000470
 8002e10:	20000000 	.word	0x20000000
 8002e14:	2000000c 	.word	0x2000000c
 8002e18:	20000574 	.word	0x20000574
 8002e1c:	20000010 	.word	0x20000010
 8002e20:	20000577 	.word	0x20000577
 8002e24:	2000057c 	.word	0x2000057c
 8002e28:	457ff000 	.word	0x457ff000
 8002e2c:	42c80000 	.word	0x42c80000
 8002e30:	42a00000 	.word	0x42a00000
 8002e34:	20000018 	.word	0x20000018
 8002e38:	2000058c 	.word	0x2000058c
 8002e3c:	2000002c 	.word	0x2000002c
 8002e40:	2000059c 	.word	0x2000059c
        	F1_par.vol = ((uint8_t)((F1VolADC / 4095.0f) * 100))/80.0f;
 8002e44:	4bc4      	ldr	r3, [pc, #784]	@ (8003158 <HAL_I2S_TxCpltCallback+0x8f0>)
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	ee07 3a90 	vmov	s15, r3
 8002e4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e52:	eddf 6ac2 	vldr	s13, [pc, #776]	@ 800315c <HAL_I2S_TxCpltCallback+0x8f4>
 8002e56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e5a:	ed9f 7ac1 	vldr	s14, [pc, #772]	@ 8003160 <HAL_I2S_TxCpltCallback+0x8f8>
 8002e5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e66:	edc7 7a00 	vstr	s15, [r7]
 8002e6a:	783b      	ldrb	r3, [r7, #0]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	ee07 3a90 	vmov	s15, r3
 8002e72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e76:	eddf 6abb 	vldr	s13, [pc, #748]	@ 8003164 <HAL_I2S_TxCpltCallback+0x8fc>
 8002e7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e7e:	4bba      	ldr	r3, [pc, #744]	@ (8003168 <HAL_I2S_TxCpltCallback+0x900>)
 8002e80:	edc3 7a02 	vstr	s15, [r3, #8]
			F1_par.f_0 = F1_par.FreqRange * ((uint8_t)((F1FreqADC / 4095.0f) * 100))/100.0f;
 8002e84:	4bb8      	ldr	r3, [pc, #736]	@ (8003168 <HAL_I2S_TxCpltCallback+0x900>)
 8002e86:	ed93 7a03 	vldr	s14, [r3, #12]
 8002e8a:	4bb3      	ldr	r3, [pc, #716]	@ (8003158 <HAL_I2S_TxCpltCallback+0x8f0>)
 8002e8c:	885b      	ldrh	r3, [r3, #2]
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	ee07 3a90 	vmov	s15, r3
 8002e94:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e98:	ed9f 6ab0 	vldr	s12, [pc, #704]	@ 800315c <HAL_I2S_TxCpltCallback+0x8f4>
 8002e9c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ea0:	eddf 6aaf 	vldr	s13, [pc, #700]	@ 8003160 <HAL_I2S_TxCpltCallback+0x8f8>
 8002ea4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ea8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eac:	edc7 7a00 	vstr	s15, [r7]
 8002eb0:	783b      	ldrb	r3, [r7, #0]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	ee07 3a90 	vmov	s15, r3
 8002eb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ebc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ec0:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8003160 <HAL_I2S_TxCpltCallback+0x8f8>
 8002ec4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ec8:	4ba7      	ldr	r3, [pc, #668]	@ (8003168 <HAL_I2S_TxCpltCallback+0x900>)
 8002eca:	edc3 7a00 	vstr	s15, [r3]
			F1_par.Q = 14.0f * ((uint8_t)((F1ResADC / 4095.0f) * 100))/100.0f + 1.0f;
 8002ece:	4ba2      	ldr	r3, [pc, #648]	@ (8003158 <HAL_I2S_TxCpltCallback+0x8f0>)
 8002ed0:	889b      	ldrh	r3, [r3, #4]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	ee07 3a90 	vmov	s15, r3
 8002ed8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002edc:	eddf 6a9f 	vldr	s13, [pc, #636]	@ 800315c <HAL_I2S_TxCpltCallback+0x8f4>
 8002ee0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ee4:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8003160 <HAL_I2S_TxCpltCallback+0x8f8>
 8002ee8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ef0:	edc7 7a00 	vstr	s15, [r7]
 8002ef4:	783b      	ldrb	r3, [r7, #0]
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	ee07 3a90 	vmov	s15, r3
 8002efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f00:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 8002f04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f08:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8003160 <HAL_I2S_TxCpltCallback+0x8f8>
 8002f0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002f14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f18:	4b93      	ldr	r3, [pc, #588]	@ (8003168 <HAL_I2S_TxCpltCallback+0x900>)
 8002f1a:	edc3 7a01 	vstr	s15, [r3, #4]
			F2_par.vol = ((uint8_t)((F2VolADC / 4095.0f) * 100))/80.0f;
 8002f1e:	4b8e      	ldr	r3, [pc, #568]	@ (8003158 <HAL_I2S_TxCpltCallback+0x8f0>)
 8002f20:	88db      	ldrh	r3, [r3, #6]
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	ee07 3a90 	vmov	s15, r3
 8002f28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f2c:	eddf 6a8b 	vldr	s13, [pc, #556]	@ 800315c <HAL_I2S_TxCpltCallback+0x8f4>
 8002f30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f34:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8003160 <HAL_I2S_TxCpltCallback+0x8f8>
 8002f38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f40:	edc7 7a00 	vstr	s15, [r7]
 8002f44:	783b      	ldrb	r3, [r7, #0]
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	ee07 3a90 	vmov	s15, r3
 8002f4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f50:	eddf 6a84 	vldr	s13, [pc, #528]	@ 8003164 <HAL_I2S_TxCpltCallback+0x8fc>
 8002f54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f58:	4b84      	ldr	r3, [pc, #528]	@ (800316c <HAL_I2S_TxCpltCallback+0x904>)
 8002f5a:	edc3 7a02 	vstr	s15, [r3, #8]
			F2_par.f_0 = F2_par.FreqRange * ((uint8_t)((F2FreqADC / 4095.0f) * 100))/100.0f;
 8002f5e:	4b83      	ldr	r3, [pc, #524]	@ (800316c <HAL_I2S_TxCpltCallback+0x904>)
 8002f60:	ed93 7a03 	vldr	s14, [r3, #12]
 8002f64:	4b7c      	ldr	r3, [pc, #496]	@ (8003158 <HAL_I2S_TxCpltCallback+0x8f0>)
 8002f66:	891b      	ldrh	r3, [r3, #8]
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	ee07 3a90 	vmov	s15, r3
 8002f6e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f72:	ed9f 6a7a 	vldr	s12, [pc, #488]	@ 800315c <HAL_I2S_TxCpltCallback+0x8f4>
 8002f76:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f7a:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8003160 <HAL_I2S_TxCpltCallback+0x8f8>
 8002f7e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f86:	edc7 7a00 	vstr	s15, [r7]
 8002f8a:	783b      	ldrb	r3, [r7, #0]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	ee07 3a90 	vmov	s15, r3
 8002f92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f9a:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8003160 <HAL_I2S_TxCpltCallback+0x8f8>
 8002f9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fa2:	4b72      	ldr	r3, [pc, #456]	@ (800316c <HAL_I2S_TxCpltCallback+0x904>)
 8002fa4:	edc3 7a00 	vstr	s15, [r3]
			F2_par.Q = 14.0f * ((uint8_t)((F2ResADC / 4095.0f) * 100))/100.0f + 1.0f;
 8002fa8:	4b6b      	ldr	r3, [pc, #428]	@ (8003158 <HAL_I2S_TxCpltCallback+0x8f0>)
 8002faa:	895b      	ldrh	r3, [r3, #10]
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	ee07 3a90 	vmov	s15, r3
 8002fb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fb6:	eddf 6a69 	vldr	s13, [pc, #420]	@ 800315c <HAL_I2S_TxCpltCallback+0x8f4>
 8002fba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fbe:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8003160 <HAL_I2S_TxCpltCallback+0x8f8>
 8002fc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fca:	edc7 7a00 	vstr	s15, [r7]
 8002fce:	783b      	ldrb	r3, [r7, #0]
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	ee07 3a90 	vmov	s15, r3
 8002fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fda:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 8002fde:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002fe2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003160 <HAL_I2S_TxCpltCallback+0x8f8>
 8002fe6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002fee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ff2:	4b5e      	ldr	r3, [pc, #376]	@ (800316c <HAL_I2S_TxCpltCallback+0x904>)
 8002ff4:	edc3 7a01 	vstr	s15, [r3, #4]
        	IIR_2ndOrderFilter(i2sBuf + BUF_SIZE/2, F1Buf + BUF_SIZE/2, BUF_SIZE/2, &F1_par, &SttF1);
 8002ff8:	485d      	ldr	r0, [pc, #372]	@ (8003170 <HAL_I2S_TxCpltCallback+0x908>)
 8002ffa:	495e      	ldr	r1, [pc, #376]	@ (8003174 <HAL_I2S_TxCpltCallback+0x90c>)
 8002ffc:	4b5e      	ldr	r3, [pc, #376]	@ (8003178 <HAL_I2S_TxCpltCallback+0x910>)
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	4b59      	ldr	r3, [pc, #356]	@ (8003168 <HAL_I2S_TxCpltCallback+0x900>)
 8003002:	221a      	movs	r2, #26
 8003004:	f7fe fd50 	bl	8001aa8 <IIR_2ndOrderFilter>
        	IIR_2ndOrderFilter(i2sBuf + BUF_SIZE/2, F2Buf + BUF_SIZE/2, BUF_SIZE/2, &F2_par, &SttF2);
 8003008:	4859      	ldr	r0, [pc, #356]	@ (8003170 <HAL_I2S_TxCpltCallback+0x908>)
 800300a:	495c      	ldr	r1, [pc, #368]	@ (800317c <HAL_I2S_TxCpltCallback+0x914>)
 800300c:	4b5c      	ldr	r3, [pc, #368]	@ (8003180 <HAL_I2S_TxCpltCallback+0x918>)
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	4b56      	ldr	r3, [pc, #344]	@ (800316c <HAL_I2S_TxCpltCallback+0x904>)
 8003012:	221a      	movs	r2, #26
 8003014:	f7fe fd48 	bl	8001aa8 <IIR_2ndOrderFilter>
        	for(int i = BUF_SIZE/2; i < BUF_SIZE; i = i + 2){
 8003018:	231a      	movs	r3, #26
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	e044      	b.n	80030a8 <HAL_I2S_TxCpltCallback+0x840>
        		float mixed = (float)F1Buf[i] + (float)F2Buf[i];
 800301e:	4a59      	ldr	r2, [pc, #356]	@ (8003184 <HAL_I2S_TxCpltCallback+0x91c>)
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003026:	ee07 3a90 	vmov	s15, r3
 800302a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800302e:	4a56      	ldr	r2, [pc, #344]	@ (8003188 <HAL_I2S_TxCpltCallback+0x920>)
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003036:	ee07 3a90 	vmov	s15, r3
 800303a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800303e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003042:	edc7 7a03 	vstr	s15, [r7, #12]
        		if (mixed > 32767.0f) mixed = 32767.0f;
 8003046:	edd7 7a03 	vldr	s15, [r7, #12]
 800304a:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 800318c <HAL_I2S_TxCpltCallback+0x924>
 800304e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003056:	dd01      	ble.n	800305c <HAL_I2S_TxCpltCallback+0x7f4>
 8003058:	4b4d      	ldr	r3, [pc, #308]	@ (8003190 <HAL_I2S_TxCpltCallback+0x928>)
 800305a:	60fb      	str	r3, [r7, #12]
        		if (mixed < -32768.0f) mixed = -32768.0f;
 800305c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003060:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8003194 <HAL_I2S_TxCpltCallback+0x92c>
 8003064:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800306c:	d502      	bpl.n	8003074 <HAL_I2S_TxCpltCallback+0x80c>
 800306e:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 8003072:	60fb      	str	r3, [r7, #12]
        		i2sBuf[i] = (int16_t)mixed;
 8003074:	edd7 7a03 	vldr	s15, [r7, #12]
 8003078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800307c:	ee17 3a90 	vmov	r3, s15
 8003080:	b219      	sxth	r1, r3
 8003082:	4a45      	ldr	r2, [pc, #276]	@ (8003198 <HAL_I2S_TxCpltCallback+0x930>)
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        		i2sBuf[i+1] = (int16_t)mixed;
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	3301      	adds	r3, #1
 800308e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003092:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003096:	ee17 2a90 	vmov	r2, s15
 800309a:	b211      	sxth	r1, r2
 800309c:	4a3e      	ldr	r2, [pc, #248]	@ (8003198 <HAL_I2S_TxCpltCallback+0x930>)
 800309e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        	for(int i = BUF_SIZE/2; i < BUF_SIZE; i = i + 2){
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	3302      	adds	r3, #2
 80030a6:	613b      	str	r3, [r7, #16]
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	2b33      	cmp	r3, #51	@ 0x33
 80030ac:	ddb7      	ble.n	800301e <HAL_I2S_TxCpltCallback+0x7b6>
        	break;
 80030ae:	e000      	b.n	80030b2 <HAL_I2S_TxCpltCallback+0x84a>
        	break;
 80030b0:	bf00      	nop
    MasterVol = ((uint8_t)((MasterVolADC/4095.0f) * 100))/100.0f;
 80030b2:	4b29      	ldr	r3, [pc, #164]	@ (8003158 <HAL_I2S_TxCpltCallback+0x8f0>)
 80030b4:	899b      	ldrh	r3, [r3, #12]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	ee07 3a90 	vmov	s15, r3
 80030bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030c0:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800315c <HAL_I2S_TxCpltCallback+0x8f4>
 80030c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030c8:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8003160 <HAL_I2S_TxCpltCallback+0x8f8>
 80030cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030d4:	edc7 7a00 	vstr	s15, [r7]
 80030d8:	783b      	ldrb	r3, [r7, #0]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	ee07 3a90 	vmov	s15, r3
 80030e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030e4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8003160 <HAL_I2S_TxCpltCallback+0x8f8>
 80030e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030ec:	4b2b      	ldr	r3, [pc, #172]	@ (800319c <HAL_I2S_TxCpltCallback+0x934>)
 80030ee:	edc3 7a00 	vstr	s15, [r3]
	for(int i = BUF_SIZE/2; i < BUF_SIZE; i = i + 2){
 80030f2:	231a      	movs	r3, #26
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	e026      	b.n	8003146 <HAL_I2S_TxCpltCallback+0x8de>
		i2sBuf[i] = (int16_t)(i2sBuf[i] * MasterVol * currentAmp);
 80030f8:	4a27      	ldr	r2, [pc, #156]	@ (8003198 <HAL_I2S_TxCpltCallback+0x930>)
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003100:	ee07 3a90 	vmov	s15, r3
 8003104:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003108:	4b24      	ldr	r3, [pc, #144]	@ (800319c <HAL_I2S_TxCpltCallback+0x934>)
 800310a:	edd3 7a00 	vldr	s15, [r3]
 800310e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003112:	4b23      	ldr	r3, [pc, #140]	@ (80031a0 <HAL_I2S_TxCpltCallback+0x938>)
 8003114:	edd3 7a00 	vldr	s15, [r3]
 8003118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800311c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003120:	ee17 3a90 	vmov	r3, s15
 8003124:	b219      	sxth	r1, r3
 8003126:	4a1c      	ldr	r2, [pc, #112]	@ (8003198 <HAL_I2S_TxCpltCallback+0x930>)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		i2sBuf[i+1] = i2sBuf[i] ;
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	3301      	adds	r3, #1
 8003132:	4919      	ldr	r1, [pc, #100]	@ (8003198 <HAL_I2S_TxCpltCallback+0x930>)
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800313a:	4a17      	ldr	r2, [pc, #92]	@ (8003198 <HAL_I2S_TxCpltCallback+0x930>)
 800313c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = BUF_SIZE/2; i < BUF_SIZE; i = i + 2){
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	3302      	adds	r3, #2
 8003144:	60bb      	str	r3, [r7, #8]
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b33      	cmp	r3, #51	@ 0x33
 800314a:	ddd5      	ble.n	80030f8 <HAL_I2S_TxCpltCallback+0x890>
}
 800314c:	bf00      	nop
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	ecbd 8b02 	vpop	{d8}
 8003156:	bd80      	pop	{r7, pc}
 8003158:	2000057c 	.word	0x2000057c
 800315c:	457ff000 	.word	0x457ff000
 8003160:	42c80000 	.word	0x42c80000
 8003164:	42a00000 	.word	0x42a00000
 8003168:	20000018 	.word	0x20000018
 800316c:	2000002c 	.word	0x2000002c
 8003170:	20000470 	.word	0x20000470
 8003174:	200004d8 	.word	0x200004d8
 8003178:	2000058c 	.word	0x2000058c
 800317c:	20000540 	.word	0x20000540
 8003180:	2000059c 	.word	0x2000059c
 8003184:	200004a4 	.word	0x200004a4
 8003188:	2000050c 	.word	0x2000050c
 800318c:	46fffe00 	.word	0x46fffe00
 8003190:	46fffe00 	.word	0x46fffe00
 8003194:	c7000000 	.word	0xc7000000
 8003198:	2000043c 	.word	0x2000043c
 800319c:	20000008 	.word	0x20000008
 80031a0:	20000004 	.word	0x20000004

080031a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031a4:	b590      	push	{r4, r7, lr}
 80031a6:	b093      	sub	sp, #76	@ 0x4c
 80031a8:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031aa:	f001 f8e3 	bl	8004374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031ae:	f000 f93f 	bl	8003430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031b2:	f000 fc3f 	bl	8003a34 <MX_GPIO_Init>
  MX_DMA_Init();
 80031b6:	f000 fbff 	bl	80039b8 <MX_DMA_Init>
  MX_I2C1_Init();
 80031ba:	f000 faab 	bl	8003714 <MX_I2C1_Init>
  MX_I2S3_Init();
 80031be:	f000 fad7 	bl	8003770 <MX_I2S3_Init>
  MX_TIM2_Init();
 80031c2:	f000 fb03 	bl	80037cc <MX_TIM2_Init>
  MX_ADC1_Init();
 80031c6:	f000 f99d 	bl	8003504 <MX_ADC1_Init>
  MX_ADC2_Init();
 80031ca:	f000 f9fd 	bl	80035c8 <MX_ADC2_Init>
  MX_TIM3_Init();
 80031ce:	f000 fb51 	bl	8003874 <MX_TIM3_Init>
  MX_TIM4_Init();
 80031d2:	f000 fba3 	bl	800391c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  CS43_Init(hi2c1, MODE_I2S);
 80031d6:	4c82      	ldr	r4, [pc, #520]	@ (80033e0 <main+0x23c>)
 80031d8:	2300      	movs	r3, #0
 80031da:	9311      	str	r3, [sp, #68]	@ 0x44
 80031dc:	4668      	mov	r0, sp
 80031de:	f104 0310 	add.w	r3, r4, #16
 80031e2:	2244      	movs	r2, #68	@ 0x44
 80031e4:	4619      	mov	r1, r3
 80031e6:	f005 fd2f 	bl	8008c48 <memcpy>
 80031ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80031ee:	f7fd ffc1 	bl	8001174 <CS43_Init>
  CS43_SetVolume(50);
 80031f2:	2032      	movs	r0, #50	@ 0x32
 80031f4:	f7fe f92e 	bl	8001454 <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 80031f8:	2003      	movs	r0, #3
 80031fa:	f7fe f8cf 	bl	800139c <CS43_Enable_RightLeft>
  fillSawBlock(i2sBuf, BUF_SIZE, currentFreq, currentAmp);
 80031fe:	4b79      	ldr	r3, [pc, #484]	@ (80033e4 <main+0x240>)
 8003200:	edd3 7a00 	vldr	s15, [r3]
 8003204:	4b78      	ldr	r3, [pc, #480]	@ (80033e8 <main+0x244>)
 8003206:	ed93 7a00 	vldr	s14, [r3]
 800320a:	eef0 0a47 	vmov.f32	s1, s14
 800320e:	eeb0 0a67 	vmov.f32	s0, s15
 8003212:	2134      	movs	r1, #52	@ 0x34
 8003214:	4875      	ldr	r0, [pc, #468]	@ (80033ec <main+0x248>)
 8003216:	f7fe fabb 	bl	8001790 <fillSawBlock>
  HAL_I2S_Transmit_DMA(&hi2s3, i2sBuf, BUF_SIZE);
 800321a:	2234      	movs	r2, #52	@ 0x34
 800321c:	4973      	ldr	r1, [pc, #460]	@ (80033ec <main+0x248>)
 800321e:	4874      	ldr	r0, [pc, #464]	@ (80033f0 <main+0x24c>)
 8003220:	f003 fcce 	bl	8006bc0 <HAL_I2S_Transmit_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC1val, 2);
 8003224:	2202      	movs	r2, #2
 8003226:	4973      	ldr	r1, [pc, #460]	@ (80033f4 <main+0x250>)
 8003228:	4873      	ldr	r0, [pc, #460]	@ (80033f8 <main+0x254>)
 800322a:	f001 f959 	bl	80044e0 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)&ADC2val, 7);
 800322e:	2207      	movs	r2, #7
 8003230:	4972      	ldr	r1, [pc, #456]	@ (80033fc <main+0x258>)
 8003232:	4873      	ldr	r0, [pc, #460]	@ (8003400 <main+0x25c>)
 8003234:	f001 f954 	bl	80044e0 <HAL_ADC_Start_DMA>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8003238:	213c      	movs	r1, #60	@ 0x3c
 800323a:	4872      	ldr	r0, [pc, #456]	@ (8003404 <main+0x260>)
 800323c:	f005 f869 	bl	8008312 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8003240:	213c      	movs	r1, #60	@ 0x3c
 8003242:	4871      	ldr	r0, [pc, #452]	@ (8003408 <main+0x264>)
 8003244:	f005 f865 	bl	8008312 <HAL_TIM_Encoder_Start>
  __HAL_TIM_SET_COUNTER(&htim2,160);
 8003248:	4b6f      	ldr	r3, [pc, #444]	@ (8003408 <main+0x264>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	22a0      	movs	r2, #160	@ 0xa0
 800324e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  key = Get_Key();
 8003250:	f7fd fd8e 	bl	8000d70 <Get_Key>
 8003254:	4603      	mov	r3, r0
 8003256:	461a      	mov	r2, r3
 8003258:	4b6c      	ldr	r3, [pc, #432]	@ (800340c <main+0x268>)
 800325a:	701a      	strb	r2, [r3, #0]
	  if(key != old_key){
 800325c:	4b6b      	ldr	r3, [pc, #428]	@ (800340c <main+0x268>)
 800325e:	781a      	ldrb	r2, [r3, #0]
 8003260:	4b6b      	ldr	r3, [pc, #428]	@ (8003410 <main+0x26c>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d0f3      	beq.n	8003250 <main+0xac>
	  		switch(key){
 8003268:	4b68      	ldr	r3, [pc, #416]	@ (800340c <main+0x268>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	3b23      	subs	r3, #35	@ 0x23
 800326e:	2b21      	cmp	r3, #33	@ 0x21
 8003270:	f200 80b0 	bhi.w	80033d4 <main+0x230>
 8003274:	a201      	add	r2, pc, #4	@ (adr r2, 800327c <main+0xd8>)
 8003276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327a:	bf00      	nop
 800327c:	080033d5 	.word	0x080033d5
 8003280:	080033d5 	.word	0x080033d5
 8003284:	080033d5 	.word	0x080033d5
 8003288:	080033d5 	.word	0x080033d5
 800328c:	080033d5 	.word	0x080033d5
 8003290:	080033d5 	.word	0x080033d5
 8003294:	080033d5 	.word	0x080033d5
 8003298:	080033c5 	.word	0x080033c5
 800329c:	080033d5 	.word	0x080033d5
 80032a0:	080033d5 	.word	0x080033d5
 80032a4:	080033d5 	.word	0x080033d5
 80032a8:	080033d5 	.word	0x080033d5
 80032ac:	080033d5 	.word	0x080033d5
 80032b0:	080033cd 	.word	0x080033cd
 80032b4:	08003305 	.word	0x08003305
 80032b8:	08003325 	.word	0x08003325
 80032bc:	08003345 	.word	0x08003345
 80032c0:	08003385 	.word	0x08003385
 80032c4:	0800338d 	.word	0x0800338d
 80032c8:	08003395 	.word	0x08003395
 80032cc:	080033a5 	.word	0x080033a5
 80032d0:	080033ad 	.word	0x080033ad
 80032d4:	080033b5 	.word	0x080033b5
 80032d8:	080033d5 	.word	0x080033d5
 80032dc:	080033d5 	.word	0x080033d5
 80032e0:	080033d5 	.word	0x080033d5
 80032e4:	080033d5 	.word	0x080033d5
 80032e8:	080033d5 	.word	0x080033d5
 80032ec:	080033d5 	.word	0x080033d5
 80032f0:	080033d5 	.word	0x080033d5
 80032f4:	08003365 	.word	0x08003365
 80032f8:	0800339d 	.word	0x0800339d
 80032fc:	080033bd 	.word	0x080033bd
 8003300:	080033d5 	.word	0x080033d5
	  		case '1':
	  			EnbFMode = 0;
 8003304:	4b43      	ldr	r3, [pc, #268]	@ (8003414 <main+0x270>)
 8003306:	2200      	movs	r2, #0
 8003308:	701a      	strb	r2, [r3, #0]
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 800330a:	2200      	movs	r2, #0
 800330c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003310:	4841      	ldr	r0, [pc, #260]	@ (8003418 <main+0x274>)
 8003312:	f002 fae9 	bl	80058e8 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET);
 8003316:	2200      	movs	r2, #0
 8003318:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800331c:	483e      	ldr	r0, [pc, #248]	@ (8003418 <main+0x274>)
 800331e:	f002 fae3 	bl	80058e8 <HAL_GPIO_WritePin>
	  			break;
 8003322:	e058      	b.n	80033d6 <main+0x232>
	  		case '2':
	  			EnbFMode = 1;
 8003324:	4b3b      	ldr	r3, [pc, #236]	@ (8003414 <main+0x270>)
 8003326:	2201      	movs	r2, #1
 8003328:	701a      	strb	r2, [r3, #0]
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 800332a:	2201      	movs	r2, #1
 800332c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003330:	4839      	ldr	r0, [pc, #228]	@ (8003418 <main+0x274>)
 8003332:	f002 fad9 	bl	80058e8 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET);
 8003336:	2200      	movs	r2, #0
 8003338:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800333c:	4836      	ldr	r0, [pc, #216]	@ (8003418 <main+0x274>)
 800333e:	f002 fad3 	bl	80058e8 <HAL_GPIO_WritePin>
	  				break;
 8003342:	e048      	b.n	80033d6 <main+0x232>
	  		case '3':
	  			EnbFMode = 2;
 8003344:	4b33      	ldr	r3, [pc, #204]	@ (8003414 <main+0x270>)
 8003346:	2202      	movs	r2, #2
 8003348:	701a      	strb	r2, [r3, #0]
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 800334a:	2200      	movs	r2, #0
 800334c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003350:	4831      	ldr	r0, [pc, #196]	@ (8003418 <main+0x274>)
 8003352:	f002 fac9 	bl	80058e8 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 8003356:	2201      	movs	r2, #1
 8003358:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800335c:	482e      	ldr	r0, [pc, #184]	@ (8003418 <main+0x274>)
 800335e:	f002 fac3 	bl	80058e8 <HAL_GPIO_WritePin>
	  				break;
 8003362:	e038      	b.n	80033d6 <main+0x232>
	  		case 'A':
	  			EnbFMode = 3;
 8003364:	4b2b      	ldr	r3, [pc, #172]	@ (8003414 <main+0x270>)
 8003366:	2203      	movs	r2, #3
 8003368:	701a      	strb	r2, [r3, #0]
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 800336a:	2201      	movs	r2, #1
 800336c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003370:	4829      	ldr	r0, [pc, #164]	@ (8003418 <main+0x274>)
 8003372:	f002 fab9 	bl	80058e8 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 8003376:	2201      	movs	r2, #1
 8003378:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800337c:	4826      	ldr	r0, [pc, #152]	@ (8003418 <main+0x274>)
 800337e:	f002 fab3 	bl	80058e8 <HAL_GPIO_WritePin>
	  				break;
 8003382:	e028      	b.n	80033d6 <main+0x232>
	  		case '4':
	  			F1_par.mode = 0;
 8003384:	4b25      	ldr	r3, [pc, #148]	@ (800341c <main+0x278>)
 8003386:	2200      	movs	r2, #0
 8003388:	741a      	strb	r2, [r3, #16]
	  				break;
 800338a:	e024      	b.n	80033d6 <main+0x232>
	  		case '5':
	  			F1_par.mode = 1;
 800338c:	4b23      	ldr	r3, [pc, #140]	@ (800341c <main+0x278>)
 800338e:	2201      	movs	r2, #1
 8003390:	741a      	strb	r2, [r3, #16]
	  				break;
 8003392:	e020      	b.n	80033d6 <main+0x232>
	  		case '6':
	  			F1_par.FreqRange = 640.0f;
 8003394:	4b21      	ldr	r3, [pc, #132]	@ (800341c <main+0x278>)
 8003396:	4a22      	ldr	r2, [pc, #136]	@ (8003420 <main+0x27c>)
 8003398:	60da      	str	r2, [r3, #12]
	  				break;
 800339a:	e01c      	b.n	80033d6 <main+0x232>
	  		case 'B':
	  			F1_par.FreqRange = 6000.0f;
 800339c:	4b1f      	ldr	r3, [pc, #124]	@ (800341c <main+0x278>)
 800339e:	4a21      	ldr	r2, [pc, #132]	@ (8003424 <main+0x280>)
 80033a0:	60da      	str	r2, [r3, #12]
	  				break;
 80033a2:	e018      	b.n	80033d6 <main+0x232>
	  		case '7':
	  			F2_par.mode = 0;
 80033a4:	4b20      	ldr	r3, [pc, #128]	@ (8003428 <main+0x284>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	741a      	strb	r2, [r3, #16]
	  				break;
 80033aa:	e014      	b.n	80033d6 <main+0x232>
	  		case '8':
	  			F2_par.mode = 1;
 80033ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003428 <main+0x284>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	741a      	strb	r2, [r3, #16]
	  				break;
 80033b2:	e010      	b.n	80033d6 <main+0x232>
	  		case '9':
	  			F2_par.FreqRange = 640.0f;
 80033b4:	4b1c      	ldr	r3, [pc, #112]	@ (8003428 <main+0x284>)
 80033b6:	4a1a      	ldr	r2, [pc, #104]	@ (8003420 <main+0x27c>)
 80033b8:	60da      	str	r2, [r3, #12]
	  				break;
 80033ba:	e00c      	b.n	80033d6 <main+0x232>
	  		case 'C':
	  			F2_par.FreqRange = 6000.0f;
 80033bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003428 <main+0x284>)
 80033be:	4a19      	ldr	r2, [pc, #100]	@ (8003424 <main+0x280>)
 80033c0:	60da      	str	r2, [r3, #12]
	  				break;
 80033c2:	e008      	b.n	80033d6 <main+0x232>
	  		case '*':
	  			fixedScaleMode = 0;
 80033c4:	4b19      	ldr	r3, [pc, #100]	@ (800342c <main+0x288>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	701a      	strb	r2, [r3, #0]
	  				break;
 80033ca:	e004      	b.n	80033d6 <main+0x232>
	  		case '0':
	  			fixedScaleMode = 1;
 80033cc:	4b17      	ldr	r3, [pc, #92]	@ (800342c <main+0x288>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	701a      	strb	r2, [r3, #0]
	  				break;
 80033d2:	e000      	b.n	80033d6 <main+0x232>
	  		case '#':
	  				break;
	  		case 'D':
	  				break;
	  		default:
	  			break;
 80033d4:	bf00      	nop
	  		}
	  		old_key = key;
 80033d6:	4b0d      	ldr	r3, [pc, #52]	@ (800340c <main+0x268>)
 80033d8:	781a      	ldrb	r2, [r3, #0]
 80033da:	4b0d      	ldr	r3, [pc, #52]	@ (8003410 <main+0x26c>)
 80033dc:	701a      	strb	r2, [r3, #0]
	  key = Get_Key();
 80033de:	e737      	b.n	8003250 <main+0xac>
 80033e0:	20000268 	.word	0x20000268
 80033e4:	20000000 	.word	0x20000000
 80033e8:	20000004 	.word	0x20000004
 80033ec:	2000043c 	.word	0x2000043c
 80033f0:	200002bc 	.word	0x200002bc
 80033f4:	20000578 	.word	0x20000578
 80033f8:	20000118 	.word	0x20000118
 80033fc:	2000057c 	.word	0x2000057c
 8003400:	20000160 	.word	0x20000160
 8003404:	200003ac 	.word	0x200003ac
 8003408:	20000364 	.word	0x20000364
 800340c:	200000bc 	.word	0x200000bc
 8003410:	200005ac 	.word	0x200005ac
 8003414:	20000577 	.word	0x20000577
 8003418:	40020c00 	.word	0x40020c00
 800341c:	20000018 	.word	0x20000018
 8003420:	44200000 	.word	0x44200000
 8003424:	45bb8000 	.word	0x45bb8000
 8003428:	2000002c 	.word	0x2000002c
 800342c:	20000575 	.word	0x20000575

08003430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b094      	sub	sp, #80	@ 0x50
 8003434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003436:	f107 0320 	add.w	r3, r7, #32
 800343a:	2230      	movs	r2, #48	@ 0x30
 800343c:	2100      	movs	r1, #0
 800343e:	4618      	mov	r0, r3
 8003440:	f005 fbd0 	bl	8008be4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003444:	f107 030c 	add.w	r3, r7, #12
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	605a      	str	r2, [r3, #4]
 800344e:	609a      	str	r2, [r3, #8]
 8003450:	60da      	str	r2, [r3, #12]
 8003452:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003454:	2300      	movs	r3, #0
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	4b28      	ldr	r3, [pc, #160]	@ (80034fc <SystemClock_Config+0xcc>)
 800345a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345c:	4a27      	ldr	r2, [pc, #156]	@ (80034fc <SystemClock_Config+0xcc>)
 800345e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003462:	6413      	str	r3, [r2, #64]	@ 0x40
 8003464:	4b25      	ldr	r3, [pc, #148]	@ (80034fc <SystemClock_Config+0xcc>)
 8003466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003468:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800346c:	60bb      	str	r3, [r7, #8]
 800346e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003470:	2300      	movs	r3, #0
 8003472:	607b      	str	r3, [r7, #4]
 8003474:	4b22      	ldr	r3, [pc, #136]	@ (8003500 <SystemClock_Config+0xd0>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a21      	ldr	r2, [pc, #132]	@ (8003500 <SystemClock_Config+0xd0>)
 800347a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	4b1f      	ldr	r3, [pc, #124]	@ (8003500 <SystemClock_Config+0xd0>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003488:	607b      	str	r3, [r7, #4]
 800348a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800348c:	2301      	movs	r3, #1
 800348e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003490:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003494:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003496:	2302      	movs	r3, #2
 8003498:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800349a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800349e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80034a0:	2304      	movs	r3, #4
 80034a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80034a4:	23a8      	movs	r3, #168	@ 0xa8
 80034a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80034a8:	2302      	movs	r3, #2
 80034aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80034ac:	2304      	movs	r3, #4
 80034ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034b0:	f107 0320 	add.w	r3, r7, #32
 80034b4:	4618      	mov	r0, r3
 80034b6:	f003 ffd1 	bl	800745c <HAL_RCC_OscConfig>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80034c0:	f000 fb9c 	bl	8003bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034c4:	230f      	movs	r3, #15
 80034c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034c8:	2302      	movs	r3, #2
 80034ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034cc:	2300      	movs	r3, #0
 80034ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80034d0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80034d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80034d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80034dc:	f107 030c 	add.w	r3, r7, #12
 80034e0:	2105      	movs	r1, #5
 80034e2:	4618      	mov	r0, r3
 80034e4:	f004 fa32 	bl	800794c <HAL_RCC_ClockConfig>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80034ee:	f000 fb85 	bl	8003bfc <Error_Handler>
  }
}
 80034f2:	bf00      	nop
 80034f4:	3750      	adds	r7, #80	@ 0x50
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40023800 	.word	0x40023800
 8003500:	40007000 	.word	0x40007000

08003504 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800350a:	463b      	mov	r3, r7
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	605a      	str	r2, [r3, #4]
 8003512:	609a      	str	r2, [r3, #8]
 8003514:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003516:	4b29      	ldr	r3, [pc, #164]	@ (80035bc <MX_ADC1_Init+0xb8>)
 8003518:	4a29      	ldr	r2, [pc, #164]	@ (80035c0 <MX_ADC1_Init+0xbc>)
 800351a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800351c:	4b27      	ldr	r3, [pc, #156]	@ (80035bc <MX_ADC1_Init+0xb8>)
 800351e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003522:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003524:	4b25      	ldr	r3, [pc, #148]	@ (80035bc <MX_ADC1_Init+0xb8>)
 8003526:	2200      	movs	r2, #0
 8003528:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800352a:	4b24      	ldr	r3, [pc, #144]	@ (80035bc <MX_ADC1_Init+0xb8>)
 800352c:	2201      	movs	r2, #1
 800352e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003530:	4b22      	ldr	r3, [pc, #136]	@ (80035bc <MX_ADC1_Init+0xb8>)
 8003532:	2201      	movs	r2, #1
 8003534:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003536:	4b21      	ldr	r3, [pc, #132]	@ (80035bc <MX_ADC1_Init+0xb8>)
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800353e:	4b1f      	ldr	r3, [pc, #124]	@ (80035bc <MX_ADC1_Init+0xb8>)
 8003540:	2200      	movs	r2, #0
 8003542:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003544:	4b1d      	ldr	r3, [pc, #116]	@ (80035bc <MX_ADC1_Init+0xb8>)
 8003546:	4a1f      	ldr	r2, [pc, #124]	@ (80035c4 <MX_ADC1_Init+0xc0>)
 8003548:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800354a:	4b1c      	ldr	r3, [pc, #112]	@ (80035bc <MX_ADC1_Init+0xb8>)
 800354c:	2200      	movs	r2, #0
 800354e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8003550:	4b1a      	ldr	r3, [pc, #104]	@ (80035bc <MX_ADC1_Init+0xb8>)
 8003552:	2202      	movs	r2, #2
 8003554:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003556:	4b19      	ldr	r3, [pc, #100]	@ (80035bc <MX_ADC1_Init+0xb8>)
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800355e:	4b17      	ldr	r3, [pc, #92]	@ (80035bc <MX_ADC1_Init+0xb8>)
 8003560:	2201      	movs	r2, #1
 8003562:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003564:	4815      	ldr	r0, [pc, #84]	@ (80035bc <MX_ADC1_Init+0xb8>)
 8003566:	f000 ff77 	bl	8004458 <HAL_ADC_Init>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003570:	f000 fb44 	bl	8003bfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003574:	230c      	movs	r3, #12
 8003576:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003578:	2301      	movs	r3, #1
 800357a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800357c:	2303      	movs	r3, #3
 800357e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003580:	463b      	mov	r3, r7
 8003582:	4619      	mov	r1, r3
 8003584:	480d      	ldr	r0, [pc, #52]	@ (80035bc <MX_ADC1_Init+0xb8>)
 8003586:	f001 f8d9 	bl	800473c <HAL_ADC_ConfigChannel>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003590:	f000 fb34 	bl	8003bfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003594:	230b      	movs	r3, #11
 8003596:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003598:	2302      	movs	r3, #2
 800359a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800359c:	2301      	movs	r3, #1
 800359e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035a0:	463b      	mov	r3, r7
 80035a2:	4619      	mov	r1, r3
 80035a4:	4805      	ldr	r0, [pc, #20]	@ (80035bc <MX_ADC1_Init+0xb8>)
 80035a6:	f001 f8c9 	bl	800473c <HAL_ADC_ConfigChannel>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80035b0:	f000 fb24 	bl	8003bfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80035b4:	bf00      	nop
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	20000118 	.word	0x20000118
 80035c0:	40012000 	.word	0x40012000
 80035c4:	0f000001 	.word	0x0f000001

080035c8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80035ce:	463b      	mov	r3, r7
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	605a      	str	r2, [r3, #4]
 80035d6:	609a      	str	r2, [r3, #8]
 80035d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80035da:	4b4b      	ldr	r3, [pc, #300]	@ (8003708 <MX_ADC2_Init+0x140>)
 80035dc:	4a4b      	ldr	r2, [pc, #300]	@ (800370c <MX_ADC2_Init+0x144>)
 80035de:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80035e0:	4b49      	ldr	r3, [pc, #292]	@ (8003708 <MX_ADC2_Init+0x140>)
 80035e2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80035e6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80035e8:	4b47      	ldr	r3, [pc, #284]	@ (8003708 <MX_ADC2_Init+0x140>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80035ee:	4b46      	ldr	r3, [pc, #280]	@ (8003708 <MX_ADC2_Init+0x140>)
 80035f0:	2201      	movs	r2, #1
 80035f2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80035f4:	4b44      	ldr	r3, [pc, #272]	@ (8003708 <MX_ADC2_Init+0x140>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80035fa:	4b43      	ldr	r3, [pc, #268]	@ (8003708 <MX_ADC2_Init+0x140>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003602:	4b41      	ldr	r3, [pc, #260]	@ (8003708 <MX_ADC2_Init+0x140>)
 8003604:	2200      	movs	r2, #0
 8003606:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003608:	4b3f      	ldr	r3, [pc, #252]	@ (8003708 <MX_ADC2_Init+0x140>)
 800360a:	4a41      	ldr	r2, [pc, #260]	@ (8003710 <MX_ADC2_Init+0x148>)
 800360c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800360e:	4b3e      	ldr	r3, [pc, #248]	@ (8003708 <MX_ADC2_Init+0x140>)
 8003610:	2200      	movs	r2, #0
 8003612:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 7;
 8003614:	4b3c      	ldr	r3, [pc, #240]	@ (8003708 <MX_ADC2_Init+0x140>)
 8003616:	2207      	movs	r2, #7
 8003618:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800361a:	4b3b      	ldr	r3, [pc, #236]	@ (8003708 <MX_ADC2_Init+0x140>)
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003622:	4b39      	ldr	r3, [pc, #228]	@ (8003708 <MX_ADC2_Init+0x140>)
 8003624:	2201      	movs	r2, #1
 8003626:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003628:	4837      	ldr	r0, [pc, #220]	@ (8003708 <MX_ADC2_Init+0x140>)
 800362a:	f000 ff15 	bl	8004458 <HAL_ADC_Init>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8003634:	f000 fae2 	bl	8003bfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003638:	2306      	movs	r3, #6
 800363a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800363c:	2301      	movs	r3, #1
 800363e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8003640:	2301      	movs	r3, #1
 8003642:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003644:	463b      	mov	r3, r7
 8003646:	4619      	mov	r1, r3
 8003648:	482f      	ldr	r0, [pc, #188]	@ (8003708 <MX_ADC2_Init+0x140>)
 800364a:	f001 f877 	bl	800473c <HAL_ADC_ConfigChannel>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8003654:	f000 fad2 	bl	8003bfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003658:	2307      	movs	r3, #7
 800365a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800365c:	2302      	movs	r3, #2
 800365e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003660:	463b      	mov	r3, r7
 8003662:	4619      	mov	r1, r3
 8003664:	4828      	ldr	r0, [pc, #160]	@ (8003708 <MX_ADC2_Init+0x140>)
 8003666:	f001 f869 	bl	800473c <HAL_ADC_ConfigChannel>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8003670:	f000 fac4 	bl	8003bfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003674:	2308      	movs	r3, #8
 8003676:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003678:	2303      	movs	r3, #3
 800367a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800367c:	463b      	mov	r3, r7
 800367e:	4619      	mov	r1, r3
 8003680:	4821      	ldr	r0, [pc, #132]	@ (8003708 <MX_ADC2_Init+0x140>)
 8003682:	f001 f85b 	bl	800473c <HAL_ADC_ConfigChannel>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 800368c:	f000 fab6 	bl	8003bfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003690:	2309      	movs	r3, #9
 8003692:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003694:	2304      	movs	r3, #4
 8003696:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003698:	463b      	mov	r3, r7
 800369a:	4619      	mov	r1, r3
 800369c:	481a      	ldr	r0, [pc, #104]	@ (8003708 <MX_ADC2_Init+0x140>)
 800369e:	f001 f84d 	bl	800473c <HAL_ADC_ConfigChannel>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80036a8:	f000 faa8 	bl	8003bfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80036ac:	230f      	movs	r3, #15
 80036ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80036b0:	2305      	movs	r3, #5
 80036b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80036b4:	463b      	mov	r3, r7
 80036b6:	4619      	mov	r1, r3
 80036b8:	4813      	ldr	r0, [pc, #76]	@ (8003708 <MX_ADC2_Init+0x140>)
 80036ba:	f001 f83f 	bl	800473c <HAL_ADC_ConfigChannel>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80036c4:	f000 fa9a 	bl	8003bfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80036c8:	230d      	movs	r3, #13
 80036ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80036cc:	2306      	movs	r3, #6
 80036ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80036d0:	463b      	mov	r3, r7
 80036d2:	4619      	mov	r1, r3
 80036d4:	480c      	ldr	r0, [pc, #48]	@ (8003708 <MX_ADC2_Init+0x140>)
 80036d6:	f001 f831 	bl	800473c <HAL_ADC_ConfigChannel>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 80036e0:	f000 fa8c 	bl	8003bfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80036e4:	230e      	movs	r3, #14
 80036e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80036e8:	2307      	movs	r3, #7
 80036ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80036ec:	463b      	mov	r3, r7
 80036ee:	4619      	mov	r1, r3
 80036f0:	4805      	ldr	r0, [pc, #20]	@ (8003708 <MX_ADC2_Init+0x140>)
 80036f2:	f001 f823 	bl	800473c <HAL_ADC_ConfigChannel>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80036fc:	f000 fa7e 	bl	8003bfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003700:	bf00      	nop
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000160 	.word	0x20000160
 800370c:	40012100 	.word	0x40012100
 8003710:	0f000001 	.word	0x0f000001

08003714 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003718:	4b12      	ldr	r3, [pc, #72]	@ (8003764 <MX_I2C1_Init+0x50>)
 800371a:	4a13      	ldr	r2, [pc, #76]	@ (8003768 <MX_I2C1_Init+0x54>)
 800371c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800371e:	4b11      	ldr	r3, [pc, #68]	@ (8003764 <MX_I2C1_Init+0x50>)
 8003720:	4a12      	ldr	r2, [pc, #72]	@ (800376c <MX_I2C1_Init+0x58>)
 8003722:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003724:	4b0f      	ldr	r3, [pc, #60]	@ (8003764 <MX_I2C1_Init+0x50>)
 8003726:	2200      	movs	r2, #0
 8003728:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800372a:	4b0e      	ldr	r3, [pc, #56]	@ (8003764 <MX_I2C1_Init+0x50>)
 800372c:	2200      	movs	r2, #0
 800372e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003730:	4b0c      	ldr	r3, [pc, #48]	@ (8003764 <MX_I2C1_Init+0x50>)
 8003732:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003736:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003738:	4b0a      	ldr	r3, [pc, #40]	@ (8003764 <MX_I2C1_Init+0x50>)
 800373a:	2200      	movs	r2, #0
 800373c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800373e:	4b09      	ldr	r3, [pc, #36]	@ (8003764 <MX_I2C1_Init+0x50>)
 8003740:	2200      	movs	r2, #0
 8003742:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003744:	4b07      	ldr	r3, [pc, #28]	@ (8003764 <MX_I2C1_Init+0x50>)
 8003746:	2200      	movs	r2, #0
 8003748:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800374a:	4b06      	ldr	r3, [pc, #24]	@ (8003764 <MX_I2C1_Init+0x50>)
 800374c:	2200      	movs	r2, #0
 800374e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003750:	4804      	ldr	r0, [pc, #16]	@ (8003764 <MX_I2C1_Init+0x50>)
 8003752:	f002 f8fb 	bl	800594c <HAL_I2C_Init>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800375c:	f000 fa4e 	bl	8003bfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003760:	bf00      	nop
 8003762:	bd80      	pop	{r7, pc}
 8003764:	20000268 	.word	0x20000268
 8003768:	40005400 	.word	0x40005400
 800376c:	000186a0 	.word	0x000186a0

08003770 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8003774:	4b13      	ldr	r3, [pc, #76]	@ (80037c4 <MX_I2S3_Init+0x54>)
 8003776:	4a14      	ldr	r2, [pc, #80]	@ (80037c8 <MX_I2S3_Init+0x58>)
 8003778:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800377a:	4b12      	ldr	r3, [pc, #72]	@ (80037c4 <MX_I2S3_Init+0x54>)
 800377c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003780:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8003782:	4b10      	ldr	r3, [pc, #64]	@ (80037c4 <MX_I2S3_Init+0x54>)
 8003784:	2200      	movs	r2, #0
 8003786:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8003788:	4b0e      	ldr	r3, [pc, #56]	@ (80037c4 <MX_I2S3_Init+0x54>)
 800378a:	2200      	movs	r2, #0
 800378c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800378e:	4b0d      	ldr	r3, [pc, #52]	@ (80037c4 <MX_I2S3_Init+0x54>)
 8003790:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003794:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8003796:	4b0b      	ldr	r3, [pc, #44]	@ (80037c4 <MX_I2S3_Init+0x54>)
 8003798:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800379c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800379e:	4b09      	ldr	r3, [pc, #36]	@ (80037c4 <MX_I2S3_Init+0x54>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80037a4:	4b07      	ldr	r3, [pc, #28]	@ (80037c4 <MX_I2S3_Init+0x54>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80037aa:	4b06      	ldr	r3, [pc, #24]	@ (80037c4 <MX_I2S3_Init+0x54>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80037b0:	4804      	ldr	r0, [pc, #16]	@ (80037c4 <MX_I2S3_Init+0x54>)
 80037b2:	f003 f8c5 	bl	8006940 <HAL_I2S_Init>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80037bc:	f000 fa1e 	bl	8003bfc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80037c0:	bf00      	nop
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	200002bc 	.word	0x200002bc
 80037c8:	40003c00 	.word	0x40003c00

080037cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08c      	sub	sp, #48	@ 0x30
 80037d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80037d2:	f107 030c 	add.w	r3, r7, #12
 80037d6:	2224      	movs	r2, #36	@ 0x24
 80037d8:	2100      	movs	r1, #0
 80037da:	4618      	mov	r0, r3
 80037dc:	f005 fa02 	bl	8008be4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037e0:	1d3b      	adds	r3, r7, #4
 80037e2:	2200      	movs	r2, #0
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80037e8:	4b21      	ldr	r3, [pc, #132]	@ (8003870 <MX_TIM2_Init+0xa4>)
 80037ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80037ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80037f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003870 <MX_TIM2_Init+0xa4>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003870 <MX_TIM2_Init+0xa4>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80037fc:	4b1c      	ldr	r3, [pc, #112]	@ (8003870 <MX_TIM2_Init+0xa4>)
 80037fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003802:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003804:	4b1a      	ldr	r3, [pc, #104]	@ (8003870 <MX_TIM2_Init+0xa4>)
 8003806:	2200      	movs	r2, #0
 8003808:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800380a:	4b19      	ldr	r3, [pc, #100]	@ (8003870 <MX_TIM2_Init+0xa4>)
 800380c:	2200      	movs	r2, #0
 800380e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003810:	2303      	movs	r3, #3
 8003812:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003814:	2300      	movs	r3, #0
 8003816:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003818:	2301      	movs	r3, #1
 800381a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800381c:	2300      	movs	r3, #0
 800381e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003820:	2300      	movs	r3, #0
 8003822:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003824:	2300      	movs	r3, #0
 8003826:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003828:	2301      	movs	r3, #1
 800382a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800382c:	2300      	movs	r3, #0
 800382e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003830:	2300      	movs	r3, #0
 8003832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003834:	f107 030c 	add.w	r3, r7, #12
 8003838:	4619      	mov	r1, r3
 800383a:	480d      	ldr	r0, [pc, #52]	@ (8003870 <MX_TIM2_Init+0xa4>)
 800383c:	f004 fcc3 	bl	80081c6 <HAL_TIM_Encoder_Init>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003846:	f000 f9d9 	bl	8003bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800384a:	2300      	movs	r3, #0
 800384c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800384e:	2300      	movs	r3, #0
 8003850:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003852:	1d3b      	adds	r3, r7, #4
 8003854:	4619      	mov	r1, r3
 8003856:	4806      	ldr	r0, [pc, #24]	@ (8003870 <MX_TIM2_Init+0xa4>)
 8003858:	f005 f934 	bl	8008ac4 <HAL_TIMEx_MasterConfigSynchronization>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003862:	f000 f9cb 	bl	8003bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003866:	bf00      	nop
 8003868:	3730      	adds	r7, #48	@ 0x30
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	20000364 	.word	0x20000364

08003874 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08c      	sub	sp, #48	@ 0x30
 8003878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800387a:	f107 030c 	add.w	r3, r7, #12
 800387e:	2224      	movs	r2, #36	@ 0x24
 8003880:	2100      	movs	r1, #0
 8003882:	4618      	mov	r0, r3
 8003884:	f005 f9ae 	bl	8008be4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003888:	1d3b      	adds	r3, r7, #4
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003890:	4b20      	ldr	r3, [pc, #128]	@ (8003914 <MX_TIM3_Init+0xa0>)
 8003892:	4a21      	ldr	r2, [pc, #132]	@ (8003918 <MX_TIM3_Init+0xa4>)
 8003894:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003896:	4b1f      	ldr	r3, [pc, #124]	@ (8003914 <MX_TIM3_Init+0xa0>)
 8003898:	2200      	movs	r2, #0
 800389a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800389c:	4b1d      	ldr	r3, [pc, #116]	@ (8003914 <MX_TIM3_Init+0xa0>)
 800389e:	2200      	movs	r2, #0
 80038a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80038a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003914 <MX_TIM3_Init+0xa0>)
 80038a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80038a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003914 <MX_TIM3_Init+0xa0>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038b0:	4b18      	ldr	r3, [pc, #96]	@ (8003914 <MX_TIM3_Init+0xa0>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80038b6:	2303      	movs	r3, #3
 80038b8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80038ba:	2300      	movs	r3, #0
 80038bc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80038be:	2301      	movs	r3, #1
 80038c0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80038ca:	2300      	movs	r3, #0
 80038cc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80038ce:	2301      	movs	r3, #1
 80038d0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80038d2:	2300      	movs	r3, #0
 80038d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80038d6:	2300      	movs	r3, #0
 80038d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80038da:	f107 030c 	add.w	r3, r7, #12
 80038de:	4619      	mov	r1, r3
 80038e0:	480c      	ldr	r0, [pc, #48]	@ (8003914 <MX_TIM3_Init+0xa0>)
 80038e2:	f004 fc70 	bl	80081c6 <HAL_TIM_Encoder_Init>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80038ec:	f000 f986 	bl	8003bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038f0:	2300      	movs	r3, #0
 80038f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038f4:	2300      	movs	r3, #0
 80038f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038f8:	1d3b      	adds	r3, r7, #4
 80038fa:	4619      	mov	r1, r3
 80038fc:	4805      	ldr	r0, [pc, #20]	@ (8003914 <MX_TIM3_Init+0xa0>)
 80038fe:	f005 f8e1 	bl	8008ac4 <HAL_TIMEx_MasterConfigSynchronization>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003908:	f000 f978 	bl	8003bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800390c:	bf00      	nop
 800390e:	3730      	adds	r7, #48	@ 0x30
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	200003ac 	.word	0x200003ac
 8003918:	40000400 	.word	0x40000400

0800391c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003922:	f107 0308 	add.w	r3, r7, #8
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	605a      	str	r2, [r3, #4]
 800392c:	609a      	str	r2, [r3, #8]
 800392e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003930:	463b      	mov	r3, r7
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003938:	4b1d      	ldr	r3, [pc, #116]	@ (80039b0 <MX_TIM4_Init+0x94>)
 800393a:	4a1e      	ldr	r2, [pc, #120]	@ (80039b4 <MX_TIM4_Init+0x98>)
 800393c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 800393e:	4b1c      	ldr	r3, [pc, #112]	@ (80039b0 <MX_TIM4_Init+0x94>)
 8003940:	f240 3247 	movw	r2, #839	@ 0x347
 8003944:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003946:	4b1a      	ldr	r3, [pc, #104]	@ (80039b0 <MX_TIM4_Init+0x94>)
 8003948:	2200      	movs	r2, #0
 800394a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800394c:	4b18      	ldr	r3, [pc, #96]	@ (80039b0 <MX_TIM4_Init+0x94>)
 800394e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003952:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003954:	4b16      	ldr	r3, [pc, #88]	@ (80039b0 <MX_TIM4_Init+0x94>)
 8003956:	2200      	movs	r2, #0
 8003958:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800395a:	4b15      	ldr	r3, [pc, #84]	@ (80039b0 <MX_TIM4_Init+0x94>)
 800395c:	2200      	movs	r2, #0
 800395e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003960:	4813      	ldr	r0, [pc, #76]	@ (80039b0 <MX_TIM4_Init+0x94>)
 8003962:	f004 fb41 	bl	8007fe8 <HAL_TIM_Base_Init>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800396c:	f000 f946 	bl	8003bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003970:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003974:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003976:	f107 0308 	add.w	r3, r7, #8
 800397a:	4619      	mov	r1, r3
 800397c:	480c      	ldr	r0, [pc, #48]	@ (80039b0 <MX_TIM4_Init+0x94>)
 800397e:	f004 fe46 	bl	800860e <HAL_TIM_ConfigClockSource>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003988:	f000 f938 	bl	8003bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800398c:	2300      	movs	r3, #0
 800398e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003990:	2300      	movs	r3, #0
 8003992:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003994:	463b      	mov	r3, r7
 8003996:	4619      	mov	r1, r3
 8003998:	4805      	ldr	r0, [pc, #20]	@ (80039b0 <MX_TIM4_Init+0x94>)
 800399a:	f005 f893 	bl	8008ac4 <HAL_TIMEx_MasterConfigSynchronization>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80039a4:	f000 f92a 	bl	8003bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80039a8:	bf00      	nop
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	200003f4 	.word	0x200003f4
 80039b4:	40000800 	.word	0x40000800

080039b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80039be:	2300      	movs	r3, #0
 80039c0:	607b      	str	r3, [r7, #4]
 80039c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003a30 <MX_DMA_Init+0x78>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003a30 <MX_DMA_Init+0x78>)
 80039c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80039cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80039ce:	4b18      	ldr	r3, [pc, #96]	@ (8003a30 <MX_DMA_Init+0x78>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039d6:	607b      	str	r3, [r7, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80039da:	2300      	movs	r3, #0
 80039dc:	603b      	str	r3, [r7, #0]
 80039de:	4b14      	ldr	r3, [pc, #80]	@ (8003a30 <MX_DMA_Init+0x78>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e2:	4a13      	ldr	r2, [pc, #76]	@ (8003a30 <MX_DMA_Init+0x78>)
 80039e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80039e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80039ea:	4b11      	ldr	r3, [pc, #68]	@ (8003a30 <MX_DMA_Init+0x78>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80039f6:	2200      	movs	r2, #0
 80039f8:	2100      	movs	r1, #0
 80039fa:	2010      	movs	r0, #16
 80039fc:	f001 fa19 	bl	8004e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003a00:	2010      	movs	r0, #16
 8003a02:	f001 fa32 	bl	8004e6a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003a06:	2200      	movs	r2, #0
 8003a08:	2100      	movs	r1, #0
 8003a0a:	2038      	movs	r0, #56	@ 0x38
 8003a0c:	f001 fa11 	bl	8004e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003a10:	2038      	movs	r0, #56	@ 0x38
 8003a12:	f001 fa2a 	bl	8004e6a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003a16:	2200      	movs	r2, #0
 8003a18:	2100      	movs	r1, #0
 8003a1a:	203a      	movs	r0, #58	@ 0x3a
 8003a1c:	f001 fa09 	bl	8004e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003a20:	203a      	movs	r0, #58	@ 0x3a
 8003a22:	f001 fa22 	bl	8004e6a <HAL_NVIC_EnableIRQ>

}
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40023800 	.word	0x40023800

08003a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b08c      	sub	sp, #48	@ 0x30
 8003a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a3a:	f107 031c 	add.w	r3, r7, #28
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	605a      	str	r2, [r3, #4]
 8003a44:	609a      	str	r2, [r3, #8]
 8003a46:	60da      	str	r2, [r3, #12]
 8003a48:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61bb      	str	r3, [r7, #24]
 8003a4e:	4b67      	ldr	r3, [pc, #412]	@ (8003bec <MX_GPIO_Init+0x1b8>)
 8003a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a52:	4a66      	ldr	r2, [pc, #408]	@ (8003bec <MX_GPIO_Init+0x1b8>)
 8003a54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a5a:	4b64      	ldr	r3, [pc, #400]	@ (8003bec <MX_GPIO_Init+0x1b8>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a62:	61bb      	str	r3, [r7, #24]
 8003a64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]
 8003a6a:	4b60      	ldr	r3, [pc, #384]	@ (8003bec <MX_GPIO_Init+0x1b8>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6e:	4a5f      	ldr	r2, [pc, #380]	@ (8003bec <MX_GPIO_Init+0x1b8>)
 8003a70:	f043 0304 	orr.w	r3, r3, #4
 8003a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a76:	4b5d      	ldr	r3, [pc, #372]	@ (8003bec <MX_GPIO_Init+0x1b8>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	4b59      	ldr	r3, [pc, #356]	@ (8003bec <MX_GPIO_Init+0x1b8>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8a:	4a58      	ldr	r2, [pc, #352]	@ (8003bec <MX_GPIO_Init+0x1b8>)
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a92:	4b56      	ldr	r3, [pc, #344]	@ (8003bec <MX_GPIO_Init+0x1b8>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	4b52      	ldr	r3, [pc, #328]	@ (8003bec <MX_GPIO_Init+0x1b8>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa6:	4a51      	ldr	r2, [pc, #324]	@ (8003bec <MX_GPIO_Init+0x1b8>)
 8003aa8:	f043 0302 	orr.w	r3, r3, #2
 8003aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aae:	4b4f      	ldr	r3, [pc, #316]	@ (8003bec <MX_GPIO_Init+0x1b8>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003aba:	2300      	movs	r3, #0
 8003abc:	60bb      	str	r3, [r7, #8]
 8003abe:	4b4b      	ldr	r3, [pc, #300]	@ (8003bec <MX_GPIO_Init+0x1b8>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac2:	4a4a      	ldr	r2, [pc, #296]	@ (8003bec <MX_GPIO_Init+0x1b8>)
 8003ac4:	f043 0310 	orr.w	r3, r3, #16
 8003ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aca:	4b48      	ldr	r3, [pc, #288]	@ (8003bec <MX_GPIO_Init+0x1b8>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ace:	f003 0310 	and.w	r3, r3, #16
 8003ad2:	60bb      	str	r3, [r7, #8]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	607b      	str	r3, [r7, #4]
 8003ada:	4b44      	ldr	r3, [pc, #272]	@ (8003bec <MX_GPIO_Init+0x1b8>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ade:	4a43      	ldr	r2, [pc, #268]	@ (8003bec <MX_GPIO_Init+0x1b8>)
 8003ae0:	f043 0308 	orr.w	r3, r3, #8
 8003ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ae6:	4b41      	ldr	r3, [pc, #260]	@ (8003bec <MX_GPIO_Init+0x1b8>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	607b      	str	r3, [r7, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, KC3_Pin|KC2_Pin|KC1_Pin|KC0_Pin, GPIO_PIN_RESET);
 8003af2:	2200      	movs	r2, #0
 8003af4:	f44f 41aa 	mov.w	r1, #21760	@ 0x5500
 8003af8:	483d      	ldr	r0, [pc, #244]	@ (8003bf0 <MX_GPIO_Init+0x1bc>)
 8003afa:	f001 fef5 	bl	80058e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8003afe:	2200      	movs	r2, #0
 8003b00:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8003b04:	483b      	ldr	r0, [pc, #236]	@ (8003bf4 <MX_GPIO_Init+0x1c0>)
 8003b06:	f001 feef 	bl	80058e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PreFilterSwitch_Pin */
  GPIO_InitStruct.Pin = PreFilterSwitch_Pin;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b0e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b14:	2300      	movs	r3, #0
 8003b16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PreFilterSwitch_GPIO_Port, &GPIO_InitStruct);
 8003b18:	f107 031c 	add.w	r3, r7, #28
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4836      	ldr	r0, [pc, #216]	@ (8003bf8 <MX_GPIO_Init+0x1c4>)
 8003b20:	f001 fd2e 	bl	8005580 <HAL_GPIO_Init>

  /*Configure GPIO pins : KR3_Pin KR2_Pin KR1_Pin KR0_Pin */
  GPIO_InitStruct.Pin = KR3_Pin|KR2_Pin|KR1_Pin|KR0_Pin;
 8003b24:	f44f 532a 	mov.w	r3, #10880	@ 0x2a80
 8003b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b32:	f107 031c 	add.w	r3, r7, #28
 8003b36:	4619      	mov	r1, r3
 8003b38:	482d      	ldr	r0, [pc, #180]	@ (8003bf0 <MX_GPIO_Init+0x1bc>)
 8003b3a:	f001 fd21 	bl	8005580 <HAL_GPIO_Init>

  /*Configure GPIO pins : KC3_Pin KC2_Pin KC1_Pin KC0_Pin */
  GPIO_InitStruct.Pin = KC3_Pin|KC2_Pin|KC1_Pin|KC0_Pin;
 8003b3e:	f44f 43aa 	mov.w	r3, #21760	@ 0x5500
 8003b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b44:	2301      	movs	r3, #1
 8003b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b50:	f107 031c 	add.w	r3, r7, #28
 8003b54:	4619      	mov	r1, r3
 8003b56:	4826      	ldr	r0, [pc, #152]	@ (8003bf0 <MX_GPIO_Init+0x1bc>)
 8003b58:	f001 fd12 	bl	8005580 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8003b5c:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8003b60:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b62:	2301      	movs	r3, #1
 8003b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b6e:	f107 031c 	add.w	r3, r7, #28
 8003b72:	4619      	mov	r1, r3
 8003b74:	481f      	ldr	r0, [pc, #124]	@ (8003bf4 <MX_GPIO_Init+0x1c0>)
 8003b76:	f001 fd03 	bl	8005580 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCT2_Pin OCT1_Pin OCT4_Pin OCT3_Pin */
  GPIO_InitStruct.Pin = OCT2_Pin|OCT1_Pin|OCT4_Pin|OCT3_Pin;
 8003b7a:	234e      	movs	r3, #78	@ 0x4e
 8003b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003b7e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b84:	2301      	movs	r3, #1
 8003b86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b88:	f107 031c 	add.w	r3, r7, #28
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4819      	ldr	r0, [pc, #100]	@ (8003bf4 <MX_GPIO_Init+0x1c0>)
 8003b90:	f001 fcf6 	bl	8005580 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003b94:	2200      	movs	r2, #0
 8003b96:	2100      	movs	r1, #0
 8003b98:	2006      	movs	r0, #6
 8003b9a:	f001 f94a 	bl	8004e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003b9e:	2006      	movs	r0, #6
 8003ba0:	f001 f963 	bl	8004e6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	2007      	movs	r0, #7
 8003baa:	f001 f942 	bl	8004e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003bae:	2007      	movs	r0, #7
 8003bb0:	f001 f95b 	bl	8004e6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	2008      	movs	r0, #8
 8003bba:	f001 f93a 	bl	8004e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003bbe:	2008      	movs	r0, #8
 8003bc0:	f001 f953 	bl	8004e6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	2009      	movs	r0, #9
 8003bca:	f001 f932 	bl	8004e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003bce:	2009      	movs	r0, #9
 8003bd0:	f001 f94b 	bl	8004e6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	2017      	movs	r0, #23
 8003bda:	f001 f92a 	bl	8004e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003bde:	2017      	movs	r0, #23
 8003be0:	f001 f943 	bl	8004e6a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003be4:	bf00      	nop
 8003be6:	3730      	adds	r7, #48	@ 0x30
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	40020c00 	.word	0x40020c00
 8003bf8:	40020000 	.word	0x40020000

08003bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c00:	b672      	cpsid	i
}
 8003c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c04:	bf00      	nop
 8003c06:	e7fd      	b.n	8003c04 <Error_Handler+0x8>

08003c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c0e:	2300      	movs	r3, #0
 8003c10:	607b      	str	r3, [r7, #4]
 8003c12:	4b10      	ldr	r3, [pc, #64]	@ (8003c54 <HAL_MspInit+0x4c>)
 8003c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c16:	4a0f      	ldr	r2, [pc, #60]	@ (8003c54 <HAL_MspInit+0x4c>)
 8003c18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c54 <HAL_MspInit+0x4c>)
 8003c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c26:	607b      	str	r3, [r7, #4]
 8003c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	603b      	str	r3, [r7, #0]
 8003c2e:	4b09      	ldr	r3, [pc, #36]	@ (8003c54 <HAL_MspInit+0x4c>)
 8003c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c32:	4a08      	ldr	r2, [pc, #32]	@ (8003c54 <HAL_MspInit+0x4c>)
 8003c34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c3a:	4b06      	ldr	r3, [pc, #24]	@ (8003c54 <HAL_MspInit+0x4c>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	40023800 	.word	0x40023800

08003c58 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08e      	sub	sp, #56	@ 0x38
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	605a      	str	r2, [r3, #4]
 8003c6a:	609a      	str	r2, [r3, #8]
 8003c6c:	60da      	str	r2, [r3, #12]
 8003c6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a79      	ldr	r2, [pc, #484]	@ (8003e5c <HAL_ADC_MspInit+0x204>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d158      	bne.n	8003d2c <HAL_ADC_MspInit+0xd4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	623b      	str	r3, [r7, #32]
 8003c7e:	4b78      	ldr	r3, [pc, #480]	@ (8003e60 <HAL_ADC_MspInit+0x208>)
 8003c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c82:	4a77      	ldr	r2, [pc, #476]	@ (8003e60 <HAL_ADC_MspInit+0x208>)
 8003c84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c88:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c8a:	4b75      	ldr	r3, [pc, #468]	@ (8003e60 <HAL_ADC_MspInit+0x208>)
 8003c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c92:	623b      	str	r3, [r7, #32]
 8003c94:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c96:	2300      	movs	r3, #0
 8003c98:	61fb      	str	r3, [r7, #28]
 8003c9a:	4b71      	ldr	r3, [pc, #452]	@ (8003e60 <HAL_ADC_MspInit+0x208>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9e:	4a70      	ldr	r2, [pc, #448]	@ (8003e60 <HAL_ADC_MspInit+0x208>)
 8003ca0:	f043 0304 	orr.w	r3, r3, #4
 8003ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ca6:	4b6e      	ldr	r3, [pc, #440]	@ (8003e60 <HAL_ADC_MspInit+0x208>)
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003caa:	f003 0304 	and.w	r3, r3, #4
 8003cae:	61fb      	str	r3, [r7, #28]
 8003cb0:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8003cb2:	2306      	movs	r3, #6
 8003cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4867      	ldr	r0, [pc, #412]	@ (8003e64 <HAL_ADC_MspInit+0x20c>)
 8003cc6:	f001 fc5b 	bl	8005580 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003cca:	4b67      	ldr	r3, [pc, #412]	@ (8003e68 <HAL_ADC_MspInit+0x210>)
 8003ccc:	4a67      	ldr	r2, [pc, #412]	@ (8003e6c <HAL_ADC_MspInit+0x214>)
 8003cce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003cd0:	4b65      	ldr	r3, [pc, #404]	@ (8003e68 <HAL_ADC_MspInit+0x210>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cd6:	4b64      	ldr	r3, [pc, #400]	@ (8003e68 <HAL_ADC_MspInit+0x210>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cdc:	4b62      	ldr	r3, [pc, #392]	@ (8003e68 <HAL_ADC_MspInit+0x210>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003ce2:	4b61      	ldr	r3, [pc, #388]	@ (8003e68 <HAL_ADC_MspInit+0x210>)
 8003ce4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ce8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003cea:	4b5f      	ldr	r3, [pc, #380]	@ (8003e68 <HAL_ADC_MspInit+0x210>)
 8003cec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cf0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003cf2:	4b5d      	ldr	r3, [pc, #372]	@ (8003e68 <HAL_ADC_MspInit+0x210>)
 8003cf4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003cf8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003cfa:	4b5b      	ldr	r3, [pc, #364]	@ (8003e68 <HAL_ADC_MspInit+0x210>)
 8003cfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d00:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003d02:	4b59      	ldr	r3, [pc, #356]	@ (8003e68 <HAL_ADC_MspInit+0x210>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d08:	4b57      	ldr	r3, [pc, #348]	@ (8003e68 <HAL_ADC_MspInit+0x210>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003d0e:	4856      	ldr	r0, [pc, #344]	@ (8003e68 <HAL_ADC_MspInit+0x210>)
 8003d10:	f001 f8c6 	bl	8004ea0 <HAL_DMA_Init>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003d1a:	f7ff ff6f 	bl	8003bfc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a51      	ldr	r2, [pc, #324]	@ (8003e68 <HAL_ADC_MspInit+0x210>)
 8003d22:	639a      	str	r2, [r3, #56]	@ 0x38
 8003d24:	4a50      	ldr	r2, [pc, #320]	@ (8003e68 <HAL_ADC_MspInit+0x210>)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003d2a:	e092      	b.n	8003e52 <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a4f      	ldr	r2, [pc, #316]	@ (8003e70 <HAL_ADC_MspInit+0x218>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	f040 808d 	bne.w	8003e52 <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003d38:	2300      	movs	r3, #0
 8003d3a:	61bb      	str	r3, [r7, #24]
 8003d3c:	4b48      	ldr	r3, [pc, #288]	@ (8003e60 <HAL_ADC_MspInit+0x208>)
 8003d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d40:	4a47      	ldr	r2, [pc, #284]	@ (8003e60 <HAL_ADC_MspInit+0x208>)
 8003d42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d46:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d48:	4b45      	ldr	r3, [pc, #276]	@ (8003e60 <HAL_ADC_MspInit+0x208>)
 8003d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d50:	61bb      	str	r3, [r7, #24]
 8003d52:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d54:	2300      	movs	r3, #0
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	4b41      	ldr	r3, [pc, #260]	@ (8003e60 <HAL_ADC_MspInit+0x208>)
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5c:	4a40      	ldr	r2, [pc, #256]	@ (8003e60 <HAL_ADC_MspInit+0x208>)
 8003d5e:	f043 0304 	orr.w	r3, r3, #4
 8003d62:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d64:	4b3e      	ldr	r3, [pc, #248]	@ (8003e60 <HAL_ADC_MspInit+0x208>)
 8003d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d70:	2300      	movs	r3, #0
 8003d72:	613b      	str	r3, [r7, #16]
 8003d74:	4b3a      	ldr	r3, [pc, #232]	@ (8003e60 <HAL_ADC_MspInit+0x208>)
 8003d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d78:	4a39      	ldr	r2, [pc, #228]	@ (8003e60 <HAL_ADC_MspInit+0x208>)
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d80:	4b37      	ldr	r3, [pc, #220]	@ (8003e60 <HAL_ADC_MspInit+0x208>)
 8003d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	613b      	str	r3, [r7, #16]
 8003d8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	4b33      	ldr	r3, [pc, #204]	@ (8003e60 <HAL_ADC_MspInit+0x208>)
 8003d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d94:	4a32      	ldr	r2, [pc, #200]	@ (8003e60 <HAL_ADC_MspInit+0x208>)
 8003d96:	f043 0302 	orr.w	r3, r3, #2
 8003d9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d9c:	4b30      	ldr	r3, [pc, #192]	@ (8003e60 <HAL_ADC_MspInit+0x208>)
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8003da8:	233e      	movs	r3, #62	@ 0x3e
 8003daa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dac:	2303      	movs	r3, #3
 8003dae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db0:	2300      	movs	r3, #0
 8003db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003db4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003db8:	4619      	mov	r1, r3
 8003dba:	482a      	ldr	r0, [pc, #168]	@ (8003e64 <HAL_ADC_MspInit+0x20c>)
 8003dbc:	f001 fbe0 	bl	8005580 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003dc0:	23c0      	movs	r3, #192	@ 0xc0
 8003dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4828      	ldr	r0, [pc, #160]	@ (8003e74 <HAL_ADC_MspInit+0x21c>)
 8003dd4:	f001 fbd4 	bl	8005580 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de0:	2300      	movs	r3, #0
 8003de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003de4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003de8:	4619      	mov	r1, r3
 8003dea:	4823      	ldr	r0, [pc, #140]	@ (8003e78 <HAL_ADC_MspInit+0x220>)
 8003dec:	f001 fbc8 	bl	8005580 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8003df0:	4b22      	ldr	r3, [pc, #136]	@ (8003e7c <HAL_ADC_MspInit+0x224>)
 8003df2:	4a23      	ldr	r2, [pc, #140]	@ (8003e80 <HAL_ADC_MspInit+0x228>)
 8003df4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8003df6:	4b21      	ldr	r3, [pc, #132]	@ (8003e7c <HAL_ADC_MspInit+0x224>)
 8003df8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003dfc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8003e7c <HAL_ADC_MspInit+0x224>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e04:	4b1d      	ldr	r3, [pc, #116]	@ (8003e7c <HAL_ADC_MspInit+0x224>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003e7c <HAL_ADC_MspInit+0x224>)
 8003e0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e10:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e12:	4b1a      	ldr	r3, [pc, #104]	@ (8003e7c <HAL_ADC_MspInit+0x224>)
 8003e14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e18:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e1a:	4b18      	ldr	r3, [pc, #96]	@ (8003e7c <HAL_ADC_MspInit+0x224>)
 8003e1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e20:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003e22:	4b16      	ldr	r3, [pc, #88]	@ (8003e7c <HAL_ADC_MspInit+0x224>)
 8003e24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e28:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003e2a:	4b14      	ldr	r3, [pc, #80]	@ (8003e7c <HAL_ADC_MspInit+0x224>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e30:	4b12      	ldr	r3, [pc, #72]	@ (8003e7c <HAL_ADC_MspInit+0x224>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003e36:	4811      	ldr	r0, [pc, #68]	@ (8003e7c <HAL_ADC_MspInit+0x224>)
 8003e38:	f001 f832 	bl	8004ea0 <HAL_DMA_Init>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 8003e42:	f7ff fedb 	bl	8003bfc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a0c      	ldr	r2, [pc, #48]	@ (8003e7c <HAL_ADC_MspInit+0x224>)
 8003e4a:	639a      	str	r2, [r3, #56]	@ 0x38
 8003e4c:	4a0b      	ldr	r2, [pc, #44]	@ (8003e7c <HAL_ADC_MspInit+0x224>)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003e52:	bf00      	nop
 8003e54:	3738      	adds	r7, #56	@ 0x38
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40012000 	.word	0x40012000
 8003e60:	40023800 	.word	0x40023800
 8003e64:	40020800 	.word	0x40020800
 8003e68:	200001a8 	.word	0x200001a8
 8003e6c:	40026410 	.word	0x40026410
 8003e70:	40012100 	.word	0x40012100
 8003e74:	40020000 	.word	0x40020000
 8003e78:	40020400 	.word	0x40020400
 8003e7c:	20000208 	.word	0x20000208
 8003e80:	40026440 	.word	0x40026440

08003e84 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08a      	sub	sp, #40	@ 0x28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e8c:	f107 0314 	add.w	r3, r7, #20
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	605a      	str	r2, [r3, #4]
 8003e96:	609a      	str	r2, [r3, #8]
 8003e98:	60da      	str	r2, [r3, #12]
 8003e9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a19      	ldr	r2, [pc, #100]	@ (8003f08 <HAL_I2C_MspInit+0x84>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d12c      	bne.n	8003f00 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	613b      	str	r3, [r7, #16]
 8003eaa:	4b18      	ldr	r3, [pc, #96]	@ (8003f0c <HAL_I2C_MspInit+0x88>)
 8003eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eae:	4a17      	ldr	r2, [pc, #92]	@ (8003f0c <HAL_I2C_MspInit+0x88>)
 8003eb0:	f043 0302 	orr.w	r3, r3, #2
 8003eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eb6:	4b15      	ldr	r3, [pc, #84]	@ (8003f0c <HAL_I2C_MspInit+0x88>)
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	613b      	str	r3, [r7, #16]
 8003ec0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003ec2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8003ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ec8:	2312      	movs	r3, #18
 8003eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ed4:	2304      	movs	r3, #4
 8003ed6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ed8:	f107 0314 	add.w	r3, r7, #20
 8003edc:	4619      	mov	r1, r3
 8003ede:	480c      	ldr	r0, [pc, #48]	@ (8003f10 <HAL_I2C_MspInit+0x8c>)
 8003ee0:	f001 fb4e 	bl	8005580 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	4b08      	ldr	r3, [pc, #32]	@ (8003f0c <HAL_I2C_MspInit+0x88>)
 8003eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eec:	4a07      	ldr	r2, [pc, #28]	@ (8003f0c <HAL_I2C_MspInit+0x88>)
 8003eee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003ef2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ef4:	4b05      	ldr	r3, [pc, #20]	@ (8003f0c <HAL_I2C_MspInit+0x88>)
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003efc:	60fb      	str	r3, [r7, #12]
 8003efe:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003f00:	bf00      	nop
 8003f02:	3728      	adds	r7, #40	@ 0x28
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40005400 	.word	0x40005400
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	40020400 	.word	0x40020400

08003f14 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08e      	sub	sp, #56	@ 0x38
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	605a      	str	r2, [r3, #4]
 8003f26:	609a      	str	r2, [r3, #8]
 8003f28:	60da      	str	r2, [r3, #12]
 8003f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f2c:	f107 0314 	add.w	r3, r7, #20
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	605a      	str	r2, [r3, #4]
 8003f36:	609a      	str	r2, [r3, #8]
 8003f38:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a49      	ldr	r2, [pc, #292]	@ (8004064 <HAL_I2S_MspInit+0x150>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	f040 808b 	bne.w	800405c <HAL_I2S_MspInit+0x148>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8003f46:	2301      	movs	r3, #1
 8003f48:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8003f4a:	2332      	movs	r3, #50	@ 0x32
 8003f4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003f4e:	2302      	movs	r3, #2
 8003f50:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f52:	f107 0314 	add.w	r3, r7, #20
 8003f56:	4618      	mov	r0, r3
 8003f58:	f003 ff04 	bl	8007d64 <HAL_RCCEx_PeriphCLKConfig>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8003f62:	f7ff fe4b 	bl	8003bfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003f66:	2300      	movs	r3, #0
 8003f68:	613b      	str	r3, [r7, #16]
 8003f6a:	4b3f      	ldr	r3, [pc, #252]	@ (8004068 <HAL_I2S_MspInit+0x154>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6e:	4a3e      	ldr	r2, [pc, #248]	@ (8004068 <HAL_I2S_MspInit+0x154>)
 8003f70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f74:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f76:	4b3c      	ldr	r3, [pc, #240]	@ (8004068 <HAL_I2S_MspInit+0x154>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f7e:	613b      	str	r3, [r7, #16]
 8003f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	4b38      	ldr	r3, [pc, #224]	@ (8004068 <HAL_I2S_MspInit+0x154>)
 8003f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8a:	4a37      	ldr	r2, [pc, #220]	@ (8004068 <HAL_I2S_MspInit+0x154>)
 8003f8c:	f043 0301 	orr.w	r3, r3, #1
 8003f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f92:	4b35      	ldr	r3, [pc, #212]	@ (8004068 <HAL_I2S_MspInit+0x154>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	4b31      	ldr	r3, [pc, #196]	@ (8004068 <HAL_I2S_MspInit+0x154>)
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa6:	4a30      	ldr	r2, [pc, #192]	@ (8004068 <HAL_I2S_MspInit+0x154>)
 8003fa8:	f043 0304 	orr.w	r3, r3, #4
 8003fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fae:	4b2e      	ldr	r3, [pc, #184]	@ (8004068 <HAL_I2S_MspInit+0x154>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003fba:	2310      	movs	r3, #16
 8003fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003fca:	2306      	movs	r3, #6
 8003fcc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4825      	ldr	r0, [pc, #148]	@ (800406c <HAL_I2S_MspInit+0x158>)
 8003fd6:	f001 fad3 	bl	8005580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8003fda:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8003fde:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003fec:	2306      	movs	r3, #6
 8003fee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ff0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	481e      	ldr	r0, [pc, #120]	@ (8004070 <HAL_I2S_MspInit+0x15c>)
 8003ff8:	f001 fac2 	bl	8005580 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8003ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8004074 <HAL_I2S_MspInit+0x160>)
 8003ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8004078 <HAL_I2S_MspInit+0x164>)
 8004000:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8004002:	4b1c      	ldr	r3, [pc, #112]	@ (8004074 <HAL_I2S_MspInit+0x160>)
 8004004:	2200      	movs	r2, #0
 8004006:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004008:	4b1a      	ldr	r3, [pc, #104]	@ (8004074 <HAL_I2S_MspInit+0x160>)
 800400a:	2240      	movs	r2, #64	@ 0x40
 800400c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800400e:	4b19      	ldr	r3, [pc, #100]	@ (8004074 <HAL_I2S_MspInit+0x160>)
 8004010:	2200      	movs	r2, #0
 8004012:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004014:	4b17      	ldr	r3, [pc, #92]	@ (8004074 <HAL_I2S_MspInit+0x160>)
 8004016:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800401a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800401c:	4b15      	ldr	r3, [pc, #84]	@ (8004074 <HAL_I2S_MspInit+0x160>)
 800401e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004022:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004024:	4b13      	ldr	r3, [pc, #76]	@ (8004074 <HAL_I2S_MspInit+0x160>)
 8004026:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800402a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 800402c:	4b11      	ldr	r3, [pc, #68]	@ (8004074 <HAL_I2S_MspInit+0x160>)
 800402e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004032:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004034:	4b0f      	ldr	r3, [pc, #60]	@ (8004074 <HAL_I2S_MspInit+0x160>)
 8004036:	2200      	movs	r2, #0
 8004038:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800403a:	4b0e      	ldr	r3, [pc, #56]	@ (8004074 <HAL_I2S_MspInit+0x160>)
 800403c:	2200      	movs	r2, #0
 800403e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8004040:	480c      	ldr	r0, [pc, #48]	@ (8004074 <HAL_I2S_MspInit+0x160>)
 8004042:	f000 ff2d 	bl	8004ea0 <HAL_DMA_Init>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_I2S_MspInit+0x13c>
    {
      Error_Handler();
 800404c:	f7ff fdd6 	bl	8003bfc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a08      	ldr	r2, [pc, #32]	@ (8004074 <HAL_I2S_MspInit+0x160>)
 8004054:	639a      	str	r2, [r3, #56]	@ 0x38
 8004056:	4a07      	ldr	r2, [pc, #28]	@ (8004074 <HAL_I2S_MspInit+0x160>)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 800405c:	bf00      	nop
 800405e:	3738      	adds	r7, #56	@ 0x38
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40003c00 	.word	0x40003c00
 8004068:	40023800 	.word	0x40023800
 800406c:	40020000 	.word	0x40020000
 8004070:	40020800 	.word	0x40020800
 8004074:	20000304 	.word	0x20000304
 8004078:	40026088 	.word	0x40026088

0800407c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08c      	sub	sp, #48	@ 0x30
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004084:	f107 031c 	add.w	r3, r7, #28
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	605a      	str	r2, [r3, #4]
 800408e:	609a      	str	r2, [r3, #8]
 8004090:	60da      	str	r2, [r3, #12]
 8004092:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800409c:	d12c      	bne.n	80040f8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800409e:	2300      	movs	r3, #0
 80040a0:	61bb      	str	r3, [r7, #24]
 80040a2:	4b3f      	ldr	r3, [pc, #252]	@ (80041a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80040a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a6:	4a3e      	ldr	r2, [pc, #248]	@ (80041a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80040a8:	f043 0301 	orr.w	r3, r3, #1
 80040ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80040ae:	4b3c      	ldr	r3, [pc, #240]	@ (80041a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80040b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	61bb      	str	r3, [r7, #24]
 80040b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	4b38      	ldr	r3, [pc, #224]	@ (80041a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80040c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c2:	4a37      	ldr	r2, [pc, #220]	@ (80041a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80040ca:	4b35      	ldr	r3, [pc, #212]	@ (80041a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80040cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80040d6:	2322      	movs	r3, #34	@ 0x22
 80040d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040da:	2302      	movs	r3, #2
 80040dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040de:	2300      	movs	r3, #0
 80040e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040e2:	2300      	movs	r3, #0
 80040e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80040e6:	2301      	movs	r3, #1
 80040e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ea:	f107 031c 	add.w	r3, r7, #28
 80040ee:	4619      	mov	r1, r3
 80040f0:	482c      	ldr	r0, [pc, #176]	@ (80041a4 <HAL_TIM_Encoder_MspInit+0x128>)
 80040f2:	f001 fa45 	bl	8005580 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80040f6:	e04e      	b.n	8004196 <HAL_TIM_Encoder_MspInit+0x11a>
  else if(htim_encoder->Instance==TIM3)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a2a      	ldr	r2, [pc, #168]	@ (80041a8 <HAL_TIM_Encoder_MspInit+0x12c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d149      	bne.n	8004196 <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004102:	2300      	movs	r3, #0
 8004104:	613b      	str	r3, [r7, #16]
 8004106:	4b26      	ldr	r3, [pc, #152]	@ (80041a0 <HAL_TIM_Encoder_MspInit+0x124>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410a:	4a25      	ldr	r2, [pc, #148]	@ (80041a0 <HAL_TIM_Encoder_MspInit+0x124>)
 800410c:	f043 0302 	orr.w	r3, r3, #2
 8004110:	6413      	str	r3, [r2, #64]	@ 0x40
 8004112:	4b23      	ldr	r3, [pc, #140]	@ (80041a0 <HAL_TIM_Encoder_MspInit+0x124>)
 8004114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	4b1f      	ldr	r3, [pc, #124]	@ (80041a0 <HAL_TIM_Encoder_MspInit+0x124>)
 8004124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004126:	4a1e      	ldr	r2, [pc, #120]	@ (80041a0 <HAL_TIM_Encoder_MspInit+0x124>)
 8004128:	f043 0304 	orr.w	r3, r3, #4
 800412c:	6313      	str	r3, [r2, #48]	@ 0x30
 800412e:	4b1c      	ldr	r3, [pc, #112]	@ (80041a0 <HAL_TIM_Encoder_MspInit+0x124>)
 8004130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004132:	f003 0304 	and.w	r3, r3, #4
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800413a:	2300      	movs	r3, #0
 800413c:	60bb      	str	r3, [r7, #8]
 800413e:	4b18      	ldr	r3, [pc, #96]	@ (80041a0 <HAL_TIM_Encoder_MspInit+0x124>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004142:	4a17      	ldr	r2, [pc, #92]	@ (80041a0 <HAL_TIM_Encoder_MspInit+0x124>)
 8004144:	f043 0302 	orr.w	r3, r3, #2
 8004148:	6313      	str	r3, [r2, #48]	@ 0x30
 800414a:	4b15      	ldr	r3, [pc, #84]	@ (80041a0 <HAL_TIM_Encoder_MspInit+0x124>)
 800414c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	60bb      	str	r3, [r7, #8]
 8004154:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004156:	2340      	movs	r3, #64	@ 0x40
 8004158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800415a:	2302      	movs	r3, #2
 800415c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800415e:	2300      	movs	r3, #0
 8004160:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004162:	2300      	movs	r3, #0
 8004164:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004166:	2302      	movs	r3, #2
 8004168:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800416a:	f107 031c 	add.w	r3, r7, #28
 800416e:	4619      	mov	r1, r3
 8004170:	480e      	ldr	r0, [pc, #56]	@ (80041ac <HAL_TIM_Encoder_MspInit+0x130>)
 8004172:	f001 fa05 	bl	8005580 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004176:	2320      	movs	r3, #32
 8004178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800417a:	2302      	movs	r3, #2
 800417c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800417e:	2300      	movs	r3, #0
 8004180:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004182:	2300      	movs	r3, #0
 8004184:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004186:	2302      	movs	r3, #2
 8004188:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800418a:	f107 031c 	add.w	r3, r7, #28
 800418e:	4619      	mov	r1, r3
 8004190:	4807      	ldr	r0, [pc, #28]	@ (80041b0 <HAL_TIM_Encoder_MspInit+0x134>)
 8004192:	f001 f9f5 	bl	8005580 <HAL_GPIO_Init>
}
 8004196:	bf00      	nop
 8004198:	3730      	adds	r7, #48	@ 0x30
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	40023800 	.word	0x40023800
 80041a4:	40020000 	.word	0x40020000
 80041a8:	40000400 	.word	0x40000400
 80041ac:	40020800 	.word	0x40020800
 80041b0:	40020400 	.word	0x40020400

080041b4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a0e      	ldr	r2, [pc, #56]	@ (80041fc <HAL_TIM_Base_MspInit+0x48>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d115      	bne.n	80041f2 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80041c6:	2300      	movs	r3, #0
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004200 <HAL_TIM_Base_MspInit+0x4c>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ce:	4a0c      	ldr	r2, [pc, #48]	@ (8004200 <HAL_TIM_Base_MspInit+0x4c>)
 80041d0:	f043 0304 	orr.w	r3, r3, #4
 80041d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80041d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004200 <HAL_TIM_Base_MspInit+0x4c>)
 80041d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041da:	f003 0304 	and.w	r3, r3, #4
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80041e2:	2200      	movs	r2, #0
 80041e4:	2100      	movs	r1, #0
 80041e6:	201e      	movs	r0, #30
 80041e8:	f000 fe23 	bl	8004e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80041ec:	201e      	movs	r0, #30
 80041ee:	f000 fe3c 	bl	8004e6a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 80041f2:	bf00      	nop
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40000800 	.word	0x40000800
 8004200:	40023800 	.word	0x40023800

08004204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004208:	bf00      	nop
 800420a:	e7fd      	b.n	8004208 <NMI_Handler+0x4>

0800420c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004210:	bf00      	nop
 8004212:	e7fd      	b.n	8004210 <HardFault_Handler+0x4>

08004214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004218:	bf00      	nop
 800421a:	e7fd      	b.n	8004218 <MemManage_Handler+0x4>

0800421c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004220:	bf00      	nop
 8004222:	e7fd      	b.n	8004220 <BusFault_Handler+0x4>

08004224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004228:	bf00      	nop
 800422a:	e7fd      	b.n	8004228 <UsageFault_Handler+0x4>

0800422c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004230:	bf00      	nop
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800423a:	b480      	push	{r7}
 800423c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800423e:	bf00      	nop
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800424c:	bf00      	nop
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800425a:	f000 f8dd 	bl	8004418 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800425e:	bf00      	nop
 8004260:	bd80      	pop	{r7, pc}

08004262 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PreFilterSwitch_Pin);
 8004266:	2001      	movs	r0, #1
 8004268:	f001 fb58 	bl	800591c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800426c:	bf00      	nop
 800426e:	bd80      	pop	{r7, pc}

08004270 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OCT2_Pin);
 8004274:	2002      	movs	r0, #2
 8004276:	f001 fb51 	bl	800591c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800427a:	bf00      	nop
 800427c:	bd80      	pop	{r7, pc}

0800427e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OCT1_Pin);
 8004282:	2004      	movs	r0, #4
 8004284:	f001 fb4a 	bl	800591c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004288:	bf00      	nop
 800428a:	bd80      	pop	{r7, pc}

0800428c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OCT4_Pin);
 8004290:	2008      	movs	r0, #8
 8004292:	f001 fb43 	bl	800591c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004296:	bf00      	nop
 8004298:	bd80      	pop	{r7, pc}
	...

0800429c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80042a0:	4802      	ldr	r0, [pc, #8]	@ (80042ac <DMA1_Stream5_IRQHandler+0x10>)
 80042a2:	f000 ff03 	bl	80050ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80042a6:	bf00      	nop
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20000304 	.word	0x20000304

080042b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OCT3_Pin);
 80042b4:	2040      	movs	r0, #64	@ 0x40
 80042b6:	f001 fb31 	bl	800591c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80042ba:	bf00      	nop
 80042bc:	bd80      	pop	{r7, pc}
	...

080042c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80042c4:	4802      	ldr	r0, [pc, #8]	@ (80042d0 <TIM4_IRQHandler+0x10>)
 80042c6:	f004 f8b2 	bl	800842e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80042ca:	bf00      	nop
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	200003f4 	.word	0x200003f4

080042d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80042d8:	4802      	ldr	r0, [pc, #8]	@ (80042e4 <DMA2_Stream0_IRQHandler+0x10>)
 80042da:	f000 fee7 	bl	80050ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80042de:	bf00      	nop
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	200001a8 	.word	0x200001a8

080042e8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80042ec:	4802      	ldr	r0, [pc, #8]	@ (80042f8 <DMA2_Stream2_IRQHandler+0x10>)
 80042ee:	f000 fedd 	bl	80050ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80042f2:	bf00      	nop
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20000208 	.word	0x20000208

080042fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004300:	4b06      	ldr	r3, [pc, #24]	@ (800431c <SystemInit+0x20>)
 8004302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004306:	4a05      	ldr	r2, [pc, #20]	@ (800431c <SystemInit+0x20>)
 8004308:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800430c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004310:	bf00      	nop
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	e000ed00 	.word	0xe000ed00

08004320 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004320:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004358 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004324:	f7ff ffea 	bl	80042fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004328:	480c      	ldr	r0, [pc, #48]	@ (800435c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800432a:	490d      	ldr	r1, [pc, #52]	@ (8004360 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800432c:	4a0d      	ldr	r2, [pc, #52]	@ (8004364 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800432e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004330:	e002      	b.n	8004338 <LoopCopyDataInit>

08004332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004336:	3304      	adds	r3, #4

08004338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800433a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800433c:	d3f9      	bcc.n	8004332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800433e:	4a0a      	ldr	r2, [pc, #40]	@ (8004368 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004340:	4c0a      	ldr	r4, [pc, #40]	@ (800436c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004344:	e001      	b.n	800434a <LoopFillZerobss>

08004346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004348:	3204      	adds	r2, #4

0800434a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800434a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800434c:	d3fb      	bcc.n	8004346 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800434e:	f004 fc57 	bl	8008c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004352:	f7fe ff27 	bl	80031a4 <main>
  bx  lr    
 8004356:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004358:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800435c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004360:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8004364:	0800a560 	.word	0x0800a560
  ldr r2, =_sbss
 8004368:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 800436c:	20000710 	.word	0x20000710

08004370 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004370:	e7fe      	b.n	8004370 <ADC_IRQHandler>
	...

08004374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004378:	4b0e      	ldr	r3, [pc, #56]	@ (80043b4 <HAL_Init+0x40>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a0d      	ldr	r2, [pc, #52]	@ (80043b4 <HAL_Init+0x40>)
 800437e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004382:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004384:	4b0b      	ldr	r3, [pc, #44]	@ (80043b4 <HAL_Init+0x40>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a0a      	ldr	r2, [pc, #40]	@ (80043b4 <HAL_Init+0x40>)
 800438a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800438e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004390:	4b08      	ldr	r3, [pc, #32]	@ (80043b4 <HAL_Init+0x40>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a07      	ldr	r2, [pc, #28]	@ (80043b4 <HAL_Init+0x40>)
 8004396:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800439a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800439c:	2003      	movs	r0, #3
 800439e:	f000 fd3d 	bl	8004e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043a2:	200f      	movs	r0, #15
 80043a4:	f000 f808 	bl	80043b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043a8:	f7ff fc2e 	bl	8003c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	40023c00 	.word	0x40023c00

080043b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043c0:	4b12      	ldr	r3, [pc, #72]	@ (800440c <HAL_InitTick+0x54>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	4b12      	ldr	r3, [pc, #72]	@ (8004410 <HAL_InitTick+0x58>)
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	4619      	mov	r1, r3
 80043ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80043d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fd55 	bl	8004e86 <HAL_SYSTICK_Config>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e00e      	b.n	8004404 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b0f      	cmp	r3, #15
 80043ea:	d80a      	bhi.n	8004402 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043ec:	2200      	movs	r2, #0
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	f04f 30ff 	mov.w	r0, #4294967295
 80043f4:	f000 fd1d 	bl	8004e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043f8:	4a06      	ldr	r2, [pc, #24]	@ (8004414 <HAL_InitTick+0x5c>)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	e000      	b.n	8004404 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
}
 8004404:	4618      	mov	r0, r3
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	20000044 	.word	0x20000044
 8004410:	2000004c 	.word	0x2000004c
 8004414:	20000048 	.word	0x20000048

08004418 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800441c:	4b06      	ldr	r3, [pc, #24]	@ (8004438 <HAL_IncTick+0x20>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	461a      	mov	r2, r3
 8004422:	4b06      	ldr	r3, [pc, #24]	@ (800443c <HAL_IncTick+0x24>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4413      	add	r3, r2
 8004428:	4a04      	ldr	r2, [pc, #16]	@ (800443c <HAL_IncTick+0x24>)
 800442a:	6013      	str	r3, [r2, #0]
}
 800442c:	bf00      	nop
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	2000004c 	.word	0x2000004c
 800443c:	200005d4 	.word	0x200005d4

08004440 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  return uwTick;
 8004444:	4b03      	ldr	r3, [pc, #12]	@ (8004454 <HAL_GetTick+0x14>)
 8004446:	681b      	ldr	r3, [r3, #0]
}
 8004448:	4618      	mov	r0, r3
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	200005d4 	.word	0x200005d4

08004458 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004460:	2300      	movs	r3, #0
 8004462:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e033      	b.n	80044d6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004472:	2b00      	cmp	r3, #0
 8004474:	d109      	bne.n	800448a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7ff fbee 	bl	8003c58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448e:	f003 0310 	and.w	r3, r3, #16
 8004492:	2b00      	cmp	r3, #0
 8004494:	d118      	bne.n	80044c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800449e:	f023 0302 	bic.w	r3, r3, #2
 80044a2:	f043 0202 	orr.w	r2, r3, #2
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fa68 	bl	8004980 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ba:	f023 0303 	bic.w	r3, r3, #3
 80044be:	f043 0201 	orr.w	r2, r3, #1
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80044c6:	e001      	b.n	80044cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d101      	bne.n	80044fe <HAL_ADC_Start_DMA+0x1e>
 80044fa:	2302      	movs	r3, #2
 80044fc:	e0e9      	b.n	80046d2 <HAL_ADC_Start_DMA+0x1f2>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b01      	cmp	r3, #1
 8004512:	d018      	beq.n	8004546 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0201 	orr.w	r2, r2, #1
 8004522:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004524:	4b6d      	ldr	r3, [pc, #436]	@ (80046dc <HAL_ADC_Start_DMA+0x1fc>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a6d      	ldr	r2, [pc, #436]	@ (80046e0 <HAL_ADC_Start_DMA+0x200>)
 800452a:	fba2 2303 	umull	r2, r3, r2, r3
 800452e:	0c9a      	lsrs	r2, r3, #18
 8004530:	4613      	mov	r3, r2
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	4413      	add	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004538:	e002      	b.n	8004540 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	3b01      	subs	r3, #1
 800453e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f9      	bne.n	800453a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004550:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004554:	d107      	bne.n	8004566 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004564:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b01      	cmp	r3, #1
 8004572:	f040 80a1 	bne.w	80046b8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800457e:	f023 0301 	bic.w	r3, r3, #1
 8004582:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004594:	2b00      	cmp	r3, #0
 8004596:	d007      	beq.n	80045a8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80045a0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045b4:	d106      	bne.n	80045c4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ba:	f023 0206 	bic.w	r2, r3, #6
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	645a      	str	r2, [r3, #68]	@ 0x44
 80045c2:	e002      	b.n	80045ca <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045d2:	4b44      	ldr	r3, [pc, #272]	@ (80046e4 <HAL_ADC_Start_DMA+0x204>)
 80045d4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045da:	4a43      	ldr	r2, [pc, #268]	@ (80046e8 <HAL_ADC_Start_DMA+0x208>)
 80045dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e2:	4a42      	ldr	r2, [pc, #264]	@ (80046ec <HAL_ADC_Start_DMA+0x20c>)
 80045e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ea:	4a41      	ldr	r2, [pc, #260]	@ (80046f0 <HAL_ADC_Start_DMA+0x210>)
 80045ec:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80045f6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004606:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004616:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	334c      	adds	r3, #76	@ 0x4c
 8004622:	4619      	mov	r1, r3
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f000 fce8 	bl	8004ffc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f003 031f 	and.w	r3, r3, #31
 8004634:	2b00      	cmp	r3, #0
 8004636:	d12a      	bne.n	800468e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a2d      	ldr	r2, [pc, #180]	@ (80046f4 <HAL_ADC_Start_DMA+0x214>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d015      	beq.n	800466e <HAL_ADC_Start_DMA+0x18e>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a2c      	ldr	r2, [pc, #176]	@ (80046f8 <HAL_ADC_Start_DMA+0x218>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d105      	bne.n	8004658 <HAL_ADC_Start_DMA+0x178>
 800464c:	4b25      	ldr	r3, [pc, #148]	@ (80046e4 <HAL_ADC_Start_DMA+0x204>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f003 031f 	and.w	r3, r3, #31
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a27      	ldr	r2, [pc, #156]	@ (80046fc <HAL_ADC_Start_DMA+0x21c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d136      	bne.n	80046d0 <HAL_ADC_Start_DMA+0x1f0>
 8004662:	4b20      	ldr	r3, [pc, #128]	@ (80046e4 <HAL_ADC_Start_DMA+0x204>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f003 0310 	and.w	r3, r3, #16
 800466a:	2b00      	cmp	r3, #0
 800466c:	d130      	bne.n	80046d0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d129      	bne.n	80046d0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800468a:	609a      	str	r2, [r3, #8]
 800468c:	e020      	b.n	80046d0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a18      	ldr	r2, [pc, #96]	@ (80046f4 <HAL_ADC_Start_DMA+0x214>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d11b      	bne.n	80046d0 <HAL_ADC_Start_DMA+0x1f0>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d114      	bne.n	80046d0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80046b4:	609a      	str	r2, [r3, #8]
 80046b6:	e00b      	b.n	80046d0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046bc:	f043 0210 	orr.w	r2, r3, #16
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046c8:	f043 0201 	orr.w	r2, r3, #1
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	20000044 	.word	0x20000044
 80046e0:	431bde83 	.word	0x431bde83
 80046e4:	40012300 	.word	0x40012300
 80046e8:	08004b79 	.word	0x08004b79
 80046ec:	08004c33 	.word	0x08004c33
 80046f0:	08004c4f 	.word	0x08004c4f
 80046f4:	40012000 	.word	0x40012000
 80046f8:	40012100 	.word	0x40012100
 80046fc:	40012200 	.word	0x40012200

08004700 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_ADC_ConfigChannel+0x1c>
 8004754:	2302      	movs	r3, #2
 8004756:	e105      	b.n	8004964 <HAL_ADC_ConfigChannel+0x228>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b09      	cmp	r3, #9
 8004766:	d925      	bls.n	80047b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68d9      	ldr	r1, [r3, #12]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	b29b      	uxth	r3, r3
 8004774:	461a      	mov	r2, r3
 8004776:	4613      	mov	r3, r2
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	4413      	add	r3, r2
 800477c:	3b1e      	subs	r3, #30
 800477e:	2207      	movs	r2, #7
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	43da      	mvns	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	400a      	ands	r2, r1
 800478c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68d9      	ldr	r1, [r3, #12]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	b29b      	uxth	r3, r3
 800479e:	4618      	mov	r0, r3
 80047a0:	4603      	mov	r3, r0
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	4403      	add	r3, r0
 80047a6:	3b1e      	subs	r3, #30
 80047a8:	409a      	lsls	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	60da      	str	r2, [r3, #12]
 80047b2:	e022      	b.n	80047fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6919      	ldr	r1, [r3, #16]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	b29b      	uxth	r3, r3
 80047c0:	461a      	mov	r2, r3
 80047c2:	4613      	mov	r3, r2
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	4413      	add	r3, r2
 80047c8:	2207      	movs	r2, #7
 80047ca:	fa02 f303 	lsl.w	r3, r2, r3
 80047ce:	43da      	mvns	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	400a      	ands	r2, r1
 80047d6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6919      	ldr	r1, [r3, #16]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	4618      	mov	r0, r3
 80047ea:	4603      	mov	r3, r0
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	4403      	add	r3, r0
 80047f0:	409a      	lsls	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	2b06      	cmp	r3, #6
 8004800:	d824      	bhi.n	800484c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	4613      	mov	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	3b05      	subs	r3, #5
 8004814:	221f      	movs	r2, #31
 8004816:	fa02 f303 	lsl.w	r3, r2, r3
 800481a:	43da      	mvns	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	400a      	ands	r2, r1
 8004822:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	b29b      	uxth	r3, r3
 8004830:	4618      	mov	r0, r3
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	4613      	mov	r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4413      	add	r3, r2
 800483c:	3b05      	subs	r3, #5
 800483e:	fa00 f203 	lsl.w	r2, r0, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	635a      	str	r2, [r3, #52]	@ 0x34
 800484a:	e04c      	b.n	80048e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b0c      	cmp	r3, #12
 8004852:	d824      	bhi.n	800489e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	4613      	mov	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4413      	add	r3, r2
 8004864:	3b23      	subs	r3, #35	@ 0x23
 8004866:	221f      	movs	r2, #31
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	43da      	mvns	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	400a      	ands	r2, r1
 8004874:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	b29b      	uxth	r3, r3
 8004882:	4618      	mov	r0, r3
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	4613      	mov	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	3b23      	subs	r3, #35	@ 0x23
 8004890:	fa00 f203 	lsl.w	r2, r0, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	631a      	str	r2, [r3, #48]	@ 0x30
 800489c:	e023      	b.n	80048e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	3b41      	subs	r3, #65	@ 0x41
 80048b0:	221f      	movs	r2, #31
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	43da      	mvns	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	400a      	ands	r2, r1
 80048be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	4618      	mov	r0, r3
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	3b41      	subs	r3, #65	@ 0x41
 80048da:	fa00 f203 	lsl.w	r2, r0, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048e6:	4b22      	ldr	r3, [pc, #136]	@ (8004970 <HAL_ADC_ConfigChannel+0x234>)
 80048e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a21      	ldr	r2, [pc, #132]	@ (8004974 <HAL_ADC_ConfigChannel+0x238>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d109      	bne.n	8004908 <HAL_ADC_ConfigChannel+0x1cc>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b12      	cmp	r3, #18
 80048fa:	d105      	bne.n	8004908 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a19      	ldr	r2, [pc, #100]	@ (8004974 <HAL_ADC_ConfigChannel+0x238>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d123      	bne.n	800495a <HAL_ADC_ConfigChannel+0x21e>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b10      	cmp	r3, #16
 8004918:	d003      	beq.n	8004922 <HAL_ADC_ConfigChannel+0x1e6>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b11      	cmp	r3, #17
 8004920:	d11b      	bne.n	800495a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b10      	cmp	r3, #16
 8004934:	d111      	bne.n	800495a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004936:	4b10      	ldr	r3, [pc, #64]	@ (8004978 <HAL_ADC_ConfigChannel+0x23c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a10      	ldr	r2, [pc, #64]	@ (800497c <HAL_ADC_ConfigChannel+0x240>)
 800493c:	fba2 2303 	umull	r2, r3, r2, r3
 8004940:	0c9a      	lsrs	r2, r3, #18
 8004942:	4613      	mov	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800494c:	e002      	b.n	8004954 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	3b01      	subs	r3, #1
 8004952:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1f9      	bne.n	800494e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	40012300 	.word	0x40012300
 8004974:	40012000 	.word	0x40012000
 8004978:	20000044 	.word	0x20000044
 800497c:	431bde83 	.word	0x431bde83

08004980 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004988:	4b79      	ldr	r3, [pc, #484]	@ (8004b70 <ADC_Init+0x1f0>)
 800498a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	431a      	orrs	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6859      	ldr	r1, [r3, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	021a      	lsls	r2, r3, #8
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80049d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6859      	ldr	r1, [r3, #4]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689a      	ldr	r2, [r3, #8]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6899      	ldr	r1, [r3, #8]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a12:	4a58      	ldr	r2, [pc, #352]	@ (8004b74 <ADC_Init+0x1f4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d022      	beq.n	8004a5e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004a26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6899      	ldr	r1, [r3, #8]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004a48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6899      	ldr	r1, [r3, #8]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	609a      	str	r2, [r3, #8]
 8004a5c:	e00f      	b.n	8004a7e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004a6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004a7c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0202 	bic.w	r2, r2, #2
 8004a8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6899      	ldr	r1, [r3, #8]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	7e1b      	ldrb	r3, [r3, #24]
 8004a98:	005a      	lsls	r2, r3, #1
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d01b      	beq.n	8004ae4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004aba:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004aca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6859      	ldr	r1, [r3, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	035a      	lsls	r2, r3, #13
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	605a      	str	r2, [r3, #4]
 8004ae2:	e007      	b.n	8004af4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004af2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004b02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	051a      	lsls	r2, r3, #20
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004b28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6899      	ldr	r1, [r3, #8]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004b36:	025a      	lsls	r2, r3, #9
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6899      	ldr	r1, [r3, #8]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	029a      	lsls	r2, r3, #10
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	609a      	str	r2, [r3, #8]
}
 8004b64:	bf00      	nop
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	40012300 	.word	0x40012300
 8004b74:	0f000001 	.word	0x0f000001

08004b78 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b84:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d13c      	bne.n	8004c0c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b96:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d12b      	bne.n	8004c04 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d127      	bne.n	8004c04 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bba:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d006      	beq.n	8004bd0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d119      	bne.n	8004c04 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 0220 	bic.w	r2, r2, #32
 8004bde:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d105      	bne.n	8004c04 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfc:	f043 0201 	orr.w	r2, r3, #1
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f7ff fd7b 	bl	8004700 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004c0a:	e00e      	b.n	8004c2a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c10:	f003 0310 	and.w	r3, r3, #16
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f7ff fd85 	bl	8004728 <HAL_ADC_ErrorCallback>
}
 8004c1e:	e004      	b.n	8004c2a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	4798      	blx	r3
}
 8004c2a:	bf00      	nop
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b084      	sub	sp, #16
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f7ff fd67 	bl	8004714 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c46:	bf00      	nop
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b084      	sub	sp, #16
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c5a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2240      	movs	r2, #64	@ 0x40
 8004c60:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c66:	f043 0204 	orr.w	r2, r3, #4
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f7ff fd5a 	bl	8004728 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c74:	bf00      	nop
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004c98:	4013      	ands	r3, r2
 8004c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ca4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cae:	4a04      	ldr	r2, [pc, #16]	@ (8004cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	60d3      	str	r3, [r2, #12]
}
 8004cb4:	bf00      	nop
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	e000ed00 	.word	0xe000ed00

08004cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cc8:	4b04      	ldr	r3, [pc, #16]	@ (8004cdc <__NVIC_GetPriorityGrouping+0x18>)
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	0a1b      	lsrs	r3, r3, #8
 8004cce:	f003 0307 	and.w	r3, r3, #7
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	e000ed00 	.word	0xe000ed00

08004ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	db0b      	blt.n	8004d0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cf2:	79fb      	ldrb	r3, [r7, #7]
 8004cf4:	f003 021f 	and.w	r2, r3, #31
 8004cf8:	4907      	ldr	r1, [pc, #28]	@ (8004d18 <__NVIC_EnableIRQ+0x38>)
 8004cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cfe:	095b      	lsrs	r3, r3, #5
 8004d00:	2001      	movs	r0, #1
 8004d02:	fa00 f202 	lsl.w	r2, r0, r2
 8004d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	e000e100 	.word	0xe000e100

08004d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	4603      	mov	r3, r0
 8004d24:	6039      	str	r1, [r7, #0]
 8004d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	db0a      	blt.n	8004d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	490c      	ldr	r1, [pc, #48]	@ (8004d68 <__NVIC_SetPriority+0x4c>)
 8004d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d3a:	0112      	lsls	r2, r2, #4
 8004d3c:	b2d2      	uxtb	r2, r2
 8004d3e:	440b      	add	r3, r1
 8004d40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d44:	e00a      	b.n	8004d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	4908      	ldr	r1, [pc, #32]	@ (8004d6c <__NVIC_SetPriority+0x50>)
 8004d4c:	79fb      	ldrb	r3, [r7, #7]
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	3b04      	subs	r3, #4
 8004d54:	0112      	lsls	r2, r2, #4
 8004d56:	b2d2      	uxtb	r2, r2
 8004d58:	440b      	add	r3, r1
 8004d5a:	761a      	strb	r2, [r3, #24]
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	e000e100 	.word	0xe000e100
 8004d6c:	e000ed00 	.word	0xe000ed00

08004d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b089      	sub	sp, #36	@ 0x24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	f1c3 0307 	rsb	r3, r3, #7
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	bf28      	it	cs
 8004d8e:	2304      	movcs	r3, #4
 8004d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	3304      	adds	r3, #4
 8004d96:	2b06      	cmp	r3, #6
 8004d98:	d902      	bls.n	8004da0 <NVIC_EncodePriority+0x30>
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	3b03      	subs	r3, #3
 8004d9e:	e000      	b.n	8004da2 <NVIC_EncodePriority+0x32>
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004da4:	f04f 32ff 	mov.w	r2, #4294967295
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	43da      	mvns	r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	401a      	ands	r2, r3
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004db8:	f04f 31ff 	mov.w	r1, #4294967295
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc2:	43d9      	mvns	r1, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dc8:	4313      	orrs	r3, r2
         );
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3724      	adds	r7, #36	@ 0x24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004de8:	d301      	bcc.n	8004dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004dea:	2301      	movs	r3, #1
 8004dec:	e00f      	b.n	8004e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004dee:	4a0a      	ldr	r2, [pc, #40]	@ (8004e18 <SysTick_Config+0x40>)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004df6:	210f      	movs	r1, #15
 8004df8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dfc:	f7ff ff8e 	bl	8004d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e00:	4b05      	ldr	r3, [pc, #20]	@ (8004e18 <SysTick_Config+0x40>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e06:	4b04      	ldr	r3, [pc, #16]	@ (8004e18 <SysTick_Config+0x40>)
 8004e08:	2207      	movs	r2, #7
 8004e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	e000e010 	.word	0xe000e010

08004e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7ff ff29 	bl	8004c7c <__NVIC_SetPriorityGrouping>
}
 8004e2a:	bf00      	nop
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b086      	sub	sp, #24
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	4603      	mov	r3, r0
 8004e3a:	60b9      	str	r1, [r7, #8]
 8004e3c:	607a      	str	r2, [r7, #4]
 8004e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e44:	f7ff ff3e 	bl	8004cc4 <__NVIC_GetPriorityGrouping>
 8004e48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	68b9      	ldr	r1, [r7, #8]
 8004e4e:	6978      	ldr	r0, [r7, #20]
 8004e50:	f7ff ff8e 	bl	8004d70 <NVIC_EncodePriority>
 8004e54:	4602      	mov	r2, r0
 8004e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e5a:	4611      	mov	r1, r2
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7ff ff5d 	bl	8004d1c <__NVIC_SetPriority>
}
 8004e62:	bf00      	nop
 8004e64:	3718      	adds	r7, #24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b082      	sub	sp, #8
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	4603      	mov	r3, r0
 8004e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7ff ff31 	bl	8004ce0 <__NVIC_EnableIRQ>
}
 8004e7e:	bf00      	nop
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b082      	sub	sp, #8
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7ff ffa2 	bl	8004dd8 <SysTick_Config>
 8004e94:	4603      	mov	r3, r0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
	...

08004ea0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004eac:	f7ff fac8 	bl	8004440 <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e099      	b.n	8004ff0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 0201 	bic.w	r2, r2, #1
 8004eda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004edc:	e00f      	b.n	8004efe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ede:	f7ff faaf 	bl	8004440 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b05      	cmp	r3, #5
 8004eea:	d908      	bls.n	8004efe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2203      	movs	r2, #3
 8004ef6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e078      	b.n	8004ff0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1e8      	bne.n	8004ede <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	4b38      	ldr	r3, [pc, #224]	@ (8004ff8 <HAL_DMA_Init+0x158>)
 8004f18:	4013      	ands	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f54:	2b04      	cmp	r3, #4
 8004f56:	d107      	bne.n	8004f68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f60:	4313      	orrs	r3, r2
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f023 0307 	bic.w	r3, r3, #7
 8004f7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d117      	bne.n	8004fc2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00e      	beq.n	8004fc2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 fa6f 	bl	8005488 <DMA_CheckFifoParam>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d008      	beq.n	8004fc2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2240      	movs	r2, #64	@ 0x40
 8004fb4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e016      	b.n	8004ff0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fa26 	bl	800541c <DMA_CalcBaseAndBitshift>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fd8:	223f      	movs	r2, #63	@ 0x3f
 8004fda:	409a      	lsls	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	f010803f 	.word	0xf010803f

08004ffc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
 8005008:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800500a:	2300      	movs	r3, #0
 800500c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005012:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800501a:	2b01      	cmp	r3, #1
 800501c:	d101      	bne.n	8005022 <HAL_DMA_Start_IT+0x26>
 800501e:	2302      	movs	r3, #2
 8005020:	e040      	b.n	80050a4 <HAL_DMA_Start_IT+0xa8>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b01      	cmp	r3, #1
 8005034:	d12f      	bne.n	8005096 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2202      	movs	r2, #2
 800503a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	68b9      	ldr	r1, [r7, #8]
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f000 f9b8 	bl	80053c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005054:	223f      	movs	r2, #63	@ 0x3f
 8005056:	409a      	lsls	r2, r3
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0216 	orr.w	r2, r2, #22
 800506a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005070:	2b00      	cmp	r3, #0
 8005072:	d007      	beq.n	8005084 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f042 0208 	orr.w	r2, r2, #8
 8005082:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0201 	orr.w	r2, r2, #1
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	e005      	b.n	80050a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800509e:	2302      	movs	r3, #2
 80050a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80050a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3718      	adds	r7, #24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80050b8:	4b8e      	ldr	r3, [pc, #568]	@ (80052f4 <HAL_DMA_IRQHandler+0x248>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a8e      	ldr	r2, [pc, #568]	@ (80052f8 <HAL_DMA_IRQHandler+0x24c>)
 80050be:	fba2 2303 	umull	r2, r3, r2, r3
 80050c2:	0a9b      	lsrs	r3, r3, #10
 80050c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050d6:	2208      	movs	r2, #8
 80050d8:	409a      	lsls	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4013      	ands	r3, r2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d01a      	beq.n	8005118 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d013      	beq.n	8005118 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 0204 	bic.w	r2, r2, #4
 80050fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005104:	2208      	movs	r2, #8
 8005106:	409a      	lsls	r2, r3
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005110:	f043 0201 	orr.w	r2, r3, #1
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800511c:	2201      	movs	r2, #1
 800511e:	409a      	lsls	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4013      	ands	r3, r2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d012      	beq.n	800514e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00b      	beq.n	800514e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800513a:	2201      	movs	r2, #1
 800513c:	409a      	lsls	r2, r3
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005146:	f043 0202 	orr.w	r2, r3, #2
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005152:	2204      	movs	r2, #4
 8005154:	409a      	lsls	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4013      	ands	r3, r2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d012      	beq.n	8005184 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00b      	beq.n	8005184 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005170:	2204      	movs	r2, #4
 8005172:	409a      	lsls	r2, r3
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800517c:	f043 0204 	orr.w	r2, r3, #4
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005188:	2210      	movs	r2, #16
 800518a:	409a      	lsls	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4013      	ands	r3, r2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d043      	beq.n	800521c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d03c      	beq.n	800521c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051a6:	2210      	movs	r2, #16
 80051a8:	409a      	lsls	r2, r3
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d018      	beq.n	80051ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d108      	bne.n	80051dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d024      	beq.n	800521c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	4798      	blx	r3
 80051da:	e01f      	b.n	800521c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d01b      	beq.n	800521c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	4798      	blx	r3
 80051ec:	e016      	b.n	800521c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d107      	bne.n	800520c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0208 	bic.w	r2, r2, #8
 800520a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005210:	2b00      	cmp	r3, #0
 8005212:	d003      	beq.n	800521c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005220:	2220      	movs	r2, #32
 8005222:	409a      	lsls	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4013      	ands	r3, r2
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 808f 	beq.w	800534c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0310 	and.w	r3, r3, #16
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 8087 	beq.w	800534c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005242:	2220      	movs	r2, #32
 8005244:	409a      	lsls	r2, r3
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b05      	cmp	r3, #5
 8005254:	d136      	bne.n	80052c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0216 	bic.w	r2, r2, #22
 8005264:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	695a      	ldr	r2, [r3, #20]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005274:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527a:	2b00      	cmp	r3, #0
 800527c:	d103      	bne.n	8005286 <HAL_DMA_IRQHandler+0x1da>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005282:	2b00      	cmp	r3, #0
 8005284:	d007      	beq.n	8005296 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0208 	bic.w	r2, r2, #8
 8005294:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800529a:	223f      	movs	r2, #63	@ 0x3f
 800529c:	409a      	lsls	r2, r3
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d07e      	beq.n	80053b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	4798      	blx	r3
        }
        return;
 80052c2:	e079      	b.n	80053b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d01d      	beq.n	800530e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10d      	bne.n	80052fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d031      	beq.n	800534c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	4798      	blx	r3
 80052f0:	e02c      	b.n	800534c <HAL_DMA_IRQHandler+0x2a0>
 80052f2:	bf00      	nop
 80052f4:	20000044 	.word	0x20000044
 80052f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005300:	2b00      	cmp	r3, #0
 8005302:	d023      	beq.n	800534c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	4798      	blx	r3
 800530c:	e01e      	b.n	800534c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10f      	bne.n	800533c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0210 	bic.w	r2, r2, #16
 800532a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005340:	2b00      	cmp	r3, #0
 8005342:	d003      	beq.n	800534c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005350:	2b00      	cmp	r3, #0
 8005352:	d032      	beq.n	80053ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b00      	cmp	r3, #0
 800535e:	d022      	beq.n	80053a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2205      	movs	r2, #5
 8005364:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 0201 	bic.w	r2, r2, #1
 8005376:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	3301      	adds	r3, #1
 800537c:	60bb      	str	r3, [r7, #8]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	429a      	cmp	r2, r3
 8005382:	d307      	bcc.n	8005394 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1f2      	bne.n	8005378 <HAL_DMA_IRQHandler+0x2cc>
 8005392:	e000      	b.n	8005396 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005394:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d005      	beq.n	80053ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	4798      	blx	r3
 80053b6:	e000      	b.n	80053ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80053b8:	bf00      	nop
    }
  }
}
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
 80053cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80053dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	2b40      	cmp	r3, #64	@ 0x40
 80053ec:	d108      	bne.n	8005400 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80053fe:	e007      	b.n	8005410 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	60da      	str	r2, [r3, #12]
}
 8005410:	bf00      	nop
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	b2db      	uxtb	r3, r3
 800542a:	3b10      	subs	r3, #16
 800542c:	4a14      	ldr	r2, [pc, #80]	@ (8005480 <DMA_CalcBaseAndBitshift+0x64>)
 800542e:	fba2 2303 	umull	r2, r3, r2, r3
 8005432:	091b      	lsrs	r3, r3, #4
 8005434:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005436:	4a13      	ldr	r2, [pc, #76]	@ (8005484 <DMA_CalcBaseAndBitshift+0x68>)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4413      	add	r3, r2
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2b03      	cmp	r3, #3
 8005448:	d909      	bls.n	800545e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005452:	f023 0303 	bic.w	r3, r3, #3
 8005456:	1d1a      	adds	r2, r3, #4
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	659a      	str	r2, [r3, #88]	@ 0x58
 800545c:	e007      	b.n	800546e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005466:	f023 0303 	bic.w	r3, r3, #3
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005472:	4618      	mov	r0, r3
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	aaaaaaab 	.word	0xaaaaaaab
 8005484:	0800a154 	.word	0x0800a154

08005488 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005490:	2300      	movs	r3, #0
 8005492:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005498:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d11f      	bne.n	80054e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	2b03      	cmp	r3, #3
 80054a6:	d856      	bhi.n	8005556 <DMA_CheckFifoParam+0xce>
 80054a8:	a201      	add	r2, pc, #4	@ (adr r2, 80054b0 <DMA_CheckFifoParam+0x28>)
 80054aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ae:	bf00      	nop
 80054b0:	080054c1 	.word	0x080054c1
 80054b4:	080054d3 	.word	0x080054d3
 80054b8:	080054c1 	.word	0x080054c1
 80054bc:	08005557 	.word	0x08005557
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d046      	beq.n	800555a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054d0:	e043      	b.n	800555a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80054da:	d140      	bne.n	800555e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054e0:	e03d      	b.n	800555e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054ea:	d121      	bne.n	8005530 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d837      	bhi.n	8005562 <DMA_CheckFifoParam+0xda>
 80054f2:	a201      	add	r2, pc, #4	@ (adr r2, 80054f8 <DMA_CheckFifoParam+0x70>)
 80054f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f8:	08005509 	.word	0x08005509
 80054fc:	0800550f 	.word	0x0800550f
 8005500:	08005509 	.word	0x08005509
 8005504:	08005521 	.word	0x08005521
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	73fb      	strb	r3, [r7, #15]
      break;
 800550c:	e030      	b.n	8005570 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005512:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d025      	beq.n	8005566 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800551e:	e022      	b.n	8005566 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005524:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005528:	d11f      	bne.n	800556a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800552e:	e01c      	b.n	800556a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	2b02      	cmp	r3, #2
 8005534:	d903      	bls.n	800553e <DMA_CheckFifoParam+0xb6>
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b03      	cmp	r3, #3
 800553a:	d003      	beq.n	8005544 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800553c:	e018      	b.n	8005570 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	73fb      	strb	r3, [r7, #15]
      break;
 8005542:	e015      	b.n	8005570 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005548:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00e      	beq.n	800556e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	73fb      	strb	r3, [r7, #15]
      break;
 8005554:	e00b      	b.n	800556e <DMA_CheckFifoParam+0xe6>
      break;
 8005556:	bf00      	nop
 8005558:	e00a      	b.n	8005570 <DMA_CheckFifoParam+0xe8>
      break;
 800555a:	bf00      	nop
 800555c:	e008      	b.n	8005570 <DMA_CheckFifoParam+0xe8>
      break;
 800555e:	bf00      	nop
 8005560:	e006      	b.n	8005570 <DMA_CheckFifoParam+0xe8>
      break;
 8005562:	bf00      	nop
 8005564:	e004      	b.n	8005570 <DMA_CheckFifoParam+0xe8>
      break;
 8005566:	bf00      	nop
 8005568:	e002      	b.n	8005570 <DMA_CheckFifoParam+0xe8>
      break;   
 800556a:	bf00      	nop
 800556c:	e000      	b.n	8005570 <DMA_CheckFifoParam+0xe8>
      break;
 800556e:	bf00      	nop
    }
  } 
  
  return status; 
 8005570:	7bfb      	ldrb	r3, [r7, #15]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop

08005580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005580:	b480      	push	{r7}
 8005582:	b089      	sub	sp, #36	@ 0x24
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800558a:	2300      	movs	r3, #0
 800558c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800558e:	2300      	movs	r3, #0
 8005590:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005592:	2300      	movs	r3, #0
 8005594:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005596:	2300      	movs	r3, #0
 8005598:	61fb      	str	r3, [r7, #28]
 800559a:	e16b      	b.n	8005874 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800559c:	2201      	movs	r2, #1
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	fa02 f303 	lsl.w	r3, r2, r3
 80055a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	4013      	ands	r3, r2
 80055ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	f040 815a 	bne.w	800586e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f003 0303 	and.w	r3, r3, #3
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d005      	beq.n	80055d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d130      	bne.n	8005634 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	2203      	movs	r2, #3
 80055de:	fa02 f303 	lsl.w	r3, r2, r3
 80055e2:	43db      	mvns	r3, r3
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	4013      	ands	r3, r2
 80055e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68da      	ldr	r2, [r3, #12]
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	005b      	lsls	r3, r3, #1
 80055f2:	fa02 f303 	lsl.w	r3, r2, r3
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005608:	2201      	movs	r2, #1
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	fa02 f303 	lsl.w	r3, r2, r3
 8005610:	43db      	mvns	r3, r3
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	4013      	ands	r3, r2
 8005616:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	091b      	lsrs	r3, r3, #4
 800561e:	f003 0201 	and.w	r2, r3, #1
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	fa02 f303 	lsl.w	r3, r2, r3
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	4313      	orrs	r3, r2
 800562c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f003 0303 	and.w	r3, r3, #3
 800563c:	2b03      	cmp	r3, #3
 800563e:	d017      	beq.n	8005670 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	2203      	movs	r2, #3
 800564c:	fa02 f303 	lsl.w	r3, r2, r3
 8005650:	43db      	mvns	r3, r3
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	4013      	ands	r3, r2
 8005656:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	005b      	lsls	r3, r3, #1
 8005660:	fa02 f303 	lsl.w	r3, r2, r3
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	4313      	orrs	r3, r2
 8005668:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f003 0303 	and.w	r3, r3, #3
 8005678:	2b02      	cmp	r3, #2
 800567a:	d123      	bne.n	80056c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	08da      	lsrs	r2, r3, #3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	3208      	adds	r2, #8
 8005684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005688:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	220f      	movs	r2, #15
 8005694:	fa02 f303 	lsl.w	r3, r2, r3
 8005698:	43db      	mvns	r3, r3
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	4013      	ands	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	691a      	ldr	r2, [r3, #16]
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	f003 0307 	and.w	r3, r3, #7
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	fa02 f303 	lsl.w	r3, r2, r3
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	08da      	lsrs	r2, r3, #3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	3208      	adds	r2, #8
 80056be:	69b9      	ldr	r1, [r7, #24]
 80056c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	005b      	lsls	r3, r3, #1
 80056ce:	2203      	movs	r2, #3
 80056d0:	fa02 f303 	lsl.w	r3, r2, r3
 80056d4:	43db      	mvns	r3, r3
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	4013      	ands	r3, r2
 80056da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f003 0203 	and.w	r2, r3, #3
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	005b      	lsls	r3, r3, #1
 80056e8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005700:	2b00      	cmp	r3, #0
 8005702:	f000 80b4 	beq.w	800586e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005706:	2300      	movs	r3, #0
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	4b60      	ldr	r3, [pc, #384]	@ (800588c <HAL_GPIO_Init+0x30c>)
 800570c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570e:	4a5f      	ldr	r2, [pc, #380]	@ (800588c <HAL_GPIO_Init+0x30c>)
 8005710:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005714:	6453      	str	r3, [r2, #68]	@ 0x44
 8005716:	4b5d      	ldr	r3, [pc, #372]	@ (800588c <HAL_GPIO_Init+0x30c>)
 8005718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800571a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005722:	4a5b      	ldr	r2, [pc, #364]	@ (8005890 <HAL_GPIO_Init+0x310>)
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	089b      	lsrs	r3, r3, #2
 8005728:	3302      	adds	r3, #2
 800572a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800572e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	f003 0303 	and.w	r3, r3, #3
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	220f      	movs	r2, #15
 800573a:	fa02 f303 	lsl.w	r3, r2, r3
 800573e:	43db      	mvns	r3, r3
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	4013      	ands	r3, r2
 8005744:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a52      	ldr	r2, [pc, #328]	@ (8005894 <HAL_GPIO_Init+0x314>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d02b      	beq.n	80057a6 <HAL_GPIO_Init+0x226>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a51      	ldr	r2, [pc, #324]	@ (8005898 <HAL_GPIO_Init+0x318>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d025      	beq.n	80057a2 <HAL_GPIO_Init+0x222>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a50      	ldr	r2, [pc, #320]	@ (800589c <HAL_GPIO_Init+0x31c>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d01f      	beq.n	800579e <HAL_GPIO_Init+0x21e>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a4f      	ldr	r2, [pc, #316]	@ (80058a0 <HAL_GPIO_Init+0x320>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d019      	beq.n	800579a <HAL_GPIO_Init+0x21a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a4e      	ldr	r2, [pc, #312]	@ (80058a4 <HAL_GPIO_Init+0x324>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d013      	beq.n	8005796 <HAL_GPIO_Init+0x216>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a4d      	ldr	r2, [pc, #308]	@ (80058a8 <HAL_GPIO_Init+0x328>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d00d      	beq.n	8005792 <HAL_GPIO_Init+0x212>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a4c      	ldr	r2, [pc, #304]	@ (80058ac <HAL_GPIO_Init+0x32c>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d007      	beq.n	800578e <HAL_GPIO_Init+0x20e>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a4b      	ldr	r2, [pc, #300]	@ (80058b0 <HAL_GPIO_Init+0x330>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d101      	bne.n	800578a <HAL_GPIO_Init+0x20a>
 8005786:	2307      	movs	r3, #7
 8005788:	e00e      	b.n	80057a8 <HAL_GPIO_Init+0x228>
 800578a:	2308      	movs	r3, #8
 800578c:	e00c      	b.n	80057a8 <HAL_GPIO_Init+0x228>
 800578e:	2306      	movs	r3, #6
 8005790:	e00a      	b.n	80057a8 <HAL_GPIO_Init+0x228>
 8005792:	2305      	movs	r3, #5
 8005794:	e008      	b.n	80057a8 <HAL_GPIO_Init+0x228>
 8005796:	2304      	movs	r3, #4
 8005798:	e006      	b.n	80057a8 <HAL_GPIO_Init+0x228>
 800579a:	2303      	movs	r3, #3
 800579c:	e004      	b.n	80057a8 <HAL_GPIO_Init+0x228>
 800579e:	2302      	movs	r3, #2
 80057a0:	e002      	b.n	80057a8 <HAL_GPIO_Init+0x228>
 80057a2:	2301      	movs	r3, #1
 80057a4:	e000      	b.n	80057a8 <HAL_GPIO_Init+0x228>
 80057a6:	2300      	movs	r3, #0
 80057a8:	69fa      	ldr	r2, [r7, #28]
 80057aa:	f002 0203 	and.w	r2, r2, #3
 80057ae:	0092      	lsls	r2, r2, #2
 80057b0:	4093      	lsls	r3, r2
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057b8:	4935      	ldr	r1, [pc, #212]	@ (8005890 <HAL_GPIO_Init+0x310>)
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	089b      	lsrs	r3, r3, #2
 80057be:	3302      	adds	r3, #2
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80057c6:	4b3b      	ldr	r3, [pc, #236]	@ (80058b4 <HAL_GPIO_Init+0x334>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	43db      	mvns	r3, r3
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	4013      	ands	r3, r2
 80057d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80057ea:	4a32      	ldr	r2, [pc, #200]	@ (80058b4 <HAL_GPIO_Init+0x334>)
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80057f0:	4b30      	ldr	r3, [pc, #192]	@ (80058b4 <HAL_GPIO_Init+0x334>)
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	43db      	mvns	r3, r3
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	4013      	ands	r3, r2
 80057fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005814:	4a27      	ldr	r2, [pc, #156]	@ (80058b4 <HAL_GPIO_Init+0x334>)
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800581a:	4b26      	ldr	r3, [pc, #152]	@ (80058b4 <HAL_GPIO_Init+0x334>)
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	43db      	mvns	r3, r3
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	4013      	ands	r3, r2
 8005828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	4313      	orrs	r3, r2
 800583c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800583e:	4a1d      	ldr	r2, [pc, #116]	@ (80058b4 <HAL_GPIO_Init+0x334>)
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005844:	4b1b      	ldr	r3, [pc, #108]	@ (80058b4 <HAL_GPIO_Init+0x334>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	43db      	mvns	r3, r3
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	4013      	ands	r3, r2
 8005852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	4313      	orrs	r3, r2
 8005866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005868:	4a12      	ldr	r2, [pc, #72]	@ (80058b4 <HAL_GPIO_Init+0x334>)
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	3301      	adds	r3, #1
 8005872:	61fb      	str	r3, [r7, #28]
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	2b0f      	cmp	r3, #15
 8005878:	f67f ae90 	bls.w	800559c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800587c:	bf00      	nop
 800587e:	bf00      	nop
 8005880:	3724      	adds	r7, #36	@ 0x24
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	40023800 	.word	0x40023800
 8005890:	40013800 	.word	0x40013800
 8005894:	40020000 	.word	0x40020000
 8005898:	40020400 	.word	0x40020400
 800589c:	40020800 	.word	0x40020800
 80058a0:	40020c00 	.word	0x40020c00
 80058a4:	40021000 	.word	0x40021000
 80058a8:	40021400 	.word	0x40021400
 80058ac:	40021800 	.word	0x40021800
 80058b0:	40021c00 	.word	0x40021c00
 80058b4:	40013c00 	.word	0x40013c00

080058b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	460b      	mov	r3, r1
 80058c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691a      	ldr	r2, [r3, #16]
 80058c8:	887b      	ldrh	r3, [r7, #2]
 80058ca:	4013      	ands	r3, r2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80058d0:	2301      	movs	r3, #1
 80058d2:	73fb      	strb	r3, [r7, #15]
 80058d4:	e001      	b.n	80058da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058d6:	2300      	movs	r3, #0
 80058d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80058da:	7bfb      	ldrb	r3, [r7, #15]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	460b      	mov	r3, r1
 80058f2:	807b      	strh	r3, [r7, #2]
 80058f4:	4613      	mov	r3, r2
 80058f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058f8:	787b      	ldrb	r3, [r7, #1]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058fe:	887a      	ldrh	r2, [r7, #2]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005904:	e003      	b.n	800590e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005906:	887b      	ldrh	r3, [r7, #2]
 8005908:	041a      	lsls	r2, r3, #16
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	619a      	str	r2, [r3, #24]
}
 800590e:	bf00      	nop
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
	...

0800591c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	4603      	mov	r3, r0
 8005924:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005926:	4b08      	ldr	r3, [pc, #32]	@ (8005948 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005928:	695a      	ldr	r2, [r3, #20]
 800592a:	88fb      	ldrh	r3, [r7, #6]
 800592c:	4013      	ands	r3, r2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d006      	beq.n	8005940 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005932:	4a05      	ldr	r2, [pc, #20]	@ (8005948 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005934:	88fb      	ldrh	r3, [r7, #6]
 8005936:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005938:	88fb      	ldrh	r3, [r7, #6]
 800593a:	4618      	mov	r0, r3
 800593c:	f7fc fad2 	bl	8001ee4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005940:	bf00      	nop
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	40013c00 	.word	0x40013c00

0800594c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e12b      	b.n	8005bb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7fe fa86 	bl	8003e84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2224      	movs	r2, #36	@ 0x24
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0201 	bic.w	r2, r2, #1
 800598e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800599e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80059b0:	f002 f9c4 	bl	8007d3c <HAL_RCC_GetPCLK1Freq>
 80059b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	4a81      	ldr	r2, [pc, #516]	@ (8005bc0 <HAL_I2C_Init+0x274>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d807      	bhi.n	80059d0 <HAL_I2C_Init+0x84>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4a80      	ldr	r2, [pc, #512]	@ (8005bc4 <HAL_I2C_Init+0x278>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	bf94      	ite	ls
 80059c8:	2301      	movls	r3, #1
 80059ca:	2300      	movhi	r3, #0
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	e006      	b.n	80059de <HAL_I2C_Init+0x92>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4a7d      	ldr	r2, [pc, #500]	@ (8005bc8 <HAL_I2C_Init+0x27c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	bf94      	ite	ls
 80059d8:	2301      	movls	r3, #1
 80059da:	2300      	movhi	r3, #0
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e0e7      	b.n	8005bb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	4a78      	ldr	r2, [pc, #480]	@ (8005bcc <HAL_I2C_Init+0x280>)
 80059ea:	fba2 2303 	umull	r2, r3, r2, r3
 80059ee:	0c9b      	lsrs	r3, r3, #18
 80059f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	4a6a      	ldr	r2, [pc, #424]	@ (8005bc0 <HAL_I2C_Init+0x274>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d802      	bhi.n	8005a20 <HAL_I2C_Init+0xd4>
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	e009      	b.n	8005a34 <HAL_I2C_Init+0xe8>
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005a26:	fb02 f303 	mul.w	r3, r2, r3
 8005a2a:	4a69      	ldr	r2, [pc, #420]	@ (8005bd0 <HAL_I2C_Init+0x284>)
 8005a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a30:	099b      	lsrs	r3, r3, #6
 8005a32:	3301      	adds	r3, #1
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	6812      	ldr	r2, [r2, #0]
 8005a38:	430b      	orrs	r3, r1
 8005a3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005a46:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	495c      	ldr	r1, [pc, #368]	@ (8005bc0 <HAL_I2C_Init+0x274>)
 8005a50:	428b      	cmp	r3, r1
 8005a52:	d819      	bhi.n	8005a88 <HAL_I2C_Init+0x13c>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	1e59      	subs	r1, r3, #1
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a62:	1c59      	adds	r1, r3, #1
 8005a64:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005a68:	400b      	ands	r3, r1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00a      	beq.n	8005a84 <HAL_I2C_Init+0x138>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	1e59      	subs	r1, r3, #1
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a82:	e051      	b.n	8005b28 <HAL_I2C_Init+0x1dc>
 8005a84:	2304      	movs	r3, #4
 8005a86:	e04f      	b.n	8005b28 <HAL_I2C_Init+0x1dc>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d111      	bne.n	8005ab4 <HAL_I2C_Init+0x168>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	1e58      	subs	r0, r3, #1
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6859      	ldr	r1, [r3, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	440b      	add	r3, r1
 8005a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	bf0c      	ite	eq
 8005aac:	2301      	moveq	r3, #1
 8005aae:	2300      	movne	r3, #0
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	e012      	b.n	8005ada <HAL_I2C_Init+0x18e>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	1e58      	subs	r0, r3, #1
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6859      	ldr	r1, [r3, #4]
 8005abc:	460b      	mov	r3, r1
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	440b      	add	r3, r1
 8005ac2:	0099      	lsls	r1, r3, #2
 8005ac4:	440b      	add	r3, r1
 8005ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aca:	3301      	adds	r3, #1
 8005acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	bf0c      	ite	eq
 8005ad4:	2301      	moveq	r3, #1
 8005ad6:	2300      	movne	r3, #0
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <HAL_I2C_Init+0x196>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e022      	b.n	8005b28 <HAL_I2C_Init+0x1dc>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10e      	bne.n	8005b08 <HAL_I2C_Init+0x1bc>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	1e58      	subs	r0, r3, #1
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6859      	ldr	r1, [r3, #4]
 8005af2:	460b      	mov	r3, r1
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	440b      	add	r3, r1
 8005af8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005afc:	3301      	adds	r3, #1
 8005afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b06:	e00f      	b.n	8005b28 <HAL_I2C_Init+0x1dc>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	1e58      	subs	r0, r3, #1
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6859      	ldr	r1, [r3, #4]
 8005b10:	460b      	mov	r3, r1
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	440b      	add	r3, r1
 8005b16:	0099      	lsls	r1, r3, #2
 8005b18:	440b      	add	r3, r1
 8005b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b1e:	3301      	adds	r3, #1
 8005b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b28:	6879      	ldr	r1, [r7, #4]
 8005b2a:	6809      	ldr	r1, [r1, #0]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	69da      	ldr	r2, [r3, #28]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	431a      	orrs	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005b56:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	6911      	ldr	r1, [r2, #16]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	68d2      	ldr	r2, [r2, #12]
 8005b62:	4311      	orrs	r1, r2
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6812      	ldr	r2, [r2, #0]
 8005b68:	430b      	orrs	r3, r1
 8005b6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	695a      	ldr	r2, [r3, #20]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0201 	orr.w	r2, r2, #1
 8005b96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	000186a0 	.word	0x000186a0
 8005bc4:	001e847f 	.word	0x001e847f
 8005bc8:	003d08ff 	.word	0x003d08ff
 8005bcc:	431bde83 	.word	0x431bde83
 8005bd0:	10624dd3 	.word	0x10624dd3

08005bd4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af02      	add	r7, sp, #8
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	607a      	str	r2, [r7, #4]
 8005bde:	461a      	mov	r2, r3
 8005be0:	460b      	mov	r3, r1
 8005be2:	817b      	strh	r3, [r7, #10]
 8005be4:	4613      	mov	r3, r2
 8005be6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005be8:	f7fe fc2a 	bl	8004440 <HAL_GetTick>
 8005bec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b20      	cmp	r3, #32
 8005bf8:	f040 80e0 	bne.w	8005dbc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	2319      	movs	r3, #25
 8005c02:	2201      	movs	r2, #1
 8005c04:	4970      	ldr	r1, [pc, #448]	@ (8005dc8 <HAL_I2C_Master_Transmit+0x1f4>)
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f000 fc64 	bl	80064d4 <I2C_WaitOnFlagUntilTimeout>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d001      	beq.n	8005c16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005c12:	2302      	movs	r3, #2
 8005c14:	e0d3      	b.n	8005dbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d101      	bne.n	8005c24 <HAL_I2C_Master_Transmit+0x50>
 8005c20:	2302      	movs	r3, #2
 8005c22:	e0cc      	b.n	8005dbe <HAL_I2C_Master_Transmit+0x1ea>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d007      	beq.n	8005c4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f042 0201 	orr.w	r2, r2, #1
 8005c48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2221      	movs	r2, #33	@ 0x21
 8005c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2210      	movs	r2, #16
 8005c66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	893a      	ldrh	r2, [r7, #8]
 8005c7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	4a50      	ldr	r2, [pc, #320]	@ (8005dcc <HAL_I2C_Master_Transmit+0x1f8>)
 8005c8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005c8c:	8979      	ldrh	r1, [r7, #10]
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	6a3a      	ldr	r2, [r7, #32]
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 face 	bl	8006234 <I2C_MasterRequestWrite>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e08d      	b.n	8005dbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	613b      	str	r3, [r7, #16]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	695b      	ldr	r3, [r3, #20]
 8005cac:	613b      	str	r3, [r7, #16]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	613b      	str	r3, [r7, #16]
 8005cb6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005cb8:	e066      	b.n	8005d88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	6a39      	ldr	r1, [r7, #32]
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f000 fd22 	bl	8006708 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00d      	beq.n	8005ce6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d107      	bne.n	8005ce2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ce0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e06b      	b.n	8005dbe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cea:	781a      	ldrb	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf6:	1c5a      	adds	r2, r3, #1
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	3b01      	subs	r3, #1
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b04      	cmp	r3, #4
 8005d22:	d11b      	bne.n	8005d5c <HAL_I2C_Master_Transmit+0x188>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d017      	beq.n	8005d5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d30:	781a      	ldrb	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d54:	3b01      	subs	r3, #1
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	6a39      	ldr	r1, [r7, #32]
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f000 fd19 	bl	8006798 <I2C_WaitOnBTFFlagUntilTimeout>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00d      	beq.n	8005d88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d70:	2b04      	cmp	r3, #4
 8005d72:	d107      	bne.n	8005d84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e01a      	b.n	8005dbe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d194      	bne.n	8005cba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2220      	movs	r2, #32
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005db8:	2300      	movs	r3, #0
 8005dba:	e000      	b.n	8005dbe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005dbc:	2302      	movs	r3, #2
  }
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3718      	adds	r7, #24
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	00100002 	.word	0x00100002
 8005dcc:	ffff0000 	.word	0xffff0000

08005dd0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08c      	sub	sp, #48	@ 0x30
 8005dd4:	af02      	add	r7, sp, #8
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	607a      	str	r2, [r7, #4]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	460b      	mov	r3, r1
 8005dde:	817b      	strh	r3, [r7, #10]
 8005de0:	4613      	mov	r3, r2
 8005de2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005de4:	f7fe fb2c 	bl	8004440 <HAL_GetTick>
 8005de8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b20      	cmp	r3, #32
 8005df4:	f040 8217 	bne.w	8006226 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	2319      	movs	r3, #25
 8005dfe:	2201      	movs	r2, #1
 8005e00:	497c      	ldr	r1, [pc, #496]	@ (8005ff4 <HAL_I2C_Master_Receive+0x224>)
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 fb66 	bl	80064d4 <I2C_WaitOnFlagUntilTimeout>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005e0e:	2302      	movs	r3, #2
 8005e10:	e20a      	b.n	8006228 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d101      	bne.n	8005e20 <HAL_I2C_Master_Receive+0x50>
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	e203      	b.n	8006228 <HAL_I2C_Master_Receive+0x458>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d007      	beq.n	8005e46 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f042 0201 	orr.w	r2, r2, #1
 8005e44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2222      	movs	r2, #34	@ 0x22
 8005e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2210      	movs	r2, #16
 8005e62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	893a      	ldrh	r2, [r7, #8]
 8005e76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	4a5c      	ldr	r2, [pc, #368]	@ (8005ff8 <HAL_I2C_Master_Receive+0x228>)
 8005e86:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005e88:	8979      	ldrh	r1, [r7, #10]
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f000 fa52 	bl	8006338 <I2C_MasterRequestRead>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e1c4      	b.n	8006228 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d113      	bne.n	8005ece <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	623b      	str	r3, [r7, #32]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	623b      	str	r3, [r7, #32]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	623b      	str	r3, [r7, #32]
 8005eba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	e198      	b.n	8006200 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d11b      	bne.n	8005f0e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ee4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	61fb      	str	r3, [r7, #28]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	61fb      	str	r3, [r7, #28]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	61fb      	str	r3, [r7, #28]
 8005efa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	e178      	b.n	8006200 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d11b      	bne.n	8005f4e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f36:	2300      	movs	r3, #0
 8005f38:	61bb      	str	r3, [r7, #24]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	61bb      	str	r3, [r7, #24]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	61bb      	str	r3, [r7, #24]
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	e158      	b.n	8006200 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f5e:	2300      	movs	r3, #0
 8005f60:	617b      	str	r3, [r7, #20]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	617b      	str	r3, [r7, #20]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	617b      	str	r3, [r7, #20]
 8005f72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005f74:	e144      	b.n	8006200 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	f200 80f1 	bhi.w	8006162 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d123      	bne.n	8005fd0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 fc4b 	bl	8006828 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e145      	b.n	8006228 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691a      	ldr	r2, [r3, #16]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa6:	b2d2      	uxtb	r2, r2
 8005fa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fae:	1c5a      	adds	r2, r3, #1
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005fce:	e117      	b.n	8006200 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d14e      	bne.n	8006076 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fde:	2200      	movs	r2, #0
 8005fe0:	4906      	ldr	r1, [pc, #24]	@ (8005ffc <HAL_I2C_Master_Receive+0x22c>)
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f000 fa76 	bl	80064d4 <I2C_WaitOnFlagUntilTimeout>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d008      	beq.n	8006000 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e11a      	b.n	8006228 <HAL_I2C_Master_Receive+0x458>
 8005ff2:	bf00      	nop
 8005ff4:	00100002 	.word	0x00100002
 8005ff8:	ffff0000 	.word	0xffff0000
 8005ffc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800600e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	691a      	ldr	r2, [r3, #16]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601a:	b2d2      	uxtb	r2, r2
 800601c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800602c:	3b01      	subs	r3, #1
 800602e:	b29a      	uxth	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006038:	b29b      	uxth	r3, r3
 800603a:	3b01      	subs	r3, #1
 800603c:	b29a      	uxth	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	691a      	ldr	r2, [r3, #16]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800604c:	b2d2      	uxtb	r2, r2
 800604e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006054:	1c5a      	adds	r2, r3, #1
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800605e:	3b01      	subs	r3, #1
 8006060:	b29a      	uxth	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800606a:	b29b      	uxth	r3, r3
 800606c:	3b01      	subs	r3, #1
 800606e:	b29a      	uxth	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006074:	e0c4      	b.n	8006200 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607c:	2200      	movs	r2, #0
 800607e:	496c      	ldr	r1, [pc, #432]	@ (8006230 <HAL_I2C_Master_Receive+0x460>)
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 fa27 	bl	80064d4 <I2C_WaitOnFlagUntilTimeout>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e0cb      	b.n	8006228 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800609e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	691a      	ldr	r2, [r3, #16]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060aa:	b2d2      	uxtb	r2, r2
 80060ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b2:	1c5a      	adds	r2, r3, #1
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060bc:	3b01      	subs	r3, #1
 80060be:	b29a      	uxth	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	3b01      	subs	r3, #1
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80060d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d8:	2200      	movs	r2, #0
 80060da:	4955      	ldr	r1, [pc, #340]	@ (8006230 <HAL_I2C_Master_Receive+0x460>)
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 f9f9 	bl	80064d4 <I2C_WaitOnFlagUntilTimeout>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e09d      	b.n	8006228 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	691a      	ldr	r2, [r3, #16]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006106:	b2d2      	uxtb	r2, r2
 8006108:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610e:	1c5a      	adds	r2, r3, #1
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006118:	3b01      	subs	r3, #1
 800611a:	b29a      	uxth	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006124:	b29b      	uxth	r3, r3
 8006126:	3b01      	subs	r3, #1
 8006128:	b29a      	uxth	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	691a      	ldr	r2, [r3, #16]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006140:	1c5a      	adds	r2, r3, #1
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800614a:	3b01      	subs	r3, #1
 800614c:	b29a      	uxth	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006156:	b29b      	uxth	r3, r3
 8006158:	3b01      	subs	r3, #1
 800615a:	b29a      	uxth	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006160:	e04e      	b.n	8006200 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006164:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f000 fb5e 	bl	8006828 <I2C_WaitOnRXNEFlagUntilTimeout>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e058      	b.n	8006228 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	691a      	ldr	r2, [r3, #16]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006180:	b2d2      	uxtb	r2, r2
 8006182:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006188:	1c5a      	adds	r2, r3, #1
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006192:	3b01      	subs	r3, #1
 8006194:	b29a      	uxth	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800619e:	b29b      	uxth	r3, r3
 80061a0:	3b01      	subs	r3, #1
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	f003 0304 	and.w	r3, r3, #4
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	d124      	bne.n	8006200 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d107      	bne.n	80061ce <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061cc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	691a      	ldr	r2, [r3, #16]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d8:	b2d2      	uxtb	r2, r2
 80061da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061ea:	3b01      	subs	r3, #1
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	3b01      	subs	r3, #1
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006204:	2b00      	cmp	r3, #0
 8006206:	f47f aeb6 	bne.w	8005f76 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2220      	movs	r2, #32
 800620e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006222:	2300      	movs	r3, #0
 8006224:	e000      	b.n	8006228 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006226:	2302      	movs	r3, #2
  }
}
 8006228:	4618      	mov	r0, r3
 800622a:	3728      	adds	r7, #40	@ 0x28
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	00010004 	.word	0x00010004

08006234 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b088      	sub	sp, #32
 8006238:	af02      	add	r7, sp, #8
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	607a      	str	r2, [r7, #4]
 800623e:	603b      	str	r3, [r7, #0]
 8006240:	460b      	mov	r3, r1
 8006242:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006248:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2b08      	cmp	r3, #8
 800624e:	d006      	beq.n	800625e <I2C_MasterRequestWrite+0x2a>
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d003      	beq.n	800625e <I2C_MasterRequestWrite+0x2a>
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800625c:	d108      	bne.n	8006270 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	e00b      	b.n	8006288 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006274:	2b12      	cmp	r3, #18
 8006276:	d107      	bne.n	8006288 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006286:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f000 f91d 	bl	80064d4 <I2C_WaitOnFlagUntilTimeout>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00d      	beq.n	80062bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062ae:	d103      	bne.n	80062b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e035      	b.n	8006328 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062c4:	d108      	bne.n	80062d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062c6:	897b      	ldrh	r3, [r7, #10]
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	461a      	mov	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80062d4:	611a      	str	r2, [r3, #16]
 80062d6:	e01b      	b.n	8006310 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80062d8:	897b      	ldrh	r3, [r7, #10]
 80062da:	11db      	asrs	r3, r3, #7
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	f003 0306 	and.w	r3, r3, #6
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	f063 030f 	orn	r3, r3, #15
 80062e8:	b2da      	uxtb	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	490e      	ldr	r1, [pc, #56]	@ (8006330 <I2C_MasterRequestWrite+0xfc>)
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f000 f966 	bl	80065c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e010      	b.n	8006328 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006306:	897b      	ldrh	r3, [r7, #10]
 8006308:	b2da      	uxtb	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	4907      	ldr	r1, [pc, #28]	@ (8006334 <I2C_MasterRequestWrite+0x100>)
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f000 f956 	bl	80065c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d001      	beq.n	8006326 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e000      	b.n	8006328 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3718      	adds	r7, #24
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	00010008 	.word	0x00010008
 8006334:	00010002 	.word	0x00010002

08006338 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af02      	add	r7, sp, #8
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	607a      	str	r2, [r7, #4]
 8006342:	603b      	str	r3, [r7, #0]
 8006344:	460b      	mov	r3, r1
 8006346:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800635c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	2b08      	cmp	r3, #8
 8006362:	d006      	beq.n	8006372 <I2C_MasterRequestRead+0x3a>
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d003      	beq.n	8006372 <I2C_MasterRequestRead+0x3a>
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006370:	d108      	bne.n	8006384 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	e00b      	b.n	800639c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006388:	2b11      	cmp	r3, #17
 800638a:	d107      	bne.n	800639c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800639a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f000 f893 	bl	80064d4 <I2C_WaitOnFlagUntilTimeout>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00d      	beq.n	80063d0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063c2:	d103      	bne.n	80063cc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e079      	b.n	80064c4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063d8:	d108      	bne.n	80063ec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80063da:	897b      	ldrh	r3, [r7, #10]
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	f043 0301 	orr.w	r3, r3, #1
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	611a      	str	r2, [r3, #16]
 80063ea:	e05f      	b.n	80064ac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80063ec:	897b      	ldrh	r3, [r7, #10]
 80063ee:	11db      	asrs	r3, r3, #7
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	f003 0306 	and.w	r3, r3, #6
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	f063 030f 	orn	r3, r3, #15
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	4930      	ldr	r1, [pc, #192]	@ (80064cc <I2C_MasterRequestRead+0x194>)
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 f8dc 	bl	80065c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e054      	b.n	80064c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800641a:	897b      	ldrh	r3, [r7, #10]
 800641c:	b2da      	uxtb	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	4929      	ldr	r1, [pc, #164]	@ (80064d0 <I2C_MasterRequestRead+0x198>)
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f000 f8cc 	bl	80065c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e044      	b.n	80064c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800643a:	2300      	movs	r3, #0
 800643c:	613b      	str	r3, [r7, #16]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	613b      	str	r3, [r7, #16]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	613b      	str	r3, [r7, #16]
 800644e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800645e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 f831 	bl	80064d4 <I2C_WaitOnFlagUntilTimeout>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00d      	beq.n	8006494 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006482:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006486:	d103      	bne.n	8006490 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800648e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e017      	b.n	80064c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006494:	897b      	ldrh	r3, [r7, #10]
 8006496:	11db      	asrs	r3, r3, #7
 8006498:	b2db      	uxtb	r3, r3
 800649a:	f003 0306 	and.w	r3, r3, #6
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	f063 030e 	orn	r3, r3, #14
 80064a4:	b2da      	uxtb	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	4907      	ldr	r1, [pc, #28]	@ (80064d0 <I2C_MasterRequestRead+0x198>)
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 f888 	bl	80065c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e000      	b.n	80064c4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3718      	adds	r7, #24
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	00010008 	.word	0x00010008
 80064d0:	00010002 	.word	0x00010002

080064d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	603b      	str	r3, [r7, #0]
 80064e0:	4613      	mov	r3, r2
 80064e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064e4:	e048      	b.n	8006578 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ec:	d044      	beq.n	8006578 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ee:	f7fd ffa7 	bl	8004440 <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d302      	bcc.n	8006504 <I2C_WaitOnFlagUntilTimeout+0x30>
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d139      	bne.n	8006578 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	0c1b      	lsrs	r3, r3, #16
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b01      	cmp	r3, #1
 800650c:	d10d      	bne.n	800652a <I2C_WaitOnFlagUntilTimeout+0x56>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	43da      	mvns	r2, r3
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	4013      	ands	r3, r2
 800651a:	b29b      	uxth	r3, r3
 800651c:	2b00      	cmp	r3, #0
 800651e:	bf0c      	ite	eq
 8006520:	2301      	moveq	r3, #1
 8006522:	2300      	movne	r3, #0
 8006524:	b2db      	uxtb	r3, r3
 8006526:	461a      	mov	r2, r3
 8006528:	e00c      	b.n	8006544 <I2C_WaitOnFlagUntilTimeout+0x70>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	43da      	mvns	r2, r3
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	4013      	ands	r3, r2
 8006536:	b29b      	uxth	r3, r3
 8006538:	2b00      	cmp	r3, #0
 800653a:	bf0c      	ite	eq
 800653c:	2301      	moveq	r3, #1
 800653e:	2300      	movne	r3, #0
 8006540:	b2db      	uxtb	r3, r3
 8006542:	461a      	mov	r2, r3
 8006544:	79fb      	ldrb	r3, [r7, #7]
 8006546:	429a      	cmp	r2, r3
 8006548:	d116      	bne.n	8006578 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2220      	movs	r2, #32
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006564:	f043 0220 	orr.w	r2, r3, #32
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e023      	b.n	80065c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	0c1b      	lsrs	r3, r3, #16
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b01      	cmp	r3, #1
 8006580:	d10d      	bne.n	800659e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	43da      	mvns	r2, r3
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	4013      	ands	r3, r2
 800658e:	b29b      	uxth	r3, r3
 8006590:	2b00      	cmp	r3, #0
 8006592:	bf0c      	ite	eq
 8006594:	2301      	moveq	r3, #1
 8006596:	2300      	movne	r3, #0
 8006598:	b2db      	uxtb	r3, r3
 800659a:	461a      	mov	r2, r3
 800659c:	e00c      	b.n	80065b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	43da      	mvns	r2, r3
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	4013      	ands	r3, r2
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	bf0c      	ite	eq
 80065b0:	2301      	moveq	r3, #1
 80065b2:	2300      	movne	r3, #0
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	461a      	mov	r2, r3
 80065b8:	79fb      	ldrb	r3, [r7, #7]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d093      	beq.n	80064e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
 80065d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065d6:	e071      	b.n	80066bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065e6:	d123      	bne.n	8006630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006600:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2220      	movs	r2, #32
 800660c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800661c:	f043 0204 	orr.w	r2, r3, #4
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e067      	b.n	8006700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006636:	d041      	beq.n	80066bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006638:	f7fd ff02 	bl	8004440 <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	429a      	cmp	r2, r3
 8006646:	d302      	bcc.n	800664e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d136      	bne.n	80066bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	0c1b      	lsrs	r3, r3, #16
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b01      	cmp	r3, #1
 8006656:	d10c      	bne.n	8006672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	43da      	mvns	r2, r3
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	4013      	ands	r3, r2
 8006664:	b29b      	uxth	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	bf14      	ite	ne
 800666a:	2301      	movne	r3, #1
 800666c:	2300      	moveq	r3, #0
 800666e:	b2db      	uxtb	r3, r3
 8006670:	e00b      	b.n	800668a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	43da      	mvns	r2, r3
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	4013      	ands	r3, r2
 800667e:	b29b      	uxth	r3, r3
 8006680:	2b00      	cmp	r3, #0
 8006682:	bf14      	ite	ne
 8006684:	2301      	movne	r3, #1
 8006686:	2300      	moveq	r3, #0
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d016      	beq.n	80066bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2220      	movs	r2, #32
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a8:	f043 0220 	orr.w	r2, r3, #32
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e021      	b.n	8006700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	0c1b      	lsrs	r3, r3, #16
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d10c      	bne.n	80066e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	43da      	mvns	r2, r3
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	4013      	ands	r3, r2
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	bf14      	ite	ne
 80066d8:	2301      	movne	r3, #1
 80066da:	2300      	moveq	r3, #0
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	e00b      	b.n	80066f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	43da      	mvns	r2, r3
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	4013      	ands	r3, r2
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	bf14      	ite	ne
 80066f2:	2301      	movne	r3, #1
 80066f4:	2300      	moveq	r3, #0
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f47f af6d 	bne.w	80065d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006714:	e034      	b.n	8006780 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f000 f8e3 	bl	80068e2 <I2C_IsAcknowledgeFailed>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e034      	b.n	8006790 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672c:	d028      	beq.n	8006780 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800672e:	f7fd fe87 	bl	8004440 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	429a      	cmp	r2, r3
 800673c:	d302      	bcc.n	8006744 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d11d      	bne.n	8006780 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800674e:	2b80      	cmp	r3, #128	@ 0x80
 8006750:	d016      	beq.n	8006780 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2220      	movs	r2, #32
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800676c:	f043 0220 	orr.w	r2, r3, #32
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e007      	b.n	8006790 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800678a:	2b80      	cmp	r3, #128	@ 0x80
 800678c:	d1c3      	bne.n	8006716 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80067a4:	e034      	b.n	8006810 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 f89b 	bl	80068e2 <I2C_IsAcknowledgeFailed>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e034      	b.n	8006820 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067bc:	d028      	beq.n	8006810 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067be:	f7fd fe3f 	bl	8004440 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d302      	bcc.n	80067d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d11d      	bne.n	8006810 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	f003 0304 	and.w	r3, r3, #4
 80067de:	2b04      	cmp	r3, #4
 80067e0:	d016      	beq.n	8006810 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2220      	movs	r2, #32
 80067ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067fc:	f043 0220 	orr.w	r2, r3, #32
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e007      	b.n	8006820 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	f003 0304 	and.w	r3, r3, #4
 800681a:	2b04      	cmp	r3, #4
 800681c:	d1c3      	bne.n	80067a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006834:	e049      	b.n	80068ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	f003 0310 	and.w	r3, r3, #16
 8006840:	2b10      	cmp	r3, #16
 8006842:	d119      	bne.n	8006878 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f06f 0210 	mvn.w	r2, #16
 800684c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2220      	movs	r2, #32
 8006858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e030      	b.n	80068da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006878:	f7fd fde2 	bl	8004440 <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	429a      	cmp	r2, r3
 8006886:	d302      	bcc.n	800688e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d11d      	bne.n	80068ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006898:	2b40      	cmp	r3, #64	@ 0x40
 800689a:	d016      	beq.n	80068ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2220      	movs	r2, #32
 80068a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b6:	f043 0220 	orr.w	r2, r3, #32
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e007      	b.n	80068da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068d4:	2b40      	cmp	r3, #64	@ 0x40
 80068d6:	d1ae      	bne.n	8006836 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b083      	sub	sp, #12
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068f8:	d11b      	bne.n	8006932 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006902:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2220      	movs	r2, #32
 800690e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691e:	f043 0204 	orr.w	r2, r3, #4
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e000      	b.n	8006934 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b088      	sub	sp, #32
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e128      	b.n	8006ba4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d109      	bne.n	8006972 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a90      	ldr	r2, [pc, #576]	@ (8006bac <HAL_I2S_Init+0x26c>)
 800696a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7fd fad1 	bl	8003f14 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2202      	movs	r2, #2
 8006976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	69db      	ldr	r3, [r3, #28]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	6812      	ldr	r2, [r2, #0]
 8006984:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006988:	f023 030f 	bic.w	r3, r3, #15
 800698c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2202      	movs	r2, #2
 8006994:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	2b02      	cmp	r3, #2
 800699c:	d060      	beq.n	8006a60 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d102      	bne.n	80069ac <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80069a6:	2310      	movs	r3, #16
 80069a8:	617b      	str	r3, [r7, #20]
 80069aa:	e001      	b.n	80069b0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80069ac:	2320      	movs	r3, #32
 80069ae:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	2b20      	cmp	r3, #32
 80069b6:	d802      	bhi.n	80069be <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	005b      	lsls	r3, r3, #1
 80069bc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80069be:	2001      	movs	r0, #1
 80069c0:	f001 fab2 	bl	8007f28 <HAL_RCCEx_GetPeriphCLKFreq>
 80069c4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069ce:	d125      	bne.n	8006a1c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d010      	beq.n	80069fa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	fbb2 f2f3 	udiv	r2, r2, r3
 80069e2:	4613      	mov	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	461a      	mov	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f4:	3305      	adds	r3, #5
 80069f6:	613b      	str	r3, [r7, #16]
 80069f8:	e01f      	b.n	8006a3a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	00db      	lsls	r3, r3, #3
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a04:	4613      	mov	r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4413      	add	r3, r2
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a16:	3305      	adds	r3, #5
 8006a18:	613b      	str	r3, [r7, #16]
 8006a1a:	e00e      	b.n	8006a3a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a24:	4613      	mov	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	005b      	lsls	r3, r3, #1
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a36:	3305      	adds	r3, #5
 8006a38:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	4a5c      	ldr	r2, [pc, #368]	@ (8006bb0 <HAL_I2S_Init+0x270>)
 8006a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a42:	08db      	lsrs	r3, r3, #3
 8006a44:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	085b      	lsrs	r3, r3, #1
 8006a56:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	021b      	lsls	r3, r3, #8
 8006a5c:	61bb      	str	r3, [r7, #24]
 8006a5e:	e003      	b.n	8006a68 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006a60:	2302      	movs	r3, #2
 8006a62:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006a64:	2300      	movs	r3, #0
 8006a66:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d902      	bls.n	8006a74 <HAL_I2S_Init+0x134>
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	2bff      	cmp	r3, #255	@ 0xff
 8006a72:	d907      	bls.n	8006a84 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a78:	f043 0210 	orr.w	r2, r3, #16
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e08f      	b.n	8006ba4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	691a      	ldr	r2, [r3, #16]
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	ea42 0103 	orr.w	r1, r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	69fa      	ldr	r2, [r7, #28]
 8006a94:	430a      	orrs	r2, r1
 8006a96:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	69db      	ldr	r3, [r3, #28]
 8006a9e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006aa2:	f023 030f 	bic.w	r3, r3, #15
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	6851      	ldr	r1, [r2, #4]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	6892      	ldr	r2, [r2, #8]
 8006aae:	4311      	orrs	r1, r2
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	68d2      	ldr	r2, [r2, #12]
 8006ab4:	4311      	orrs	r1, r2
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	6992      	ldr	r2, [r2, #24]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	431a      	orrs	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ac6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a1b      	ldr	r3, [r3, #32]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d161      	bne.n	8006b94 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a38      	ldr	r2, [pc, #224]	@ (8006bb4 <HAL_I2S_Init+0x274>)
 8006ad4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a37      	ldr	r2, [pc, #220]	@ (8006bb8 <HAL_I2S_Init+0x278>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d101      	bne.n	8006ae4 <HAL_I2S_Init+0x1a4>
 8006ae0:	4b36      	ldr	r3, [pc, #216]	@ (8006bbc <HAL_I2S_Init+0x27c>)
 8006ae2:	e001      	b.n	8006ae8 <HAL_I2S_Init+0x1a8>
 8006ae4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	6812      	ldr	r2, [r2, #0]
 8006aee:	4932      	ldr	r1, [pc, #200]	@ (8006bb8 <HAL_I2S_Init+0x278>)
 8006af0:	428a      	cmp	r2, r1
 8006af2:	d101      	bne.n	8006af8 <HAL_I2S_Init+0x1b8>
 8006af4:	4a31      	ldr	r2, [pc, #196]	@ (8006bbc <HAL_I2S_Init+0x27c>)
 8006af6:	e001      	b.n	8006afc <HAL_I2S_Init+0x1bc>
 8006af8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006afc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006b00:	f023 030f 	bic.w	r3, r3, #15
 8006b04:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a2b      	ldr	r2, [pc, #172]	@ (8006bb8 <HAL_I2S_Init+0x278>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d101      	bne.n	8006b14 <HAL_I2S_Init+0x1d4>
 8006b10:	4b2a      	ldr	r3, [pc, #168]	@ (8006bbc <HAL_I2S_Init+0x27c>)
 8006b12:	e001      	b.n	8006b18 <HAL_I2S_Init+0x1d8>
 8006b14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006b18:	2202      	movs	r2, #2
 8006b1a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a25      	ldr	r2, [pc, #148]	@ (8006bb8 <HAL_I2S_Init+0x278>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d101      	bne.n	8006b2a <HAL_I2S_Init+0x1ea>
 8006b26:	4b25      	ldr	r3, [pc, #148]	@ (8006bbc <HAL_I2S_Init+0x27c>)
 8006b28:	e001      	b.n	8006b2e <HAL_I2S_Init+0x1ee>
 8006b2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006b2e:	69db      	ldr	r3, [r3, #28]
 8006b30:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b3a:	d003      	beq.n	8006b44 <HAL_I2S_Init+0x204>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d103      	bne.n	8006b4c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006b44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006b48:	613b      	str	r3, [r7, #16]
 8006b4a:	e001      	b.n	8006b50 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006b64:	4313      	orrs	r3, r2
 8006b66:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	897b      	ldrh	r3, [r7, #10]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006b7c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a0d      	ldr	r2, [pc, #52]	@ (8006bb8 <HAL_I2S_Init+0x278>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d101      	bne.n	8006b8c <HAL_I2S_Init+0x24c>
 8006b88:	4b0c      	ldr	r3, [pc, #48]	@ (8006bbc <HAL_I2S_Init+0x27c>)
 8006b8a:	e001      	b.n	8006b90 <HAL_I2S_Init+0x250>
 8006b8c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006b90:	897a      	ldrh	r2, [r7, #10]
 8006b92:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3720      	adds	r7, #32
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	08006e95 	.word	0x08006e95
 8006bb0:	cccccccd 	.word	0xcccccccd
 8006bb4:	08006fa9 	.word	0x08006fa9
 8006bb8:	40003800 	.word	0x40003800
 8006bbc:	40003400 	.word	0x40003400

08006bc0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d002      	beq.n	8006bda <HAL_I2S_Transmit_DMA+0x1a>
 8006bd4:	88fb      	ldrh	r3, [r7, #6]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e08a      	b.n	8006cf4 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d001      	beq.n	8006bee <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8006bea:	2302      	movs	r3, #2
 8006bec:	e082      	b.n	8006cf4 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d101      	bne.n	8006bfe <HAL_I2S_Transmit_DMA+0x3e>
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	e07a      	b.n	8006cf4 <HAL_I2S_Transmit_DMA+0x134>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2203      	movs	r2, #3
 8006c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	f003 0307 	and.w	r3, r3, #7
 8006c24:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	2b03      	cmp	r3, #3
 8006c2a:	d002      	beq.n	8006c32 <HAL_I2S_Transmit_DMA+0x72>
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	2b05      	cmp	r3, #5
 8006c30:	d10a      	bne.n	8006c48 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8006c32:	88fb      	ldrh	r3, [r7, #6]
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8006c3c:	88fb      	ldrh	r3, [r7, #6]
 8006c3e:	005b      	lsls	r3, r3, #1
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006c46:	e005      	b.n	8006c54 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	88fa      	ldrh	r2, [r7, #6]
 8006c4c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	88fa      	ldrh	r2, [r7, #6]
 8006c52:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c58:	4a28      	ldr	r2, [pc, #160]	@ (8006cfc <HAL_I2S_Transmit_DMA+0x13c>)
 8006c5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c60:	4a27      	ldr	r2, [pc, #156]	@ (8006d00 <HAL_I2S_Transmit_DMA+0x140>)
 8006c62:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c68:	4a26      	ldr	r2, [pc, #152]	@ (8006d04 <HAL_I2S_Transmit_DMA+0x144>)
 8006c6a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006c74:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006c7c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c82:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006c84:	f7fe f9ba 	bl	8004ffc <HAL_DMA_Start_IT>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00f      	beq.n	8006cae <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c92:	f043 0208 	orr.w	r2, r3, #8
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e022      	b.n	8006cf4 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f003 0302 	and.w	r3, r3, #2
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d107      	bne.n	8006cd4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685a      	ldr	r2, [r3, #4]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f042 0202 	orr.w	r2, r2, #2
 8006cd2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d107      	bne.n	8006cf2 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	69da      	ldr	r2, [r3, #28]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006cf0:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3718      	adds	r7, #24
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	08006d73 	.word	0x08006d73
 8006d00:	08006d31 	.word	0x08006d31
 8006d04:	08006d8f 	.word	0x08006d8f

08006d08 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d3c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10e      	bne.n	8006d64 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f022 0202 	bic.w	r2, r2, #2
 8006d54:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f7fb fd7f 	bl	8002868 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006d6a:	bf00      	nop
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b084      	sub	sp, #16
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f7fb f8dd 	bl	8001f40 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006d86:	bf00      	nop
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b084      	sub	sp, #16
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d9a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f022 0203 	bic.w	r2, r2, #3
 8006daa:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dc4:	f043 0208 	orr.w	r2, r3, #8
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f7ff ffa5 	bl	8006d1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006dd2:	bf00      	nop
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b082      	sub	sp, #8
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de6:	881a      	ldrh	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df2:	1c9a      	adds	r2, r3, #2
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10e      	bne.n	8006e2e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006e1e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f7fb fd1d 	bl	8002868 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006e2e:	bf00      	nop
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b082      	sub	sp, #8
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68da      	ldr	r2, [r3, #12]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e48:	b292      	uxth	r2, r2
 8006e4a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e50:	1c9a      	adds	r2, r3, #2
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10e      	bne.n	8006e8c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006e7c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7ff ff3e 	bl	8006d08 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006e8c:	bf00      	nop
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	2b04      	cmp	r3, #4
 8006eae:	d13a      	bne.n	8006f26 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d109      	bne.n	8006ece <I2S_IRQHandler+0x3a>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ec4:	2b40      	cmp	r3, #64	@ 0x40
 8006ec6:	d102      	bne.n	8006ece <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f7ff ffb4 	bl	8006e36 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed4:	2b40      	cmp	r3, #64	@ 0x40
 8006ed6:	d126      	bne.n	8006f26 <I2S_IRQHandler+0x92>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f003 0320 	and.w	r3, r3, #32
 8006ee2:	2b20      	cmp	r3, #32
 8006ee4:	d11f      	bne.n	8006f26 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006ef4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	613b      	str	r3, [r7, #16]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	613b      	str	r3, [r7, #16]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	613b      	str	r3, [r7, #16]
 8006f0a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f18:	f043 0202 	orr.w	r2, r3, #2
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f7ff fefb 	bl	8006d1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b03      	cmp	r3, #3
 8006f30:	d136      	bne.n	8006fa0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f003 0302 	and.w	r3, r3, #2
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d109      	bne.n	8006f50 <I2S_IRQHandler+0xbc>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f46:	2b80      	cmp	r3, #128	@ 0x80
 8006f48:	d102      	bne.n	8006f50 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7ff ff45 	bl	8006dda <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	f003 0308 	and.w	r3, r3, #8
 8006f56:	2b08      	cmp	r3, #8
 8006f58:	d122      	bne.n	8006fa0 <I2S_IRQHandler+0x10c>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f003 0320 	and.w	r3, r3, #32
 8006f64:	2b20      	cmp	r3, #32
 8006f66:	d11b      	bne.n	8006fa0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	685a      	ldr	r2, [r3, #4]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006f76:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006f78:	2300      	movs	r3, #0
 8006f7a:	60fb      	str	r3, [r7, #12]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f92:	f043 0204 	orr.w	r2, r3, #4
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7ff febe 	bl	8006d1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006fa0:	bf00      	nop
 8006fa2:	3718      	adds	r7, #24
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b088      	sub	sp, #32
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a92      	ldr	r2, [pc, #584]	@ (8007208 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d101      	bne.n	8006fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006fc2:	4b92      	ldr	r3, [pc, #584]	@ (800720c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006fc4:	e001      	b.n	8006fca <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006fc6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a8b      	ldr	r2, [pc, #556]	@ (8007208 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d101      	bne.n	8006fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006fe0:	4b8a      	ldr	r3, [pc, #552]	@ (800720c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006fe2:	e001      	b.n	8006fe8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006fe4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ff4:	d004      	beq.n	8007000 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f040 8099 	bne.w	8007132 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	f003 0302 	and.w	r3, r3, #2
 8007006:	2b02      	cmp	r3, #2
 8007008:	d107      	bne.n	800701a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f925 	bl	8007264 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	2b01      	cmp	r3, #1
 8007022:	d107      	bne.n	8007034 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800702a:	2b00      	cmp	r3, #0
 800702c:	d002      	beq.n	8007034 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f9c8 	bl	80073c4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800703a:	2b40      	cmp	r3, #64	@ 0x40
 800703c:	d13a      	bne.n	80070b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	f003 0320 	and.w	r3, r3, #32
 8007044:	2b00      	cmp	r3, #0
 8007046:	d035      	beq.n	80070b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a6e      	ldr	r2, [pc, #440]	@ (8007208 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d101      	bne.n	8007056 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8007052:	4b6e      	ldr	r3, [pc, #440]	@ (800720c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007054:	e001      	b.n	800705a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8007056:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4969      	ldr	r1, [pc, #420]	@ (8007208 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007062:	428b      	cmp	r3, r1
 8007064:	d101      	bne.n	800706a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8007066:	4b69      	ldr	r3, [pc, #420]	@ (800720c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007068:	e001      	b.n	800706e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800706a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800706e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007072:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	685a      	ldr	r2, [r3, #4]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007082:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007084:	2300      	movs	r3, #0
 8007086:	60fb      	str	r3, [r7, #12]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	60fb      	str	r3, [r7, #12]
 8007098:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070a6:	f043 0202 	orr.w	r2, r3, #2
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7ff fe34 	bl	8006d1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	f003 0308 	and.w	r3, r3, #8
 80070ba:	2b08      	cmp	r3, #8
 80070bc:	f040 80c3 	bne.w	8007246 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	f003 0320 	and.w	r3, r3, #32
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f000 80bd 	beq.w	8007246 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80070da:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a49      	ldr	r2, [pc, #292]	@ (8007208 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d101      	bne.n	80070ea <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80070e6:	4b49      	ldr	r3, [pc, #292]	@ (800720c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80070e8:	e001      	b.n	80070ee <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80070ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4944      	ldr	r1, [pc, #272]	@ (8007208 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80070f6:	428b      	cmp	r3, r1
 80070f8:	d101      	bne.n	80070fe <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80070fa:	4b44      	ldr	r3, [pc, #272]	@ (800720c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80070fc:	e001      	b.n	8007102 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80070fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007102:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007106:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007108:	2300      	movs	r3, #0
 800710a:	60bb      	str	r3, [r7, #8]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	60bb      	str	r3, [r7, #8]
 8007114:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007122:	f043 0204 	orr.w	r2, r3, #4
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7ff fdf6 	bl	8006d1c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007130:	e089      	b.n	8007246 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	f003 0302 	and.w	r3, r3, #2
 8007138:	2b02      	cmp	r3, #2
 800713a:	d107      	bne.n	800714c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007142:	2b00      	cmp	r3, #0
 8007144:	d002      	beq.n	800714c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f8be 	bl	80072c8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	2b01      	cmp	r3, #1
 8007154:	d107      	bne.n	8007166 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 f8fd 	bl	8007360 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800716c:	2b40      	cmp	r3, #64	@ 0x40
 800716e:	d12f      	bne.n	80071d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	f003 0320 	and.w	r3, r3, #32
 8007176:	2b00      	cmp	r3, #0
 8007178:	d02a      	beq.n	80071d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	685a      	ldr	r2, [r3, #4]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007188:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a1e      	ldr	r2, [pc, #120]	@ (8007208 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d101      	bne.n	8007198 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007194:	4b1d      	ldr	r3, [pc, #116]	@ (800720c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007196:	e001      	b.n	800719c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007198:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4919      	ldr	r1, [pc, #100]	@ (8007208 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80071a4:	428b      	cmp	r3, r1
 80071a6:	d101      	bne.n	80071ac <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80071a8:	4b18      	ldr	r3, [pc, #96]	@ (800720c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80071aa:	e001      	b.n	80071b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80071ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80071b0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80071b4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071c2:	f043 0202 	orr.w	r2, r3, #2
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7ff fda6 	bl	8006d1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	f003 0308 	and.w	r3, r3, #8
 80071d6:	2b08      	cmp	r3, #8
 80071d8:	d136      	bne.n	8007248 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	f003 0320 	and.w	r3, r3, #32
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d031      	beq.n	8007248 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a07      	ldr	r2, [pc, #28]	@ (8007208 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d101      	bne.n	80071f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80071ee:	4b07      	ldr	r3, [pc, #28]	@ (800720c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80071f0:	e001      	b.n	80071f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80071f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4902      	ldr	r1, [pc, #8]	@ (8007208 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80071fe:	428b      	cmp	r3, r1
 8007200:	d106      	bne.n	8007210 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8007202:	4b02      	ldr	r3, [pc, #8]	@ (800720c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007204:	e006      	b.n	8007214 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8007206:	bf00      	nop
 8007208:	40003800 	.word	0x40003800
 800720c:	40003400 	.word	0x40003400
 8007210:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007214:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007218:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007228:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007236:	f043 0204 	orr.w	r2, r3, #4
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f7ff fd6c 	bl	8006d1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007244:	e000      	b.n	8007248 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007246:	bf00      	nop
}
 8007248:	bf00      	nop
 800724a:	3720      	adds	r7, #32
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007270:	1c99      	adds	r1, r3, #2
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	6251      	str	r1, [r2, #36]	@ 0x24
 8007276:	881a      	ldrh	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007282:	b29b      	uxth	r3, r3
 8007284:	3b01      	subs	r3, #1
 8007286:	b29a      	uxth	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007290:	b29b      	uxth	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	d113      	bne.n	80072be <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80072a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d106      	bne.n	80072be <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f7ff ffc9 	bl	8007250 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80072be:	bf00      	nop
 80072c0:	3708      	adds	r7, #8
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
	...

080072c8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d4:	1c99      	adds	r1, r3, #2
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	6251      	str	r1, [r2, #36]	@ 0x24
 80072da:	8819      	ldrh	r1, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a1d      	ldr	r2, [pc, #116]	@ (8007358 <I2SEx_TxISR_I2SExt+0x90>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d101      	bne.n	80072ea <I2SEx_TxISR_I2SExt+0x22>
 80072e6:	4b1d      	ldr	r3, [pc, #116]	@ (800735c <I2SEx_TxISR_I2SExt+0x94>)
 80072e8:	e001      	b.n	80072ee <I2SEx_TxISR_I2SExt+0x26>
 80072ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80072ee:	460a      	mov	r2, r1
 80072f0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	3b01      	subs	r3, #1
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007304:	b29b      	uxth	r3, r3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d121      	bne.n	800734e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a12      	ldr	r2, [pc, #72]	@ (8007358 <I2SEx_TxISR_I2SExt+0x90>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d101      	bne.n	8007318 <I2SEx_TxISR_I2SExt+0x50>
 8007314:	4b11      	ldr	r3, [pc, #68]	@ (800735c <I2SEx_TxISR_I2SExt+0x94>)
 8007316:	e001      	b.n	800731c <I2SEx_TxISR_I2SExt+0x54>
 8007318:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	490d      	ldr	r1, [pc, #52]	@ (8007358 <I2SEx_TxISR_I2SExt+0x90>)
 8007324:	428b      	cmp	r3, r1
 8007326:	d101      	bne.n	800732c <I2SEx_TxISR_I2SExt+0x64>
 8007328:	4b0c      	ldr	r3, [pc, #48]	@ (800735c <I2SEx_TxISR_I2SExt+0x94>)
 800732a:	e001      	b.n	8007330 <I2SEx_TxISR_I2SExt+0x68>
 800732c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007330:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007334:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800733a:	b29b      	uxth	r3, r3
 800733c:	2b00      	cmp	r3, #0
 800733e:	d106      	bne.n	800734e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7ff ff81 	bl	8007250 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800734e:	bf00      	nop
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	40003800 	.word	0x40003800
 800735c:	40003400 	.word	0x40003400

08007360 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68d8      	ldr	r0, [r3, #12]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007372:	1c99      	adds	r1, r3, #2
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8007378:	b282      	uxth	r2, r0
 800737a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007380:	b29b      	uxth	r3, r3
 8007382:	3b01      	subs	r3, #1
 8007384:	b29a      	uxth	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800738e:	b29b      	uxth	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	d113      	bne.n	80073bc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	685a      	ldr	r2, [r3, #4]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80073a2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d106      	bne.n	80073bc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7ff ff4a 	bl	8007250 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80073bc:	bf00      	nop
 80073be:	3708      	adds	r7, #8
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a20      	ldr	r2, [pc, #128]	@ (8007454 <I2SEx_RxISR_I2SExt+0x90>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d101      	bne.n	80073da <I2SEx_RxISR_I2SExt+0x16>
 80073d6:	4b20      	ldr	r3, [pc, #128]	@ (8007458 <I2SEx_RxISR_I2SExt+0x94>)
 80073d8:	e001      	b.n	80073de <I2SEx_RxISR_I2SExt+0x1a>
 80073da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80073de:	68d8      	ldr	r0, [r3, #12]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e4:	1c99      	adds	r1, r3, #2
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80073ea:	b282      	uxth	r2, r0
 80073ec:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	3b01      	subs	r3, #1
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007400:	b29b      	uxth	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d121      	bne.n	800744a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a12      	ldr	r2, [pc, #72]	@ (8007454 <I2SEx_RxISR_I2SExt+0x90>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d101      	bne.n	8007414 <I2SEx_RxISR_I2SExt+0x50>
 8007410:	4b11      	ldr	r3, [pc, #68]	@ (8007458 <I2SEx_RxISR_I2SExt+0x94>)
 8007412:	e001      	b.n	8007418 <I2SEx_RxISR_I2SExt+0x54>
 8007414:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	490d      	ldr	r1, [pc, #52]	@ (8007454 <I2SEx_RxISR_I2SExt+0x90>)
 8007420:	428b      	cmp	r3, r1
 8007422:	d101      	bne.n	8007428 <I2SEx_RxISR_I2SExt+0x64>
 8007424:	4b0c      	ldr	r3, [pc, #48]	@ (8007458 <I2SEx_RxISR_I2SExt+0x94>)
 8007426:	e001      	b.n	800742c <I2SEx_RxISR_I2SExt+0x68>
 8007428:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800742c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007430:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007436:	b29b      	uxth	r3, r3
 8007438:	2b00      	cmp	r3, #0
 800743a:	d106      	bne.n	800744a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f7ff ff03 	bl	8007250 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800744a:	bf00      	nop
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	40003800 	.word	0x40003800
 8007458:	40003400 	.word	0x40003400

0800745c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d101      	bne.n	800746e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e267      	b.n	800793e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	2b00      	cmp	r3, #0
 8007478:	d075      	beq.n	8007566 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800747a:	4b88      	ldr	r3, [pc, #544]	@ (800769c <HAL_RCC_OscConfig+0x240>)
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f003 030c 	and.w	r3, r3, #12
 8007482:	2b04      	cmp	r3, #4
 8007484:	d00c      	beq.n	80074a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007486:	4b85      	ldr	r3, [pc, #532]	@ (800769c <HAL_RCC_OscConfig+0x240>)
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800748e:	2b08      	cmp	r3, #8
 8007490:	d112      	bne.n	80074b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007492:	4b82      	ldr	r3, [pc, #520]	@ (800769c <HAL_RCC_OscConfig+0x240>)
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800749a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800749e:	d10b      	bne.n	80074b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074a0:	4b7e      	ldr	r3, [pc, #504]	@ (800769c <HAL_RCC_OscConfig+0x240>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d05b      	beq.n	8007564 <HAL_RCC_OscConfig+0x108>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d157      	bne.n	8007564 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e242      	b.n	800793e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074c0:	d106      	bne.n	80074d0 <HAL_RCC_OscConfig+0x74>
 80074c2:	4b76      	ldr	r3, [pc, #472]	@ (800769c <HAL_RCC_OscConfig+0x240>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a75      	ldr	r2, [pc, #468]	@ (800769c <HAL_RCC_OscConfig+0x240>)
 80074c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074cc:	6013      	str	r3, [r2, #0]
 80074ce:	e01d      	b.n	800750c <HAL_RCC_OscConfig+0xb0>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074d8:	d10c      	bne.n	80074f4 <HAL_RCC_OscConfig+0x98>
 80074da:	4b70      	ldr	r3, [pc, #448]	@ (800769c <HAL_RCC_OscConfig+0x240>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a6f      	ldr	r2, [pc, #444]	@ (800769c <HAL_RCC_OscConfig+0x240>)
 80074e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80074e4:	6013      	str	r3, [r2, #0]
 80074e6:	4b6d      	ldr	r3, [pc, #436]	@ (800769c <HAL_RCC_OscConfig+0x240>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a6c      	ldr	r2, [pc, #432]	@ (800769c <HAL_RCC_OscConfig+0x240>)
 80074ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074f0:	6013      	str	r3, [r2, #0]
 80074f2:	e00b      	b.n	800750c <HAL_RCC_OscConfig+0xb0>
 80074f4:	4b69      	ldr	r3, [pc, #420]	@ (800769c <HAL_RCC_OscConfig+0x240>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a68      	ldr	r2, [pc, #416]	@ (800769c <HAL_RCC_OscConfig+0x240>)
 80074fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074fe:	6013      	str	r3, [r2, #0]
 8007500:	4b66      	ldr	r3, [pc, #408]	@ (800769c <HAL_RCC_OscConfig+0x240>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a65      	ldr	r2, [pc, #404]	@ (800769c <HAL_RCC_OscConfig+0x240>)
 8007506:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800750a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d013      	beq.n	800753c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007514:	f7fc ff94 	bl	8004440 <HAL_GetTick>
 8007518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800751a:	e008      	b.n	800752e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800751c:	f7fc ff90 	bl	8004440 <HAL_GetTick>
 8007520:	4602      	mov	r2, r0
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	2b64      	cmp	r3, #100	@ 0x64
 8007528:	d901      	bls.n	800752e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e207      	b.n	800793e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800752e:	4b5b      	ldr	r3, [pc, #364]	@ (800769c <HAL_RCC_OscConfig+0x240>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007536:	2b00      	cmp	r3, #0
 8007538:	d0f0      	beq.n	800751c <HAL_RCC_OscConfig+0xc0>
 800753a:	e014      	b.n	8007566 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800753c:	f7fc ff80 	bl	8004440 <HAL_GetTick>
 8007540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007542:	e008      	b.n	8007556 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007544:	f7fc ff7c 	bl	8004440 <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	2b64      	cmp	r3, #100	@ 0x64
 8007550:	d901      	bls.n	8007556 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e1f3      	b.n	800793e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007556:	4b51      	ldr	r3, [pc, #324]	@ (800769c <HAL_RCC_OscConfig+0x240>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1f0      	bne.n	8007544 <HAL_RCC_OscConfig+0xe8>
 8007562:	e000      	b.n	8007566 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0302 	and.w	r3, r3, #2
 800756e:	2b00      	cmp	r3, #0
 8007570:	d063      	beq.n	800763a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007572:	4b4a      	ldr	r3, [pc, #296]	@ (800769c <HAL_RCC_OscConfig+0x240>)
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f003 030c 	and.w	r3, r3, #12
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00b      	beq.n	8007596 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800757e:	4b47      	ldr	r3, [pc, #284]	@ (800769c <HAL_RCC_OscConfig+0x240>)
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007586:	2b08      	cmp	r3, #8
 8007588:	d11c      	bne.n	80075c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800758a:	4b44      	ldr	r3, [pc, #272]	@ (800769c <HAL_RCC_OscConfig+0x240>)
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d116      	bne.n	80075c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007596:	4b41      	ldr	r3, [pc, #260]	@ (800769c <HAL_RCC_OscConfig+0x240>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d005      	beq.n	80075ae <HAL_RCC_OscConfig+0x152>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d001      	beq.n	80075ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e1c7      	b.n	800793e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075ae:	4b3b      	ldr	r3, [pc, #236]	@ (800769c <HAL_RCC_OscConfig+0x240>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	00db      	lsls	r3, r3, #3
 80075bc:	4937      	ldr	r1, [pc, #220]	@ (800769c <HAL_RCC_OscConfig+0x240>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075c2:	e03a      	b.n	800763a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d020      	beq.n	800760e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075cc:	4b34      	ldr	r3, [pc, #208]	@ (80076a0 <HAL_RCC_OscConfig+0x244>)
 80075ce:	2201      	movs	r2, #1
 80075d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d2:	f7fc ff35 	bl	8004440 <HAL_GetTick>
 80075d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075d8:	e008      	b.n	80075ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075da:	f7fc ff31 	bl	8004440 <HAL_GetTick>
 80075de:	4602      	mov	r2, r0
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d901      	bls.n	80075ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e1a8      	b.n	800793e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075ec:	4b2b      	ldr	r3, [pc, #172]	@ (800769c <HAL_RCC_OscConfig+0x240>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0302 	and.w	r3, r3, #2
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d0f0      	beq.n	80075da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075f8:	4b28      	ldr	r3, [pc, #160]	@ (800769c <HAL_RCC_OscConfig+0x240>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	00db      	lsls	r3, r3, #3
 8007606:	4925      	ldr	r1, [pc, #148]	@ (800769c <HAL_RCC_OscConfig+0x240>)
 8007608:	4313      	orrs	r3, r2
 800760a:	600b      	str	r3, [r1, #0]
 800760c:	e015      	b.n	800763a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800760e:	4b24      	ldr	r3, [pc, #144]	@ (80076a0 <HAL_RCC_OscConfig+0x244>)
 8007610:	2200      	movs	r2, #0
 8007612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007614:	f7fc ff14 	bl	8004440 <HAL_GetTick>
 8007618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800761a:	e008      	b.n	800762e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800761c:	f7fc ff10 	bl	8004440 <HAL_GetTick>
 8007620:	4602      	mov	r2, r0
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	2b02      	cmp	r3, #2
 8007628:	d901      	bls.n	800762e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e187      	b.n	800793e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800762e:	4b1b      	ldr	r3, [pc, #108]	@ (800769c <HAL_RCC_OscConfig+0x240>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 0302 	and.w	r3, r3, #2
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1f0      	bne.n	800761c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0308 	and.w	r3, r3, #8
 8007642:	2b00      	cmp	r3, #0
 8007644:	d036      	beq.n	80076b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d016      	beq.n	800767c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800764e:	4b15      	ldr	r3, [pc, #84]	@ (80076a4 <HAL_RCC_OscConfig+0x248>)
 8007650:	2201      	movs	r2, #1
 8007652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007654:	f7fc fef4 	bl	8004440 <HAL_GetTick>
 8007658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800765a:	e008      	b.n	800766e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800765c:	f7fc fef0 	bl	8004440 <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	2b02      	cmp	r3, #2
 8007668:	d901      	bls.n	800766e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e167      	b.n	800793e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800766e:	4b0b      	ldr	r3, [pc, #44]	@ (800769c <HAL_RCC_OscConfig+0x240>)
 8007670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007672:	f003 0302 	and.w	r3, r3, #2
 8007676:	2b00      	cmp	r3, #0
 8007678:	d0f0      	beq.n	800765c <HAL_RCC_OscConfig+0x200>
 800767a:	e01b      	b.n	80076b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800767c:	4b09      	ldr	r3, [pc, #36]	@ (80076a4 <HAL_RCC_OscConfig+0x248>)
 800767e:	2200      	movs	r2, #0
 8007680:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007682:	f7fc fedd 	bl	8004440 <HAL_GetTick>
 8007686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007688:	e00e      	b.n	80076a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800768a:	f7fc fed9 	bl	8004440 <HAL_GetTick>
 800768e:	4602      	mov	r2, r0
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	2b02      	cmp	r3, #2
 8007696:	d907      	bls.n	80076a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	e150      	b.n	800793e <HAL_RCC_OscConfig+0x4e2>
 800769c:	40023800 	.word	0x40023800
 80076a0:	42470000 	.word	0x42470000
 80076a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076a8:	4b88      	ldr	r3, [pc, #544]	@ (80078cc <HAL_RCC_OscConfig+0x470>)
 80076aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076ac:	f003 0302 	and.w	r3, r3, #2
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1ea      	bne.n	800768a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0304 	and.w	r3, r3, #4
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f000 8097 	beq.w	80077f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076c2:	2300      	movs	r3, #0
 80076c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076c6:	4b81      	ldr	r3, [pc, #516]	@ (80078cc <HAL_RCC_OscConfig+0x470>)
 80076c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d10f      	bne.n	80076f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076d2:	2300      	movs	r3, #0
 80076d4:	60bb      	str	r3, [r7, #8]
 80076d6:	4b7d      	ldr	r3, [pc, #500]	@ (80078cc <HAL_RCC_OscConfig+0x470>)
 80076d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076da:	4a7c      	ldr	r2, [pc, #496]	@ (80078cc <HAL_RCC_OscConfig+0x470>)
 80076dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80076e2:	4b7a      	ldr	r3, [pc, #488]	@ (80078cc <HAL_RCC_OscConfig+0x470>)
 80076e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076ea:	60bb      	str	r3, [r7, #8]
 80076ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076ee:	2301      	movs	r3, #1
 80076f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076f2:	4b77      	ldr	r3, [pc, #476]	@ (80078d0 <HAL_RCC_OscConfig+0x474>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d118      	bne.n	8007730 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80076fe:	4b74      	ldr	r3, [pc, #464]	@ (80078d0 <HAL_RCC_OscConfig+0x474>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a73      	ldr	r2, [pc, #460]	@ (80078d0 <HAL_RCC_OscConfig+0x474>)
 8007704:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800770a:	f7fc fe99 	bl	8004440 <HAL_GetTick>
 800770e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007710:	e008      	b.n	8007724 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007712:	f7fc fe95 	bl	8004440 <HAL_GetTick>
 8007716:	4602      	mov	r2, r0
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	2b02      	cmp	r3, #2
 800771e:	d901      	bls.n	8007724 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007720:	2303      	movs	r3, #3
 8007722:	e10c      	b.n	800793e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007724:	4b6a      	ldr	r3, [pc, #424]	@ (80078d0 <HAL_RCC_OscConfig+0x474>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800772c:	2b00      	cmp	r3, #0
 800772e:	d0f0      	beq.n	8007712 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	2b01      	cmp	r3, #1
 8007736:	d106      	bne.n	8007746 <HAL_RCC_OscConfig+0x2ea>
 8007738:	4b64      	ldr	r3, [pc, #400]	@ (80078cc <HAL_RCC_OscConfig+0x470>)
 800773a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800773c:	4a63      	ldr	r2, [pc, #396]	@ (80078cc <HAL_RCC_OscConfig+0x470>)
 800773e:	f043 0301 	orr.w	r3, r3, #1
 8007742:	6713      	str	r3, [r2, #112]	@ 0x70
 8007744:	e01c      	b.n	8007780 <HAL_RCC_OscConfig+0x324>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	2b05      	cmp	r3, #5
 800774c:	d10c      	bne.n	8007768 <HAL_RCC_OscConfig+0x30c>
 800774e:	4b5f      	ldr	r3, [pc, #380]	@ (80078cc <HAL_RCC_OscConfig+0x470>)
 8007750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007752:	4a5e      	ldr	r2, [pc, #376]	@ (80078cc <HAL_RCC_OscConfig+0x470>)
 8007754:	f043 0304 	orr.w	r3, r3, #4
 8007758:	6713      	str	r3, [r2, #112]	@ 0x70
 800775a:	4b5c      	ldr	r3, [pc, #368]	@ (80078cc <HAL_RCC_OscConfig+0x470>)
 800775c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800775e:	4a5b      	ldr	r2, [pc, #364]	@ (80078cc <HAL_RCC_OscConfig+0x470>)
 8007760:	f043 0301 	orr.w	r3, r3, #1
 8007764:	6713      	str	r3, [r2, #112]	@ 0x70
 8007766:	e00b      	b.n	8007780 <HAL_RCC_OscConfig+0x324>
 8007768:	4b58      	ldr	r3, [pc, #352]	@ (80078cc <HAL_RCC_OscConfig+0x470>)
 800776a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800776c:	4a57      	ldr	r2, [pc, #348]	@ (80078cc <HAL_RCC_OscConfig+0x470>)
 800776e:	f023 0301 	bic.w	r3, r3, #1
 8007772:	6713      	str	r3, [r2, #112]	@ 0x70
 8007774:	4b55      	ldr	r3, [pc, #340]	@ (80078cc <HAL_RCC_OscConfig+0x470>)
 8007776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007778:	4a54      	ldr	r2, [pc, #336]	@ (80078cc <HAL_RCC_OscConfig+0x470>)
 800777a:	f023 0304 	bic.w	r3, r3, #4
 800777e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d015      	beq.n	80077b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007788:	f7fc fe5a 	bl	8004440 <HAL_GetTick>
 800778c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800778e:	e00a      	b.n	80077a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007790:	f7fc fe56 	bl	8004440 <HAL_GetTick>
 8007794:	4602      	mov	r2, r0
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800779e:	4293      	cmp	r3, r2
 80077a0:	d901      	bls.n	80077a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e0cb      	b.n	800793e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077a6:	4b49      	ldr	r3, [pc, #292]	@ (80078cc <HAL_RCC_OscConfig+0x470>)
 80077a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077aa:	f003 0302 	and.w	r3, r3, #2
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d0ee      	beq.n	8007790 <HAL_RCC_OscConfig+0x334>
 80077b2:	e014      	b.n	80077de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077b4:	f7fc fe44 	bl	8004440 <HAL_GetTick>
 80077b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077ba:	e00a      	b.n	80077d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077bc:	f7fc fe40 	bl	8004440 <HAL_GetTick>
 80077c0:	4602      	mov	r2, r0
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d901      	bls.n	80077d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80077ce:	2303      	movs	r3, #3
 80077d0:	e0b5      	b.n	800793e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077d2:	4b3e      	ldr	r3, [pc, #248]	@ (80078cc <HAL_RCC_OscConfig+0x470>)
 80077d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1ee      	bne.n	80077bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80077de:	7dfb      	ldrb	r3, [r7, #23]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d105      	bne.n	80077f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077e4:	4b39      	ldr	r3, [pc, #228]	@ (80078cc <HAL_RCC_OscConfig+0x470>)
 80077e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e8:	4a38      	ldr	r2, [pc, #224]	@ (80078cc <HAL_RCC_OscConfig+0x470>)
 80077ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 80a1 	beq.w	800793c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80077fa:	4b34      	ldr	r3, [pc, #208]	@ (80078cc <HAL_RCC_OscConfig+0x470>)
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f003 030c 	and.w	r3, r3, #12
 8007802:	2b08      	cmp	r3, #8
 8007804:	d05c      	beq.n	80078c0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	2b02      	cmp	r3, #2
 800780c:	d141      	bne.n	8007892 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800780e:	4b31      	ldr	r3, [pc, #196]	@ (80078d4 <HAL_RCC_OscConfig+0x478>)
 8007810:	2200      	movs	r2, #0
 8007812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007814:	f7fc fe14 	bl	8004440 <HAL_GetTick>
 8007818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800781a:	e008      	b.n	800782e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800781c:	f7fc fe10 	bl	8004440 <HAL_GetTick>
 8007820:	4602      	mov	r2, r0
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	2b02      	cmp	r3, #2
 8007828:	d901      	bls.n	800782e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e087      	b.n	800793e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800782e:	4b27      	ldr	r3, [pc, #156]	@ (80078cc <HAL_RCC_OscConfig+0x470>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1f0      	bne.n	800781c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	69da      	ldr	r2, [r3, #28]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	431a      	orrs	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007848:	019b      	lsls	r3, r3, #6
 800784a:	431a      	orrs	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007850:	085b      	lsrs	r3, r3, #1
 8007852:	3b01      	subs	r3, #1
 8007854:	041b      	lsls	r3, r3, #16
 8007856:	431a      	orrs	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800785c:	061b      	lsls	r3, r3, #24
 800785e:	491b      	ldr	r1, [pc, #108]	@ (80078cc <HAL_RCC_OscConfig+0x470>)
 8007860:	4313      	orrs	r3, r2
 8007862:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007864:	4b1b      	ldr	r3, [pc, #108]	@ (80078d4 <HAL_RCC_OscConfig+0x478>)
 8007866:	2201      	movs	r2, #1
 8007868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800786a:	f7fc fde9 	bl	8004440 <HAL_GetTick>
 800786e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007870:	e008      	b.n	8007884 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007872:	f7fc fde5 	bl	8004440 <HAL_GetTick>
 8007876:	4602      	mov	r2, r0
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	2b02      	cmp	r3, #2
 800787e:	d901      	bls.n	8007884 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e05c      	b.n	800793e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007884:	4b11      	ldr	r3, [pc, #68]	@ (80078cc <HAL_RCC_OscConfig+0x470>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d0f0      	beq.n	8007872 <HAL_RCC_OscConfig+0x416>
 8007890:	e054      	b.n	800793c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007892:	4b10      	ldr	r3, [pc, #64]	@ (80078d4 <HAL_RCC_OscConfig+0x478>)
 8007894:	2200      	movs	r2, #0
 8007896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007898:	f7fc fdd2 	bl	8004440 <HAL_GetTick>
 800789c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800789e:	e008      	b.n	80078b2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078a0:	f7fc fdce 	bl	8004440 <HAL_GetTick>
 80078a4:	4602      	mov	r2, r0
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d901      	bls.n	80078b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80078ae:	2303      	movs	r3, #3
 80078b0:	e045      	b.n	800793e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078b2:	4b06      	ldr	r3, [pc, #24]	@ (80078cc <HAL_RCC_OscConfig+0x470>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1f0      	bne.n	80078a0 <HAL_RCC_OscConfig+0x444>
 80078be:	e03d      	b.n	800793c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	699b      	ldr	r3, [r3, #24]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d107      	bne.n	80078d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e038      	b.n	800793e <HAL_RCC_OscConfig+0x4e2>
 80078cc:	40023800 	.word	0x40023800
 80078d0:	40007000 	.word	0x40007000
 80078d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80078d8:	4b1b      	ldr	r3, [pc, #108]	@ (8007948 <HAL_RCC_OscConfig+0x4ec>)
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d028      	beq.n	8007938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d121      	bne.n	8007938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078fe:	429a      	cmp	r2, r3
 8007900:	d11a      	bne.n	8007938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007908:	4013      	ands	r3, r2
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800790e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007910:	4293      	cmp	r3, r2
 8007912:	d111      	bne.n	8007938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800791e:	085b      	lsrs	r3, r3, #1
 8007920:	3b01      	subs	r3, #1
 8007922:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007924:	429a      	cmp	r2, r3
 8007926:	d107      	bne.n	8007938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007932:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007934:	429a      	cmp	r2, r3
 8007936:	d001      	beq.n	800793c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	e000      	b.n	800793e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3718      	adds	r7, #24
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	40023800 	.word	0x40023800

0800794c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d101      	bne.n	8007960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	e0cc      	b.n	8007afa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007960:	4b68      	ldr	r3, [pc, #416]	@ (8007b04 <HAL_RCC_ClockConfig+0x1b8>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 0307 	and.w	r3, r3, #7
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	429a      	cmp	r2, r3
 800796c:	d90c      	bls.n	8007988 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800796e:	4b65      	ldr	r3, [pc, #404]	@ (8007b04 <HAL_RCC_ClockConfig+0x1b8>)
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	b2d2      	uxtb	r2, r2
 8007974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007976:	4b63      	ldr	r3, [pc, #396]	@ (8007b04 <HAL_RCC_ClockConfig+0x1b8>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0307 	and.w	r3, r3, #7
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	429a      	cmp	r2, r3
 8007982:	d001      	beq.n	8007988 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e0b8      	b.n	8007afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d020      	beq.n	80079d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0304 	and.w	r3, r3, #4
 800799c:	2b00      	cmp	r3, #0
 800799e:	d005      	beq.n	80079ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80079a0:	4b59      	ldr	r3, [pc, #356]	@ (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	4a58      	ldr	r2, [pc, #352]	@ (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 80079a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80079aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 0308 	and.w	r3, r3, #8
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d005      	beq.n	80079c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80079b8:	4b53      	ldr	r3, [pc, #332]	@ (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	4a52      	ldr	r2, [pc, #328]	@ (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 80079be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80079c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079c4:	4b50      	ldr	r3, [pc, #320]	@ (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	494d      	ldr	r1, [pc, #308]	@ (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0301 	and.w	r3, r3, #1
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d044      	beq.n	8007a6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d107      	bne.n	80079fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079ea:	4b47      	ldr	r3, [pc, #284]	@ (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d119      	bne.n	8007a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e07f      	b.n	8007afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d003      	beq.n	8007a0a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a06:	2b03      	cmp	r3, #3
 8007a08:	d107      	bne.n	8007a1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a0a:	4b3f      	ldr	r3, [pc, #252]	@ (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d109      	bne.n	8007a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e06f      	b.n	8007afa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a1a:	4b3b      	ldr	r3, [pc, #236]	@ (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0302 	and.w	r3, r3, #2
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e067      	b.n	8007afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a2a:	4b37      	ldr	r3, [pc, #220]	@ (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	f023 0203 	bic.w	r2, r3, #3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	4934      	ldr	r1, [pc, #208]	@ (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a3c:	f7fc fd00 	bl	8004440 <HAL_GetTick>
 8007a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a42:	e00a      	b.n	8007a5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a44:	f7fc fcfc 	bl	8004440 <HAL_GetTick>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d901      	bls.n	8007a5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e04f      	b.n	8007afa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a5a:	4b2b      	ldr	r3, [pc, #172]	@ (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f003 020c 	and.w	r2, r3, #12
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d1eb      	bne.n	8007a44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a6c:	4b25      	ldr	r3, [pc, #148]	@ (8007b04 <HAL_RCC_ClockConfig+0x1b8>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0307 	and.w	r3, r3, #7
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d20c      	bcs.n	8007a94 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a7a:	4b22      	ldr	r3, [pc, #136]	@ (8007b04 <HAL_RCC_ClockConfig+0x1b8>)
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	b2d2      	uxtb	r2, r2
 8007a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a82:	4b20      	ldr	r3, [pc, #128]	@ (8007b04 <HAL_RCC_ClockConfig+0x1b8>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0307 	and.w	r3, r3, #7
 8007a8a:	683a      	ldr	r2, [r7, #0]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d001      	beq.n	8007a94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e032      	b.n	8007afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 0304 	and.w	r3, r3, #4
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d008      	beq.n	8007ab2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007aa0:	4b19      	ldr	r3, [pc, #100]	@ (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	4916      	ldr	r1, [pc, #88]	@ (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 0308 	and.w	r3, r3, #8
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d009      	beq.n	8007ad2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007abe:	4b12      	ldr	r3, [pc, #72]	@ (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	00db      	lsls	r3, r3, #3
 8007acc:	490e      	ldr	r1, [pc, #56]	@ (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007ad2:	f000 f821 	bl	8007b18 <HAL_RCC_GetSysClockFreq>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8007b08 <HAL_RCC_ClockConfig+0x1bc>)
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	091b      	lsrs	r3, r3, #4
 8007ade:	f003 030f 	and.w	r3, r3, #15
 8007ae2:	490a      	ldr	r1, [pc, #40]	@ (8007b0c <HAL_RCC_ClockConfig+0x1c0>)
 8007ae4:	5ccb      	ldrb	r3, [r1, r3]
 8007ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8007aea:	4a09      	ldr	r2, [pc, #36]	@ (8007b10 <HAL_RCC_ClockConfig+0x1c4>)
 8007aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007aee:	4b09      	ldr	r3, [pc, #36]	@ (8007b14 <HAL_RCC_ClockConfig+0x1c8>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fc fc60 	bl	80043b8 <HAL_InitTick>

  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	40023c00 	.word	0x40023c00
 8007b08:	40023800 	.word	0x40023800
 8007b0c:	0800a13c 	.word	0x0800a13c
 8007b10:	20000044 	.word	0x20000044
 8007b14:	20000048 	.word	0x20000048

08007b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b1c:	b094      	sub	sp, #80	@ 0x50
 8007b1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007b20:	2300      	movs	r3, #0
 8007b22:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007b24:	2300      	movs	r3, #0
 8007b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b30:	4b79      	ldr	r3, [pc, #484]	@ (8007d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f003 030c 	and.w	r3, r3, #12
 8007b38:	2b08      	cmp	r3, #8
 8007b3a:	d00d      	beq.n	8007b58 <HAL_RCC_GetSysClockFreq+0x40>
 8007b3c:	2b08      	cmp	r3, #8
 8007b3e:	f200 80e1 	bhi.w	8007d04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d002      	beq.n	8007b4c <HAL_RCC_GetSysClockFreq+0x34>
 8007b46:	2b04      	cmp	r3, #4
 8007b48:	d003      	beq.n	8007b52 <HAL_RCC_GetSysClockFreq+0x3a>
 8007b4a:	e0db      	b.n	8007d04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007b4c:	4b73      	ldr	r3, [pc, #460]	@ (8007d1c <HAL_RCC_GetSysClockFreq+0x204>)
 8007b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007b50:	e0db      	b.n	8007d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007b52:	4b73      	ldr	r3, [pc, #460]	@ (8007d20 <HAL_RCC_GetSysClockFreq+0x208>)
 8007b54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007b56:	e0d8      	b.n	8007d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007b58:	4b6f      	ldr	r3, [pc, #444]	@ (8007d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b60:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007b62:	4b6d      	ldr	r3, [pc, #436]	@ (8007d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d063      	beq.n	8007c36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b6e:	4b6a      	ldr	r3, [pc, #424]	@ (8007d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	099b      	lsrs	r3, r3, #6
 8007b74:	2200      	movs	r2, #0
 8007b76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b78:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b80:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b82:	2300      	movs	r3, #0
 8007b84:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007b8a:	4622      	mov	r2, r4
 8007b8c:	462b      	mov	r3, r5
 8007b8e:	f04f 0000 	mov.w	r0, #0
 8007b92:	f04f 0100 	mov.w	r1, #0
 8007b96:	0159      	lsls	r1, r3, #5
 8007b98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b9c:	0150      	lsls	r0, r2, #5
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	4621      	mov	r1, r4
 8007ba4:	1a51      	subs	r1, r2, r1
 8007ba6:	6139      	str	r1, [r7, #16]
 8007ba8:	4629      	mov	r1, r5
 8007baa:	eb63 0301 	sbc.w	r3, r3, r1
 8007bae:	617b      	str	r3, [r7, #20]
 8007bb0:	f04f 0200 	mov.w	r2, #0
 8007bb4:	f04f 0300 	mov.w	r3, #0
 8007bb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007bbc:	4659      	mov	r1, fp
 8007bbe:	018b      	lsls	r3, r1, #6
 8007bc0:	4651      	mov	r1, sl
 8007bc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007bc6:	4651      	mov	r1, sl
 8007bc8:	018a      	lsls	r2, r1, #6
 8007bca:	4651      	mov	r1, sl
 8007bcc:	ebb2 0801 	subs.w	r8, r2, r1
 8007bd0:	4659      	mov	r1, fp
 8007bd2:	eb63 0901 	sbc.w	r9, r3, r1
 8007bd6:	f04f 0200 	mov.w	r2, #0
 8007bda:	f04f 0300 	mov.w	r3, #0
 8007bde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007be2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007be6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007bea:	4690      	mov	r8, r2
 8007bec:	4699      	mov	r9, r3
 8007bee:	4623      	mov	r3, r4
 8007bf0:	eb18 0303 	adds.w	r3, r8, r3
 8007bf4:	60bb      	str	r3, [r7, #8]
 8007bf6:	462b      	mov	r3, r5
 8007bf8:	eb49 0303 	adc.w	r3, r9, r3
 8007bfc:	60fb      	str	r3, [r7, #12]
 8007bfe:	f04f 0200 	mov.w	r2, #0
 8007c02:	f04f 0300 	mov.w	r3, #0
 8007c06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007c0a:	4629      	mov	r1, r5
 8007c0c:	024b      	lsls	r3, r1, #9
 8007c0e:	4621      	mov	r1, r4
 8007c10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007c14:	4621      	mov	r1, r4
 8007c16:	024a      	lsls	r2, r1, #9
 8007c18:	4610      	mov	r0, r2
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c1e:	2200      	movs	r2, #0
 8007c20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007c28:	f7f8 ff0c 	bl	8000a44 <__aeabi_uldivmod>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	460b      	mov	r3, r1
 8007c30:	4613      	mov	r3, r2
 8007c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c34:	e058      	b.n	8007ce8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c36:	4b38      	ldr	r3, [pc, #224]	@ (8007d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	099b      	lsrs	r3, r3, #6
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	4618      	mov	r0, r3
 8007c40:	4611      	mov	r1, r2
 8007c42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007c46:	623b      	str	r3, [r7, #32]
 8007c48:	2300      	movs	r3, #0
 8007c4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007c50:	4642      	mov	r2, r8
 8007c52:	464b      	mov	r3, r9
 8007c54:	f04f 0000 	mov.w	r0, #0
 8007c58:	f04f 0100 	mov.w	r1, #0
 8007c5c:	0159      	lsls	r1, r3, #5
 8007c5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c62:	0150      	lsls	r0, r2, #5
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	4641      	mov	r1, r8
 8007c6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8007c6e:	4649      	mov	r1, r9
 8007c70:	eb63 0b01 	sbc.w	fp, r3, r1
 8007c74:	f04f 0200 	mov.w	r2, #0
 8007c78:	f04f 0300 	mov.w	r3, #0
 8007c7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007c80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007c84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007c88:	ebb2 040a 	subs.w	r4, r2, sl
 8007c8c:	eb63 050b 	sbc.w	r5, r3, fp
 8007c90:	f04f 0200 	mov.w	r2, #0
 8007c94:	f04f 0300 	mov.w	r3, #0
 8007c98:	00eb      	lsls	r3, r5, #3
 8007c9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c9e:	00e2      	lsls	r2, r4, #3
 8007ca0:	4614      	mov	r4, r2
 8007ca2:	461d      	mov	r5, r3
 8007ca4:	4643      	mov	r3, r8
 8007ca6:	18e3      	adds	r3, r4, r3
 8007ca8:	603b      	str	r3, [r7, #0]
 8007caa:	464b      	mov	r3, r9
 8007cac:	eb45 0303 	adc.w	r3, r5, r3
 8007cb0:	607b      	str	r3, [r7, #4]
 8007cb2:	f04f 0200 	mov.w	r2, #0
 8007cb6:	f04f 0300 	mov.w	r3, #0
 8007cba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007cbe:	4629      	mov	r1, r5
 8007cc0:	028b      	lsls	r3, r1, #10
 8007cc2:	4621      	mov	r1, r4
 8007cc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007cc8:	4621      	mov	r1, r4
 8007cca:	028a      	lsls	r2, r1, #10
 8007ccc:	4610      	mov	r0, r2
 8007cce:	4619      	mov	r1, r3
 8007cd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	61bb      	str	r3, [r7, #24]
 8007cd6:	61fa      	str	r2, [r7, #28]
 8007cd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cdc:	f7f8 feb2 	bl	8000a44 <__aeabi_uldivmod>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8007d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	0c1b      	lsrs	r3, r3, #16
 8007cee:	f003 0303 	and.w	r3, r3, #3
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	005b      	lsls	r3, r3, #1
 8007cf6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007cf8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007cfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007d02:	e002      	b.n	8007d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d04:	4b05      	ldr	r3, [pc, #20]	@ (8007d1c <HAL_RCC_GetSysClockFreq+0x204>)
 8007d06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3750      	adds	r7, #80	@ 0x50
 8007d10:	46bd      	mov	sp, r7
 8007d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d16:	bf00      	nop
 8007d18:	40023800 	.word	0x40023800
 8007d1c:	00f42400 	.word	0x00f42400
 8007d20:	007a1200 	.word	0x007a1200

08007d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d24:	b480      	push	{r7}
 8007d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d28:	4b03      	ldr	r3, [pc, #12]	@ (8007d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	20000044 	.word	0x20000044

08007d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007d40:	f7ff fff0 	bl	8007d24 <HAL_RCC_GetHCLKFreq>
 8007d44:	4602      	mov	r2, r0
 8007d46:	4b05      	ldr	r3, [pc, #20]	@ (8007d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	0a9b      	lsrs	r3, r3, #10
 8007d4c:	f003 0307 	and.w	r3, r3, #7
 8007d50:	4903      	ldr	r1, [pc, #12]	@ (8007d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d52:	5ccb      	ldrb	r3, [r1, r3]
 8007d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	40023800 	.word	0x40023800
 8007d60:	0800a14c 	.word	0x0800a14c

08007d64 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007d70:	2300      	movs	r3, #0
 8007d72:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 0301 	and.w	r3, r3, #1
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d105      	bne.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d035      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007d8c:	4b62      	ldr	r3, [pc, #392]	@ (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007d8e:	2200      	movs	r2, #0
 8007d90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007d92:	f7fc fb55 	bl	8004440 <HAL_GetTick>
 8007d96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d98:	e008      	b.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007d9a:	f7fc fb51 	bl	8004440 <HAL_GetTick>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d901      	bls.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e0b0      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007dac:	4b5b      	ldr	r3, [pc, #364]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1f0      	bne.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	019a      	lsls	r2, r3, #6
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	071b      	lsls	r3, r3, #28
 8007dc4:	4955      	ldr	r1, [pc, #340]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007dcc:	4b52      	ldr	r3, [pc, #328]	@ (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007dce:	2201      	movs	r2, #1
 8007dd0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007dd2:	f7fc fb35 	bl	8004440 <HAL_GetTick>
 8007dd6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007dd8:	e008      	b.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007dda:	f7fc fb31 	bl	8004440 <HAL_GetTick>
 8007dde:	4602      	mov	r2, r0
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d901      	bls.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007de8:	2303      	movs	r3, #3
 8007dea:	e090      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007dec:	4b4b      	ldr	r3, [pc, #300]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d0f0      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 0302 	and.w	r3, r3, #2
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 8083 	beq.w	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007e06:	2300      	movs	r3, #0
 8007e08:	60fb      	str	r3, [r7, #12]
 8007e0a:	4b44      	ldr	r3, [pc, #272]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e0e:	4a43      	ldr	r2, [pc, #268]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e14:	6413      	str	r3, [r2, #64]	@ 0x40
 8007e16:	4b41      	ldr	r3, [pc, #260]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e1e:	60fb      	str	r3, [r7, #12]
 8007e20:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007e22:	4b3f      	ldr	r3, [pc, #252]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a3e      	ldr	r2, [pc, #248]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007e28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e2c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e2e:	f7fc fb07 	bl	8004440 <HAL_GetTick>
 8007e32:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007e34:	e008      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e36:	f7fc fb03 	bl	8004440 <HAL_GetTick>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d901      	bls.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e062      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007e48:	4b35      	ldr	r3, [pc, #212]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d0f0      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007e54:	4b31      	ldr	r3, [pc, #196]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e5c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d02f      	beq.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e6c:	693a      	ldr	r2, [r7, #16]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d028      	beq.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007e72:	4b2a      	ldr	r3, [pc, #168]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e7a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007e7c:	4b29      	ldr	r3, [pc, #164]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007e7e:	2201      	movs	r2, #1
 8007e80:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007e82:	4b28      	ldr	r3, [pc, #160]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007e84:	2200      	movs	r2, #0
 8007e86:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007e88:	4a24      	ldr	r2, [pc, #144]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007e8e:	4b23      	ldr	r3, [pc, #140]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d114      	bne.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007e9a:	f7fc fad1 	bl	8004440 <HAL_GetTick>
 8007e9e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ea0:	e00a      	b.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ea2:	f7fc facd 	bl	8004440 <HAL_GetTick>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d901      	bls.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e02a      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007eb8:	4b18      	ldr	r3, [pc, #96]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ebc:	f003 0302 	and.w	r3, r3, #2
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d0ee      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ecc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ed0:	d10d      	bne.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007ed2:	4b12      	ldr	r3, [pc, #72]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007ee2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ee6:	490d      	ldr	r1, [pc, #52]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	608b      	str	r3, [r1, #8]
 8007eec:	e005      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007eee:	4b0b      	ldr	r3, [pc, #44]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ef4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007ef8:	6093      	str	r3, [r2, #8]
 8007efa:	4b08      	ldr	r3, [pc, #32]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007efc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f06:	4905      	ldr	r1, [pc, #20]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3718      	adds	r7, #24
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	42470068 	.word	0x42470068
 8007f1c:	40023800 	.word	0x40023800
 8007f20:	40007000 	.word	0x40007000
 8007f24:	42470e40 	.word	0x42470e40

08007f28 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b087      	sub	sp, #28
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007f30:	2300      	movs	r3, #0
 8007f32:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007f34:	2300      	movs	r3, #0
 8007f36:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d13f      	bne.n	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007f46:	4b24      	ldr	r3, [pc, #144]	@ (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f4e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d006      	beq.n	8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f5c:	d12f      	bne.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007f5e:	4b1f      	ldr	r3, [pc, #124]	@ (8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007f60:	617b      	str	r3, [r7, #20]
          break;
 8007f62:	e02f      	b.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007f64:	4b1c      	ldr	r3, [pc, #112]	@ (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f70:	d108      	bne.n	8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007f72:	4b19      	ldr	r3, [pc, #100]	@ (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f7a:	4a19      	ldr	r2, [pc, #100]	@ (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f80:	613b      	str	r3, [r7, #16]
 8007f82:	e007      	b.n	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007f84:	4b14      	ldr	r3, [pc, #80]	@ (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f8c:	4a15      	ldr	r2, [pc, #84]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f92:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007f94:	4b10      	ldr	r3, [pc, #64]	@ (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f9a:	099b      	lsrs	r3, r3, #6
 8007f9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	fb02 f303 	mul.w	r3, r2, r3
 8007fa6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fae:	0f1b      	lsrs	r3, r3, #28
 8007fb0:	f003 0307 	and.w	r3, r3, #7
 8007fb4:	68ba      	ldr	r2, [r7, #8]
 8007fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fba:	617b      	str	r3, [r7, #20]
          break;
 8007fbc:	e002      	b.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	617b      	str	r3, [r7, #20]
          break;
 8007fc2:	bf00      	nop
        }
      }
      break;
 8007fc4:	e000      	b.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8007fc6:	bf00      	nop
    }
  }
  return frequency;
 8007fc8:	697b      	ldr	r3, [r7, #20]
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	371c      	adds	r7, #28
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	40023800 	.word	0x40023800
 8007fdc:	00bb8000 	.word	0x00bb8000
 8007fe0:	007a1200 	.word	0x007a1200
 8007fe4:	00f42400 	.word	0x00f42400

08007fe8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d101      	bne.n	8007ffa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e041      	b.n	800807e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008000:	b2db      	uxtb	r3, r3
 8008002:	2b00      	cmp	r3, #0
 8008004:	d106      	bne.n	8008014 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7fc f8d0 	bl	80041b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2202      	movs	r2, #2
 8008018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	3304      	adds	r3, #4
 8008024:	4619      	mov	r1, r3
 8008026:	4610      	mov	r0, r2
 8008028:	f000 fbe0 	bl	80087ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
	...

08008088 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008096:	b2db      	uxtb	r3, r3
 8008098:	2b01      	cmp	r3, #1
 800809a:	d001      	beq.n	80080a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	e04e      	b.n	800813e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2202      	movs	r2, #2
 80080a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	68da      	ldr	r2, [r3, #12]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f042 0201 	orr.w	r2, r2, #1
 80080b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a23      	ldr	r2, [pc, #140]	@ (800814c <HAL_TIM_Base_Start_IT+0xc4>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d022      	beq.n	8008108 <HAL_TIM_Base_Start_IT+0x80>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080ca:	d01d      	beq.n	8008108 <HAL_TIM_Base_Start_IT+0x80>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a1f      	ldr	r2, [pc, #124]	@ (8008150 <HAL_TIM_Base_Start_IT+0xc8>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d018      	beq.n	8008108 <HAL_TIM_Base_Start_IT+0x80>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a1e      	ldr	r2, [pc, #120]	@ (8008154 <HAL_TIM_Base_Start_IT+0xcc>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d013      	beq.n	8008108 <HAL_TIM_Base_Start_IT+0x80>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a1c      	ldr	r2, [pc, #112]	@ (8008158 <HAL_TIM_Base_Start_IT+0xd0>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d00e      	beq.n	8008108 <HAL_TIM_Base_Start_IT+0x80>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a1b      	ldr	r2, [pc, #108]	@ (800815c <HAL_TIM_Base_Start_IT+0xd4>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d009      	beq.n	8008108 <HAL_TIM_Base_Start_IT+0x80>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a19      	ldr	r2, [pc, #100]	@ (8008160 <HAL_TIM_Base_Start_IT+0xd8>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d004      	beq.n	8008108 <HAL_TIM_Base_Start_IT+0x80>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a18      	ldr	r2, [pc, #96]	@ (8008164 <HAL_TIM_Base_Start_IT+0xdc>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d111      	bne.n	800812c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	f003 0307 	and.w	r3, r3, #7
 8008112:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2b06      	cmp	r3, #6
 8008118:	d010      	beq.n	800813c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f042 0201 	orr.w	r2, r2, #1
 8008128:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800812a:	e007      	b.n	800813c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f042 0201 	orr.w	r2, r2, #1
 800813a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3714      	adds	r7, #20
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	40010000 	.word	0x40010000
 8008150:	40000400 	.word	0x40000400
 8008154:	40000800 	.word	0x40000800
 8008158:	40000c00 	.word	0x40000c00
 800815c:	40010400 	.word	0x40010400
 8008160:	40014000 	.word	0x40014000
 8008164:	40001800 	.word	0x40001800

08008168 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68da      	ldr	r2, [r3, #12]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f022 0201 	bic.w	r2, r2, #1
 800817e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	6a1a      	ldr	r2, [r3, #32]
 8008186:	f241 1311 	movw	r3, #4369	@ 0x1111
 800818a:	4013      	ands	r3, r2
 800818c:	2b00      	cmp	r3, #0
 800818e:	d10f      	bne.n	80081b0 <HAL_TIM_Base_Stop_IT+0x48>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	6a1a      	ldr	r2, [r3, #32]
 8008196:	f240 4344 	movw	r3, #1092	@ 0x444
 800819a:	4013      	ands	r3, r2
 800819c:	2b00      	cmp	r3, #0
 800819e:	d107      	bne.n	80081b0 <HAL_TIM_Base_Stop_IT+0x48>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f022 0201 	bic.w	r2, r2, #1
 80081ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	370c      	adds	r7, #12
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b086      	sub	sp, #24
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
 80081ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d101      	bne.n	80081da <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e097      	b.n	800830a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d106      	bne.n	80081f4 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f7fb ff44 	bl	800407c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2202      	movs	r2, #2
 80081f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	6812      	ldr	r2, [r2, #0]
 8008206:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800820a:	f023 0307 	bic.w	r3, r3, #7
 800820e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	3304      	adds	r3, #4
 8008218:	4619      	mov	r1, r3
 800821a:	4610      	mov	r0, r2
 800821c:	f000 fae6 	bl	80087ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	697a      	ldr	r2, [r7, #20]
 800823e:	4313      	orrs	r3, r2
 8008240:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008248:	f023 0303 	bic.w	r3, r3, #3
 800824c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	689a      	ldr	r2, [r3, #8]
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	021b      	lsls	r3, r3, #8
 8008258:	4313      	orrs	r3, r2
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	4313      	orrs	r3, r2
 800825e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008266:	f023 030c 	bic.w	r3, r3, #12
 800826a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008272:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	68da      	ldr	r2, [r3, #12]
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	69db      	ldr	r3, [r3, #28]
 8008280:	021b      	lsls	r3, r3, #8
 8008282:	4313      	orrs	r3, r2
 8008284:	693a      	ldr	r2, [r7, #16]
 8008286:	4313      	orrs	r3, r2
 8008288:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	011a      	lsls	r2, r3, #4
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	6a1b      	ldr	r3, [r3, #32]
 8008294:	031b      	lsls	r3, r3, #12
 8008296:	4313      	orrs	r3, r2
 8008298:	693a      	ldr	r2, [r7, #16]
 800829a:	4313      	orrs	r3, r2
 800829c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80082a4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80082ac:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	685a      	ldr	r2, [r3, #4]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	695b      	ldr	r3, [r3, #20]
 80082b6:	011b      	lsls	r3, r3, #4
 80082b8:	4313      	orrs	r3, r2
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	4313      	orrs	r3, r2
 80082be:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	697a      	ldr	r2, [r7, #20]
 80082c6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	693a      	ldr	r2, [r7, #16]
 80082ce:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3718      	adds	r7, #24
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b084      	sub	sp, #16
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008322:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800832a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008332:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800833a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d110      	bne.n	8008364 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008342:	7bfb      	ldrb	r3, [r7, #15]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d102      	bne.n	800834e <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008348:	7b7b      	ldrb	r3, [r7, #13]
 800834a:	2b01      	cmp	r3, #1
 800834c:	d001      	beq.n	8008352 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e069      	b.n	8008426 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2202      	movs	r2, #2
 8008356:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2202      	movs	r2, #2
 800835e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008362:	e031      	b.n	80083c8 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	2b04      	cmp	r3, #4
 8008368:	d110      	bne.n	800838c <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800836a:	7bbb      	ldrb	r3, [r7, #14]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d102      	bne.n	8008376 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008370:	7b3b      	ldrb	r3, [r7, #12]
 8008372:	2b01      	cmp	r3, #1
 8008374:	d001      	beq.n	800837a <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e055      	b.n	8008426 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2202      	movs	r2, #2
 800837e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2202      	movs	r2, #2
 8008386:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800838a:	e01d      	b.n	80083c8 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800838c:	7bfb      	ldrb	r3, [r7, #15]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d108      	bne.n	80083a4 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008392:	7bbb      	ldrb	r3, [r7, #14]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d105      	bne.n	80083a4 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008398:	7b7b      	ldrb	r3, [r7, #13]
 800839a:	2b01      	cmp	r3, #1
 800839c:	d102      	bne.n	80083a4 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800839e:	7b3b      	ldrb	r3, [r7, #12]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d001      	beq.n	80083a8 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e03e      	b.n	8008426 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2202      	movs	r2, #2
 80083ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2202      	movs	r2, #2
 80083b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2202      	movs	r2, #2
 80083bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2202      	movs	r2, #2
 80083c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d003      	beq.n	80083d6 <HAL_TIM_Encoder_Start+0xc4>
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	2b04      	cmp	r3, #4
 80083d2:	d008      	beq.n	80083e6 <HAL_TIM_Encoder_Start+0xd4>
 80083d4:	e00f      	b.n	80083f6 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2201      	movs	r2, #1
 80083dc:	2100      	movs	r1, #0
 80083de:	4618      	mov	r0, r3
 80083e0:	f000 fb4a 	bl	8008a78 <TIM_CCxChannelCmd>
      break;
 80083e4:	e016      	b.n	8008414 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2201      	movs	r2, #1
 80083ec:	2104      	movs	r1, #4
 80083ee:	4618      	mov	r0, r3
 80083f0:	f000 fb42 	bl	8008a78 <TIM_CCxChannelCmd>
      break;
 80083f4:	e00e      	b.n	8008414 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2201      	movs	r2, #1
 80083fc:	2100      	movs	r1, #0
 80083fe:	4618      	mov	r0, r3
 8008400:	f000 fb3a 	bl	8008a78 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2201      	movs	r2, #1
 800840a:	2104      	movs	r1, #4
 800840c:	4618      	mov	r0, r3
 800840e:	f000 fb33 	bl	8008a78 <TIM_CCxChannelCmd>
      break;
 8008412:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f042 0201 	orr.w	r2, r2, #1
 8008422:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b084      	sub	sp, #16
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	f003 0302 	and.w	r3, r3, #2
 800844c:	2b00      	cmp	r3, #0
 800844e:	d020      	beq.n	8008492 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f003 0302 	and.w	r3, r3, #2
 8008456:	2b00      	cmp	r3, #0
 8008458:	d01b      	beq.n	8008492 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f06f 0202 	mvn.w	r2, #2
 8008462:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	f003 0303 	and.w	r3, r3, #3
 8008474:	2b00      	cmp	r3, #0
 8008476:	d003      	beq.n	8008480 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 f999 	bl	80087b0 <HAL_TIM_IC_CaptureCallback>
 800847e:	e005      	b.n	800848c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 f98b 	bl	800879c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f99c 	bl	80087c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	f003 0304 	and.w	r3, r3, #4
 8008498:	2b00      	cmp	r3, #0
 800849a:	d020      	beq.n	80084de <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f003 0304 	and.w	r3, r3, #4
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d01b      	beq.n	80084de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f06f 0204 	mvn.w	r2, #4
 80084ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2202      	movs	r2, #2
 80084b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d003      	beq.n	80084cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f973 	bl	80087b0 <HAL_TIM_IC_CaptureCallback>
 80084ca:	e005      	b.n	80084d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f965 	bl	800879c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f976 	bl	80087c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	f003 0308 	and.w	r3, r3, #8
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d020      	beq.n	800852a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f003 0308 	and.w	r3, r3, #8
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d01b      	beq.n	800852a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f06f 0208 	mvn.w	r2, #8
 80084fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2204      	movs	r2, #4
 8008500:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	69db      	ldr	r3, [r3, #28]
 8008508:	f003 0303 	and.w	r3, r3, #3
 800850c:	2b00      	cmp	r3, #0
 800850e:	d003      	beq.n	8008518 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f94d 	bl	80087b0 <HAL_TIM_IC_CaptureCallback>
 8008516:	e005      	b.n	8008524 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 f93f 	bl	800879c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f950 	bl	80087c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	f003 0310 	and.w	r3, r3, #16
 8008530:	2b00      	cmp	r3, #0
 8008532:	d020      	beq.n	8008576 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f003 0310 	and.w	r3, r3, #16
 800853a:	2b00      	cmp	r3, #0
 800853c:	d01b      	beq.n	8008576 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f06f 0210 	mvn.w	r2, #16
 8008546:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2208      	movs	r2, #8
 800854c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	69db      	ldr	r3, [r3, #28]
 8008554:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008558:	2b00      	cmp	r3, #0
 800855a:	d003      	beq.n	8008564 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 f927 	bl	80087b0 <HAL_TIM_IC_CaptureCallback>
 8008562:	e005      	b.n	8008570 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 f919 	bl	800879c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f92a 	bl	80087c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	f003 0301 	and.w	r3, r3, #1
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00c      	beq.n	800859a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f003 0301 	and.w	r3, r3, #1
 8008586:	2b00      	cmp	r3, #0
 8008588:	d007      	beq.n	800859a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f06f 0201 	mvn.w	r2, #1
 8008592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f7f9 fc39 	bl	8001e0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00c      	beq.n	80085be <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d007      	beq.n	80085be <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80085b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fb09 	bl	8008bd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00c      	beq.n	80085e2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d007      	beq.n	80085e2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80085da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 f8fb 	bl	80087d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	f003 0320 	and.w	r3, r3, #32
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00c      	beq.n	8008606 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f003 0320 	and.w	r3, r3, #32
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d007      	beq.n	8008606 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f06f 0220 	mvn.w	r2, #32
 80085fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 fadb 	bl	8008bbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008606:	bf00      	nop
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b084      	sub	sp, #16
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008618:	2300      	movs	r3, #0
 800861a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008622:	2b01      	cmp	r3, #1
 8008624:	d101      	bne.n	800862a <HAL_TIM_ConfigClockSource+0x1c>
 8008626:	2302      	movs	r3, #2
 8008628:	e0b4      	b.n	8008794 <HAL_TIM_ConfigClockSource+0x186>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2202      	movs	r2, #2
 8008636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008648:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008650:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68ba      	ldr	r2, [r7, #8]
 8008658:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008662:	d03e      	beq.n	80086e2 <HAL_TIM_ConfigClockSource+0xd4>
 8008664:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008668:	f200 8087 	bhi.w	800877a <HAL_TIM_ConfigClockSource+0x16c>
 800866c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008670:	f000 8086 	beq.w	8008780 <HAL_TIM_ConfigClockSource+0x172>
 8008674:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008678:	d87f      	bhi.n	800877a <HAL_TIM_ConfigClockSource+0x16c>
 800867a:	2b70      	cmp	r3, #112	@ 0x70
 800867c:	d01a      	beq.n	80086b4 <HAL_TIM_ConfigClockSource+0xa6>
 800867e:	2b70      	cmp	r3, #112	@ 0x70
 8008680:	d87b      	bhi.n	800877a <HAL_TIM_ConfigClockSource+0x16c>
 8008682:	2b60      	cmp	r3, #96	@ 0x60
 8008684:	d050      	beq.n	8008728 <HAL_TIM_ConfigClockSource+0x11a>
 8008686:	2b60      	cmp	r3, #96	@ 0x60
 8008688:	d877      	bhi.n	800877a <HAL_TIM_ConfigClockSource+0x16c>
 800868a:	2b50      	cmp	r3, #80	@ 0x50
 800868c:	d03c      	beq.n	8008708 <HAL_TIM_ConfigClockSource+0xfa>
 800868e:	2b50      	cmp	r3, #80	@ 0x50
 8008690:	d873      	bhi.n	800877a <HAL_TIM_ConfigClockSource+0x16c>
 8008692:	2b40      	cmp	r3, #64	@ 0x40
 8008694:	d058      	beq.n	8008748 <HAL_TIM_ConfigClockSource+0x13a>
 8008696:	2b40      	cmp	r3, #64	@ 0x40
 8008698:	d86f      	bhi.n	800877a <HAL_TIM_ConfigClockSource+0x16c>
 800869a:	2b30      	cmp	r3, #48	@ 0x30
 800869c:	d064      	beq.n	8008768 <HAL_TIM_ConfigClockSource+0x15a>
 800869e:	2b30      	cmp	r3, #48	@ 0x30
 80086a0:	d86b      	bhi.n	800877a <HAL_TIM_ConfigClockSource+0x16c>
 80086a2:	2b20      	cmp	r3, #32
 80086a4:	d060      	beq.n	8008768 <HAL_TIM_ConfigClockSource+0x15a>
 80086a6:	2b20      	cmp	r3, #32
 80086a8:	d867      	bhi.n	800877a <HAL_TIM_ConfigClockSource+0x16c>
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d05c      	beq.n	8008768 <HAL_TIM_ConfigClockSource+0x15a>
 80086ae:	2b10      	cmp	r3, #16
 80086b0:	d05a      	beq.n	8008768 <HAL_TIM_ConfigClockSource+0x15a>
 80086b2:	e062      	b.n	800877a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086c4:	f000 f9b8 	bl	8008a38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80086d6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68ba      	ldr	r2, [r7, #8]
 80086de:	609a      	str	r2, [r3, #8]
      break;
 80086e0:	e04f      	b.n	8008782 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086f2:	f000 f9a1 	bl	8008a38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	689a      	ldr	r2, [r3, #8]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008704:	609a      	str	r2, [r3, #8]
      break;
 8008706:	e03c      	b.n	8008782 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008714:	461a      	mov	r2, r3
 8008716:	f000 f915 	bl	8008944 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2150      	movs	r1, #80	@ 0x50
 8008720:	4618      	mov	r0, r3
 8008722:	f000 f96e 	bl	8008a02 <TIM_ITRx_SetConfig>
      break;
 8008726:	e02c      	b.n	8008782 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008734:	461a      	mov	r2, r3
 8008736:	f000 f934 	bl	80089a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2160      	movs	r1, #96	@ 0x60
 8008740:	4618      	mov	r0, r3
 8008742:	f000 f95e 	bl	8008a02 <TIM_ITRx_SetConfig>
      break;
 8008746:	e01c      	b.n	8008782 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008754:	461a      	mov	r2, r3
 8008756:	f000 f8f5 	bl	8008944 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2140      	movs	r1, #64	@ 0x40
 8008760:	4618      	mov	r0, r3
 8008762:	f000 f94e 	bl	8008a02 <TIM_ITRx_SetConfig>
      break;
 8008766:	e00c      	b.n	8008782 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4619      	mov	r1, r3
 8008772:	4610      	mov	r0, r2
 8008774:	f000 f945 	bl	8008a02 <TIM_ITRx_SetConfig>
      break;
 8008778:	e003      	b.n	8008782 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	73fb      	strb	r3, [r7, #15]
      break;
 800877e:	e000      	b.n	8008782 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008780:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008792:	7bfb      	ldrb	r3, [r7, #15]
}
 8008794:	4618      	mov	r0, r3
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087a4:	bf00      	nop
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b085      	sub	sp, #20
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4a46      	ldr	r2, [pc, #280]	@ (8008918 <TIM_Base_SetConfig+0x12c>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d013      	beq.n	800882c <TIM_Base_SetConfig+0x40>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800880a:	d00f      	beq.n	800882c <TIM_Base_SetConfig+0x40>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a43      	ldr	r2, [pc, #268]	@ (800891c <TIM_Base_SetConfig+0x130>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d00b      	beq.n	800882c <TIM_Base_SetConfig+0x40>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a42      	ldr	r2, [pc, #264]	@ (8008920 <TIM_Base_SetConfig+0x134>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d007      	beq.n	800882c <TIM_Base_SetConfig+0x40>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a41      	ldr	r2, [pc, #260]	@ (8008924 <TIM_Base_SetConfig+0x138>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d003      	beq.n	800882c <TIM_Base_SetConfig+0x40>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a40      	ldr	r2, [pc, #256]	@ (8008928 <TIM_Base_SetConfig+0x13c>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d108      	bne.n	800883e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	4313      	orrs	r3, r2
 800883c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a35      	ldr	r2, [pc, #212]	@ (8008918 <TIM_Base_SetConfig+0x12c>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d02b      	beq.n	800889e <TIM_Base_SetConfig+0xb2>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800884c:	d027      	beq.n	800889e <TIM_Base_SetConfig+0xb2>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a32      	ldr	r2, [pc, #200]	@ (800891c <TIM_Base_SetConfig+0x130>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d023      	beq.n	800889e <TIM_Base_SetConfig+0xb2>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4a31      	ldr	r2, [pc, #196]	@ (8008920 <TIM_Base_SetConfig+0x134>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d01f      	beq.n	800889e <TIM_Base_SetConfig+0xb2>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4a30      	ldr	r2, [pc, #192]	@ (8008924 <TIM_Base_SetConfig+0x138>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d01b      	beq.n	800889e <TIM_Base_SetConfig+0xb2>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4a2f      	ldr	r2, [pc, #188]	@ (8008928 <TIM_Base_SetConfig+0x13c>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d017      	beq.n	800889e <TIM_Base_SetConfig+0xb2>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4a2e      	ldr	r2, [pc, #184]	@ (800892c <TIM_Base_SetConfig+0x140>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d013      	beq.n	800889e <TIM_Base_SetConfig+0xb2>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4a2d      	ldr	r2, [pc, #180]	@ (8008930 <TIM_Base_SetConfig+0x144>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d00f      	beq.n	800889e <TIM_Base_SetConfig+0xb2>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a2c      	ldr	r2, [pc, #176]	@ (8008934 <TIM_Base_SetConfig+0x148>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d00b      	beq.n	800889e <TIM_Base_SetConfig+0xb2>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4a2b      	ldr	r2, [pc, #172]	@ (8008938 <TIM_Base_SetConfig+0x14c>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d007      	beq.n	800889e <TIM_Base_SetConfig+0xb2>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a2a      	ldr	r2, [pc, #168]	@ (800893c <TIM_Base_SetConfig+0x150>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d003      	beq.n	800889e <TIM_Base_SetConfig+0xb2>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a29      	ldr	r2, [pc, #164]	@ (8008940 <TIM_Base_SetConfig+0x154>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d108      	bne.n	80088b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	68fa      	ldr	r2, [r7, #12]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	695b      	ldr	r3, [r3, #20]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	689a      	ldr	r2, [r3, #8]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a10      	ldr	r2, [pc, #64]	@ (8008918 <TIM_Base_SetConfig+0x12c>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d003      	beq.n	80088e4 <TIM_Base_SetConfig+0xf8>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a12      	ldr	r2, [pc, #72]	@ (8008928 <TIM_Base_SetConfig+0x13c>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d103      	bne.n	80088ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	691a      	ldr	r2, [r3, #16]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	f003 0301 	and.w	r3, r3, #1
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d105      	bne.n	800890a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	f023 0201 	bic.w	r2, r3, #1
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	611a      	str	r2, [r3, #16]
  }
}
 800890a:	bf00      	nop
 800890c:	3714      	adds	r7, #20
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	40010000 	.word	0x40010000
 800891c:	40000400 	.word	0x40000400
 8008920:	40000800 	.word	0x40000800
 8008924:	40000c00 	.word	0x40000c00
 8008928:	40010400 	.word	0x40010400
 800892c:	40014000 	.word	0x40014000
 8008930:	40014400 	.word	0x40014400
 8008934:	40014800 	.word	0x40014800
 8008938:	40001800 	.word	0x40001800
 800893c:	40001c00 	.word	0x40001c00
 8008940:	40002000 	.word	0x40002000

08008944 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008944:	b480      	push	{r7}
 8008946:	b087      	sub	sp, #28
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6a1b      	ldr	r3, [r3, #32]
 8008954:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6a1b      	ldr	r3, [r3, #32]
 800895a:	f023 0201 	bic.w	r2, r3, #1
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800896e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	011b      	lsls	r3, r3, #4
 8008974:	693a      	ldr	r2, [r7, #16]
 8008976:	4313      	orrs	r3, r2
 8008978:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	f023 030a 	bic.w	r3, r3, #10
 8008980:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008982:	697a      	ldr	r2, [r7, #20]
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	4313      	orrs	r3, r2
 8008988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	697a      	ldr	r2, [r7, #20]
 8008994:	621a      	str	r2, [r3, #32]
}
 8008996:	bf00      	nop
 8008998:	371c      	adds	r7, #28
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr

080089a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089a2:	b480      	push	{r7}
 80089a4:	b087      	sub	sp, #28
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	60f8      	str	r0, [r7, #12]
 80089aa:	60b9      	str	r1, [r7, #8]
 80089ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	6a1b      	ldr	r3, [r3, #32]
 80089b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6a1b      	ldr	r3, [r3, #32]
 80089b8:	f023 0210 	bic.w	r2, r3, #16
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80089cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	031b      	lsls	r3, r3, #12
 80089d2:	693a      	ldr	r2, [r7, #16]
 80089d4:	4313      	orrs	r3, r2
 80089d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80089de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	011b      	lsls	r3, r3, #4
 80089e4:	697a      	ldr	r2, [r7, #20]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	693a      	ldr	r2, [r7, #16]
 80089ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	697a      	ldr	r2, [r7, #20]
 80089f4:	621a      	str	r2, [r3, #32]
}
 80089f6:	bf00      	nop
 80089f8:	371c      	adds	r7, #28
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr

08008a02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a02:	b480      	push	{r7}
 8008a04:	b085      	sub	sp, #20
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
 8008a0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a1a:	683a      	ldr	r2, [r7, #0]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	f043 0307 	orr.w	r3, r3, #7
 8008a24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	609a      	str	r2, [r3, #8]
}
 8008a2c:	bf00      	nop
 8008a2e:	3714      	adds	r7, #20
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b087      	sub	sp, #28
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	607a      	str	r2, [r7, #4]
 8008a44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	021a      	lsls	r2, r3, #8
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	431a      	orrs	r2, r3
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	697a      	ldr	r2, [r7, #20]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	697a      	ldr	r2, [r7, #20]
 8008a6a:	609a      	str	r2, [r3, #8]
}
 8008a6c:	bf00      	nop
 8008a6e:	371c      	adds	r7, #28
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b087      	sub	sp, #28
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	f003 031f 	and.w	r3, r3, #31
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6a1a      	ldr	r2, [r3, #32]
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	43db      	mvns	r3, r3
 8008a9a:	401a      	ands	r2, r3
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6a1a      	ldr	r2, [r3, #32]
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	f003 031f 	and.w	r3, r3, #31
 8008aaa:	6879      	ldr	r1, [r7, #4]
 8008aac:	fa01 f303 	lsl.w	r3, r1, r3
 8008ab0:	431a      	orrs	r2, r3
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	621a      	str	r2, [r3, #32]
}
 8008ab6:	bf00      	nop
 8008ab8:	371c      	adds	r7, #28
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr
	...

08008ac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d101      	bne.n	8008adc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ad8:	2302      	movs	r3, #2
 8008ada:	e05a      	b.n	8008b92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2202      	movs	r2, #2
 8008ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a21      	ldr	r2, [pc, #132]	@ (8008ba0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d022      	beq.n	8008b66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b28:	d01d      	beq.n	8008b66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a1d      	ldr	r2, [pc, #116]	@ (8008ba4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d018      	beq.n	8008b66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a1b      	ldr	r2, [pc, #108]	@ (8008ba8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d013      	beq.n	8008b66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a1a      	ldr	r2, [pc, #104]	@ (8008bac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d00e      	beq.n	8008b66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a18      	ldr	r2, [pc, #96]	@ (8008bb0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d009      	beq.n	8008b66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a17      	ldr	r2, [pc, #92]	@ (8008bb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d004      	beq.n	8008b66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a15      	ldr	r2, [pc, #84]	@ (8008bb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d10c      	bne.n	8008b80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	68ba      	ldr	r2, [r7, #8]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3714      	adds	r7, #20
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	40010000 	.word	0x40010000
 8008ba4:	40000400 	.word	0x40000400
 8008ba8:	40000800 	.word	0x40000800
 8008bac:	40000c00 	.word	0x40000c00
 8008bb0:	40010400 	.word	0x40010400
 8008bb4:	40014000 	.word	0x40014000
 8008bb8:	40001800 	.word	0x40001800

08008bbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008bc4:	bf00      	nop
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008bd8:	bf00      	nop
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <memset>:
 8008be4:	4402      	add	r2, r0
 8008be6:	4603      	mov	r3, r0
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d100      	bne.n	8008bee <memset+0xa>
 8008bec:	4770      	bx	lr
 8008bee:	f803 1b01 	strb.w	r1, [r3], #1
 8008bf2:	e7f9      	b.n	8008be8 <memset+0x4>

08008bf4 <__errno>:
 8008bf4:	4b01      	ldr	r3, [pc, #4]	@ (8008bfc <__errno+0x8>)
 8008bf6:	6818      	ldr	r0, [r3, #0]
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	20000050 	.word	0x20000050

08008c00 <__libc_init_array>:
 8008c00:	b570      	push	{r4, r5, r6, lr}
 8008c02:	4d0d      	ldr	r5, [pc, #52]	@ (8008c38 <__libc_init_array+0x38>)
 8008c04:	4c0d      	ldr	r4, [pc, #52]	@ (8008c3c <__libc_init_array+0x3c>)
 8008c06:	1b64      	subs	r4, r4, r5
 8008c08:	10a4      	asrs	r4, r4, #2
 8008c0a:	2600      	movs	r6, #0
 8008c0c:	42a6      	cmp	r6, r4
 8008c0e:	d109      	bne.n	8008c24 <__libc_init_array+0x24>
 8008c10:	4d0b      	ldr	r5, [pc, #44]	@ (8008c40 <__libc_init_array+0x40>)
 8008c12:	4c0c      	ldr	r4, [pc, #48]	@ (8008c44 <__libc_init_array+0x44>)
 8008c14:	f001 fa86 	bl	800a124 <_init>
 8008c18:	1b64      	subs	r4, r4, r5
 8008c1a:	10a4      	asrs	r4, r4, #2
 8008c1c:	2600      	movs	r6, #0
 8008c1e:	42a6      	cmp	r6, r4
 8008c20:	d105      	bne.n	8008c2e <__libc_init_array+0x2e>
 8008c22:	bd70      	pop	{r4, r5, r6, pc}
 8008c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c28:	4798      	blx	r3
 8008c2a:	3601      	adds	r6, #1
 8008c2c:	e7ee      	b.n	8008c0c <__libc_init_array+0xc>
 8008c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c32:	4798      	blx	r3
 8008c34:	3601      	adds	r6, #1
 8008c36:	e7f2      	b.n	8008c1e <__libc_init_array+0x1e>
 8008c38:	0800a558 	.word	0x0800a558
 8008c3c:	0800a558 	.word	0x0800a558
 8008c40:	0800a558 	.word	0x0800a558
 8008c44:	0800a55c 	.word	0x0800a55c

08008c48 <memcpy>:
 8008c48:	440a      	add	r2, r1
 8008c4a:	4291      	cmp	r1, r2
 8008c4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c50:	d100      	bne.n	8008c54 <memcpy+0xc>
 8008c52:	4770      	bx	lr
 8008c54:	b510      	push	{r4, lr}
 8008c56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c5e:	4291      	cmp	r1, r2
 8008c60:	d1f9      	bne.n	8008c56 <memcpy+0xe>
 8008c62:	bd10      	pop	{r4, pc}

08008c64 <powf>:
 8008c64:	b508      	push	{r3, lr}
 8008c66:	ed2d 8b04 	vpush	{d8-d9}
 8008c6a:	eeb0 8a60 	vmov.f32	s16, s1
 8008c6e:	eeb0 9a40 	vmov.f32	s18, s0
 8008c72:	f000 fb3b 	bl	80092ec <__ieee754_powf>
 8008c76:	eeb4 8a48 	vcmp.f32	s16, s16
 8008c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c7e:	eef0 8a40 	vmov.f32	s17, s0
 8008c82:	d63e      	bvs.n	8008d02 <powf+0x9e>
 8008c84:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8008c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c8c:	d112      	bne.n	8008cb4 <powf+0x50>
 8008c8e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c96:	d039      	beq.n	8008d0c <powf+0xa8>
 8008c98:	eeb0 0a48 	vmov.f32	s0, s16
 8008c9c:	f000 f92e 	bl	8008efc <finitef>
 8008ca0:	b378      	cbz	r0, 8008d02 <powf+0x9e>
 8008ca2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008caa:	d52a      	bpl.n	8008d02 <powf+0x9e>
 8008cac:	f7ff ffa2 	bl	8008bf4 <__errno>
 8008cb0:	2322      	movs	r3, #34	@ 0x22
 8008cb2:	e014      	b.n	8008cde <powf+0x7a>
 8008cb4:	f000 f922 	bl	8008efc <finitef>
 8008cb8:	b998      	cbnz	r0, 8008ce2 <powf+0x7e>
 8008cba:	eeb0 0a49 	vmov.f32	s0, s18
 8008cbe:	f000 f91d 	bl	8008efc <finitef>
 8008cc2:	b170      	cbz	r0, 8008ce2 <powf+0x7e>
 8008cc4:	eeb0 0a48 	vmov.f32	s0, s16
 8008cc8:	f000 f918 	bl	8008efc <finitef>
 8008ccc:	b148      	cbz	r0, 8008ce2 <powf+0x7e>
 8008cce:	eef4 8a68 	vcmp.f32	s17, s17
 8008cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cd6:	d7e9      	bvc.n	8008cac <powf+0x48>
 8008cd8:	f7ff ff8c 	bl	8008bf4 <__errno>
 8008cdc:	2321      	movs	r3, #33	@ 0x21
 8008cde:	6003      	str	r3, [r0, #0]
 8008ce0:	e00f      	b.n	8008d02 <powf+0x9e>
 8008ce2:	eef5 8a40 	vcmp.f32	s17, #0.0
 8008ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cea:	d10a      	bne.n	8008d02 <powf+0x9e>
 8008cec:	eeb0 0a49 	vmov.f32	s0, s18
 8008cf0:	f000 f904 	bl	8008efc <finitef>
 8008cf4:	b128      	cbz	r0, 8008d02 <powf+0x9e>
 8008cf6:	eeb0 0a48 	vmov.f32	s0, s16
 8008cfa:	f000 f8ff 	bl	8008efc <finitef>
 8008cfe:	2800      	cmp	r0, #0
 8008d00:	d1d4      	bne.n	8008cac <powf+0x48>
 8008d02:	eeb0 0a68 	vmov.f32	s0, s17
 8008d06:	ecbd 8b04 	vpop	{d8-d9}
 8008d0a:	bd08      	pop	{r3, pc}
 8008d0c:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8008d10:	e7f7      	b.n	8008d02 <powf+0x9e>
	...

08008d14 <cosf>:
 8008d14:	ee10 3a10 	vmov	r3, s0
 8008d18:	b507      	push	{r0, r1, r2, lr}
 8008d1a:	4a1e      	ldr	r2, [pc, #120]	@ (8008d94 <cosf+0x80>)
 8008d1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d806      	bhi.n	8008d32 <cosf+0x1e>
 8008d24:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8008d98 <cosf+0x84>
 8008d28:	b003      	add	sp, #12
 8008d2a:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d2e:	f000 ba3d 	b.w	80091ac <__kernel_cosf>
 8008d32:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008d36:	d304      	bcc.n	8008d42 <cosf+0x2e>
 8008d38:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008d3c:	b003      	add	sp, #12
 8008d3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d42:	4668      	mov	r0, sp
 8008d44:	f000 fda0 	bl	8009888 <__ieee754_rem_pio2f>
 8008d48:	f000 0003 	and.w	r0, r0, #3
 8008d4c:	2801      	cmp	r0, #1
 8008d4e:	d009      	beq.n	8008d64 <cosf+0x50>
 8008d50:	2802      	cmp	r0, #2
 8008d52:	d010      	beq.n	8008d76 <cosf+0x62>
 8008d54:	b9b0      	cbnz	r0, 8008d84 <cosf+0x70>
 8008d56:	eddd 0a01 	vldr	s1, [sp, #4]
 8008d5a:	ed9d 0a00 	vldr	s0, [sp]
 8008d5e:	f000 fa25 	bl	80091ac <__kernel_cosf>
 8008d62:	e7eb      	b.n	8008d3c <cosf+0x28>
 8008d64:	eddd 0a01 	vldr	s1, [sp, #4]
 8008d68:	ed9d 0a00 	vldr	s0, [sp]
 8008d6c:	f000 fa76 	bl	800925c <__kernel_sinf>
 8008d70:	eeb1 0a40 	vneg.f32	s0, s0
 8008d74:	e7e2      	b.n	8008d3c <cosf+0x28>
 8008d76:	eddd 0a01 	vldr	s1, [sp, #4]
 8008d7a:	ed9d 0a00 	vldr	s0, [sp]
 8008d7e:	f000 fa15 	bl	80091ac <__kernel_cosf>
 8008d82:	e7f5      	b.n	8008d70 <cosf+0x5c>
 8008d84:	eddd 0a01 	vldr	s1, [sp, #4]
 8008d88:	ed9d 0a00 	vldr	s0, [sp]
 8008d8c:	2001      	movs	r0, #1
 8008d8e:	f000 fa65 	bl	800925c <__kernel_sinf>
 8008d92:	e7d3      	b.n	8008d3c <cosf+0x28>
 8008d94:	3f490fd8 	.word	0x3f490fd8
 8008d98:	00000000 	.word	0x00000000

08008d9c <sinf>:
 8008d9c:	ee10 3a10 	vmov	r3, s0
 8008da0:	b507      	push	{r0, r1, r2, lr}
 8008da2:	4a1f      	ldr	r2, [pc, #124]	@ (8008e20 <sinf+0x84>)
 8008da4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d807      	bhi.n	8008dbc <sinf+0x20>
 8008dac:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8008e24 <sinf+0x88>
 8008db0:	2000      	movs	r0, #0
 8008db2:	b003      	add	sp, #12
 8008db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008db8:	f000 ba50 	b.w	800925c <__kernel_sinf>
 8008dbc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008dc0:	d304      	bcc.n	8008dcc <sinf+0x30>
 8008dc2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008dc6:	b003      	add	sp, #12
 8008dc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8008dcc:	4668      	mov	r0, sp
 8008dce:	f000 fd5b 	bl	8009888 <__ieee754_rem_pio2f>
 8008dd2:	f000 0003 	and.w	r0, r0, #3
 8008dd6:	2801      	cmp	r0, #1
 8008dd8:	d00a      	beq.n	8008df0 <sinf+0x54>
 8008dda:	2802      	cmp	r0, #2
 8008ddc:	d00f      	beq.n	8008dfe <sinf+0x62>
 8008dde:	b9c0      	cbnz	r0, 8008e12 <sinf+0x76>
 8008de0:	eddd 0a01 	vldr	s1, [sp, #4]
 8008de4:	ed9d 0a00 	vldr	s0, [sp]
 8008de8:	2001      	movs	r0, #1
 8008dea:	f000 fa37 	bl	800925c <__kernel_sinf>
 8008dee:	e7ea      	b.n	8008dc6 <sinf+0x2a>
 8008df0:	eddd 0a01 	vldr	s1, [sp, #4]
 8008df4:	ed9d 0a00 	vldr	s0, [sp]
 8008df8:	f000 f9d8 	bl	80091ac <__kernel_cosf>
 8008dfc:	e7e3      	b.n	8008dc6 <sinf+0x2a>
 8008dfe:	eddd 0a01 	vldr	s1, [sp, #4]
 8008e02:	ed9d 0a00 	vldr	s0, [sp]
 8008e06:	2001      	movs	r0, #1
 8008e08:	f000 fa28 	bl	800925c <__kernel_sinf>
 8008e0c:	eeb1 0a40 	vneg.f32	s0, s0
 8008e10:	e7d9      	b.n	8008dc6 <sinf+0x2a>
 8008e12:	eddd 0a01 	vldr	s1, [sp, #4]
 8008e16:	ed9d 0a00 	vldr	s0, [sp]
 8008e1a:	f000 f9c7 	bl	80091ac <__kernel_cosf>
 8008e1e:	e7f5      	b.n	8008e0c <sinf+0x70>
 8008e20:	3f490fd8 	.word	0x3f490fd8
 8008e24:	00000000 	.word	0x00000000

08008e28 <tanhf>:
 8008e28:	b538      	push	{r3, r4, r5, lr}
 8008e2a:	ee10 5a10 	vmov	r5, s0
 8008e2e:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008e32:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008e36:	ed2d 8b02 	vpush	{d8}
 8008e3a:	eef0 7a40 	vmov.f32	s15, s0
 8008e3e:	d30f      	bcc.n	8008e60 <tanhf+0x38>
 8008e40:	4b2a      	ldr	r3, [pc, #168]	@ (8008eec <tanhf+0xc4>)
 8008e42:	edd3 6a00 	vldr	s13, [r3]
 8008e46:	ed93 7a00 	vldr	s14, [r3]
 8008e4a:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8008e4e:	2d00      	cmp	r5, #0
 8008e50:	bfac      	ite	ge
 8008e52:	ee30 0a07 	vaddge.f32	s0, s0, s14
 8008e56:	ee30 0a47 	vsublt.f32	s0, s0, s14
 8008e5a:	ecbd 8b02 	vpop	{d8}
 8008e5e:	bd38      	pop	{r3, r4, r5, pc}
 8008e60:	4a23      	ldr	r2, [pc, #140]	@ (8008ef0 <tanhf+0xc8>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d839      	bhi.n	8008eda <tanhf+0xb2>
 8008e66:	f1b3 5f10 	cmp.w	r3, #603979776	@ 0x24000000
 8008e6a:	d207      	bcs.n	8008e7c <tanhf+0x54>
 8008e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8008eec <tanhf+0xc4>)
 8008e6e:	ed93 0a00 	vldr	s0, [r3]
 8008e72:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008e76:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008e7a:	e7ee      	b.n	8008e5a <tanhf+0x32>
 8008e7c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8008e80:	4c1c      	ldr	r4, [pc, #112]	@ (8008ef4 <tanhf+0xcc>)
 8008e82:	d319      	bcc.n	8008eb8 <tanhf+0x90>
 8008e84:	f000 fe30 	bl	8009ae8 <fabsf>
 8008e88:	edd4 7a00 	vldr	s15, [r4]
 8008e8c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008e90:	f000 f83e 	bl	8008f10 <expm1f>
 8008e94:	4b15      	ldr	r3, [pc, #84]	@ (8008eec <tanhf+0xc4>)
 8008e96:	edd3 7a00 	vldr	s15, [r3]
 8008e9a:	ed94 6a00 	vldr	s12, [r4]
 8008e9e:	ed94 7a00 	vldr	s14, [r4]
 8008ea2:	ee37 7a00 	vadd.f32	s14, s14, s0
 8008ea6:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8008eaa:	ee37 0ae6 	vsub.f32	s0, s15, s13
 8008eae:	2d00      	cmp	r5, #0
 8008eb0:	bfb8      	it	lt
 8008eb2:	eeb1 0a40 	vneglt.f32	s0, s0
 8008eb6:	e7d0      	b.n	8008e5a <tanhf+0x32>
 8008eb8:	ed94 8a00 	vldr	s16, [r4]
 8008ebc:	f000 fe14 	bl	8009ae8 <fabsf>
 8008ec0:	ee28 0a40 	vnmul.f32	s0, s16, s0
 8008ec4:	f000 f824 	bl	8008f10 <expm1f>
 8008ec8:	edd4 7a00 	vldr	s15, [r4]
 8008ecc:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008ed0:	eeb1 7a40 	vneg.f32	s14, s0
 8008ed4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8008ed8:	e7e9      	b.n	8008eae <tanhf+0x86>
 8008eda:	4b04      	ldr	r3, [pc, #16]	@ (8008eec <tanhf+0xc4>)
 8008edc:	ed93 0a00 	vldr	s0, [r3]
 8008ee0:	4b05      	ldr	r3, [pc, #20]	@ (8008ef8 <tanhf+0xd0>)
 8008ee2:	edd3 7a00 	vldr	s15, [r3]
 8008ee6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008eea:	e7e0      	b.n	8008eae <tanhf+0x86>
 8008eec:	0800a164 	.word	0x0800a164
 8008ef0:	41afffff 	.word	0x41afffff
 8008ef4:	0800a160 	.word	0x0800a160
 8008ef8:	0800a15c 	.word	0x0800a15c

08008efc <finitef>:
 8008efc:	ee10 3a10 	vmov	r3, s0
 8008f00:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8008f04:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8008f08:	bfac      	ite	ge
 8008f0a:	2000      	movge	r0, #0
 8008f0c:	2001      	movlt	r0, #1
 8008f0e:	4770      	bx	lr

08008f10 <expm1f>:
 8008f10:	ee10 3a10 	vmov	r3, s0
 8008f14:	4a83      	ldr	r2, [pc, #524]	@ (8009124 <expm1f+0x214>)
 8008f16:	f003 4000 	and.w	r0, r3, #2147483648	@ 0x80000000
 8008f1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d91f      	bls.n	8008f62 <expm1f+0x52>
 8008f22:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008f26:	d902      	bls.n	8008f2e <expm1f+0x1e>
 8008f28:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008f2c:	4770      	bx	lr
 8008f2e:	d106      	bne.n	8008f3e <expm1f+0x2e>
 8008f30:	2800      	cmp	r0, #0
 8008f32:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8008f36:	bf18      	it	ne
 8008f38:	eeb0 0a67 	vmovne.f32	s0, s15
 8008f3c:	4770      	bx	lr
 8008f3e:	b920      	cbnz	r0, 8008f4a <expm1f+0x3a>
 8008f40:	4a79      	ldr	r2, [pc, #484]	@ (8009128 <expm1f+0x218>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d963      	bls.n	800900e <expm1f+0xfe>
 8008f46:	f000 b92b 	b.w	80091a0 <__math_oflowf>
 8008f4a:	eddf 7a78 	vldr	s15, [pc, #480]	@ 800912c <expm1f+0x21c>
 8008f4e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8008f52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f5a:	d551      	bpl.n	8009000 <expm1f+0xf0>
 8008f5c:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8008f60:	4770      	bx	lr
 8008f62:	4a73      	ldr	r2, [pc, #460]	@ (8009130 <expm1f+0x220>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d972      	bls.n	800904e <expm1f+0x13e>
 8008f68:	4a72      	ldr	r2, [pc, #456]	@ (8009134 <expm1f+0x224>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d868      	bhi.n	8009040 <expm1f+0x130>
 8008f6e:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8009138 <expm1f+0x228>
 8008f72:	2800      	cmp	r0, #0
 8008f74:	d13d      	bne.n	8008ff2 <expm1f+0xe2>
 8008f76:	ee30 7a47 	vsub.f32	s14, s0, s14
 8008f7a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800913c <expm1f+0x22c>
 8008f7e:	2301      	movs	r3, #1
 8008f80:	ee37 0a66 	vsub.f32	s0, s14, s13
 8008f84:	ee77 7a40 	vsub.f32	s15, s14, s0
 8008f88:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008f8c:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8008f90:	ee20 4a25 	vmul.f32	s8, s0, s11
 8008f94:	ed9f 6a6a 	vldr	s12, [pc, #424]	@ 8009140 <expm1f+0x230>
 8008f98:	eddf 6a6a 	vldr	s13, [pc, #424]	@ 8009144 <expm1f+0x234>
 8008f9c:	ed9f 5a6a 	vldr	s10, [pc, #424]	@ 8009148 <expm1f+0x238>
 8008fa0:	ee20 7a04 	vmul.f32	s14, s0, s8
 8008fa4:	eef0 4a08 	vmov.f32	s9, #8	@ 0x40400000  3.0
 8008fa8:	eee7 6a06 	vfma.f32	s13, s14, s12
 8008fac:	ed9f 6a67 	vldr	s12, [pc, #412]	@ 800914c <expm1f+0x23c>
 8008fb0:	eea6 6a87 	vfma.f32	s12, s13, s14
 8008fb4:	eddf 6a66 	vldr	s13, [pc, #408]	@ 8009150 <expm1f+0x240>
 8008fb8:	eee6 6a07 	vfma.f32	s13, s12, s14
 8008fbc:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8008fc0:	eea6 5a87 	vfma.f32	s10, s13, s14
 8008fc4:	eef0 6a46 	vmov.f32	s13, s12
 8008fc8:	eee5 6a07 	vfma.f32	s13, s10, s14
 8008fcc:	eee4 4a66 	vfms.f32	s9, s8, s13
 8008fd0:	eeb1 4a08 	vmov.f32	s8, #24	@ 0x40c00000  6.0
 8008fd4:	eea0 4a64 	vfms.f32	s8, s0, s9
 8008fd8:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8008fdc:	eec5 6a04 	vdiv.f32	s13, s10, s8
 8008fe0:	ee66 6a87 	vmul.f32	s13, s13, s14
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d140      	bne.n	800906a <expm1f+0x15a>
 8008fe8:	ee90 7a26 	vfnms.f32	s14, s0, s13
 8008fec:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008ff0:	4770      	bx	lr
 8008ff2:	ee30 7a07 	vadd.f32	s14, s0, s14
 8008ff6:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8009154 <expm1f+0x244>
 8008ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8008ffe:	e7bf      	b.n	8008f80 <expm1f+0x70>
 8009000:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8009158 <expm1f+0x248>
 8009004:	ee20 7a07 	vmul.f32	s14, s0, s14
 8009008:	eefe 7a00 	vmov.f32	s15, #224	@ 0xbf000000 -0.5
 800900c:	e005      	b.n	800901a <expm1f+0x10a>
 800900e:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8009158 <expm1f+0x248>
 8009012:	ee20 7a07 	vmul.f32	s14, s0, s14
 8009016:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800901a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800901e:	eeb0 7a40 	vmov.f32	s14, s0
 8009022:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009026:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800902a:	ee17 3a90 	vmov	r3, s15
 800902e:	eddf 7a42 	vldr	s15, [pc, #264]	@ 8009138 <expm1f+0x228>
 8009032:	eea6 7ae7 	vfms.f32	s14, s13, s15
 8009036:	eddf 7a41 	vldr	s15, [pc, #260]	@ 800913c <expm1f+0x22c>
 800903a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800903e:	e79f      	b.n	8008f80 <expm1f+0x70>
 8009040:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8009158 <expm1f+0x248>
 8009044:	ee20 7a07 	vmul.f32	s14, s0, s14
 8009048:	2800      	cmp	r0, #0
 800904a:	d0e4      	beq.n	8009016 <expm1f+0x106>
 800904c:	e7dc      	b.n	8009008 <expm1f+0xf8>
 800904e:	f1b3 5f4c 	cmp.w	r3, #855638016	@ 0x33000000
 8009052:	d208      	bcs.n	8009066 <expm1f+0x156>
 8009054:	eddf 7a41 	vldr	s15, [pc, #260]	@ 800915c <expm1f+0x24c>
 8009058:	ee70 7a27 	vadd.f32	s15, s0, s15
 800905c:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8009060:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009064:	4770      	bx	lr
 8009066:	2300      	movs	r3, #0
 8009068:	e790      	b.n	8008f8c <expm1f+0x7c>
 800906a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800906e:	1c5a      	adds	r2, r3, #1
 8009070:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8009074:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009078:	d106      	bne.n	8009088 <expm1f+0x178>
 800907a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800907e:	eebe 0a00 	vmov.f32	s0, #224	@ 0xbf000000 -0.5
 8009082:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8009086:	4770      	bx	lr
 8009088:	2b01      	cmp	r3, #1
 800908a:	d118      	bne.n	80090be <expm1f+0x1ae>
 800908c:	eebd 7a00 	vmov.f32	s14, #208	@ 0xbe800000 -0.250
 8009090:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8009094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009098:	bf5b      	ittet	pl
 800909a:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 800909e:	eeb0 7a00 	vmovpl.f32	s14, #0	@ 0x40000000  2.0
 80090a2:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 80090a6:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 80090aa:	bf43      	ittte	mi
 80090ac:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 80090b0:	eeb8 0a00 	vmovmi.f32	s0, #128	@ 0xc0000000 -2.0
 80090b4:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 80090b8:	eeb0 0a46 	vmovpl.f32	s0, s12
 80090bc:	4770      	bx	lr
 80090be:	1c5a      	adds	r2, r3, #1
 80090c0:	2a39      	cmp	r2, #57	@ 0x39
 80090c2:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 80090c6:	d90b      	bls.n	80090e0 <expm1f+0x1d0>
 80090c8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80090cc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80090d0:	ee17 3a90 	vmov	r3, s15
 80090d4:	4419      	add	r1, r3
 80090d6:	ee07 1a90 	vmov	s15, r1
 80090da:	ee37 0ac6 	vsub.f32	s0, s15, s12
 80090de:	4770      	bx	lr
 80090e0:	2b16      	cmp	r3, #22
 80090e2:	dc11      	bgt.n	8009108 <expm1f+0x1f8>
 80090e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80090e8:	fa42 f303 	asr.w	r3, r2, r3
 80090ec:	f1c3 537e 	rsb	r3, r3, #1065353216	@ 0x3f800000
 80090f0:	ee07 3a10 	vmov	s14, r3
 80090f4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80090f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090fc:	ee17 3a90 	vmov	r3, s15
 8009100:	440b      	add	r3, r1
 8009102:	ee00 3a10 	vmov	s0, r3
 8009106:	4770      	bx	lr
 8009108:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800910c:	05db      	lsls	r3, r3, #23
 800910e:	ee07 3a10 	vmov	s14, r3
 8009112:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009116:	ee70 7a67 	vsub.f32	s15, s0, s15
 800911a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800911e:	ee17 3a90 	vmov	r3, s15
 8009122:	e7ed      	b.n	8009100 <expm1f+0x1f0>
 8009124:	4195b843 	.word	0x4195b843
 8009128:	42b17217 	.word	0x42b17217
 800912c:	0da24260 	.word	0x0da24260
 8009130:	3eb17218 	.word	0x3eb17218
 8009134:	3f851591 	.word	0x3f851591
 8009138:	3f317180 	.word	0x3f317180
 800913c:	3717f7d1 	.word	0x3717f7d1
 8009140:	b457edbb 	.word	0xb457edbb
 8009144:	36867e54 	.word	0x36867e54
 8009148:	bd088889 	.word	0xbd088889
 800914c:	b8a670cd 	.word	0xb8a670cd
 8009150:	3ad00d01 	.word	0x3ad00d01
 8009154:	b717f7d1 	.word	0xb717f7d1
 8009158:	3fb8aa3b 	.word	0x3fb8aa3b
 800915c:	7149f2ca 	.word	0x7149f2ca

08009160 <with_errnof>:
 8009160:	b510      	push	{r4, lr}
 8009162:	ed2d 8b02 	vpush	{d8}
 8009166:	eeb0 8a40 	vmov.f32	s16, s0
 800916a:	4604      	mov	r4, r0
 800916c:	f7ff fd42 	bl	8008bf4 <__errno>
 8009170:	eeb0 0a48 	vmov.f32	s0, s16
 8009174:	ecbd 8b02 	vpop	{d8}
 8009178:	6004      	str	r4, [r0, #0]
 800917a:	bd10      	pop	{r4, pc}

0800917c <xflowf>:
 800917c:	b130      	cbz	r0, 800918c <xflowf+0x10>
 800917e:	eef1 7a40 	vneg.f32	s15, s0
 8009182:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009186:	2022      	movs	r0, #34	@ 0x22
 8009188:	f7ff bfea 	b.w	8009160 <with_errnof>
 800918c:	eef0 7a40 	vmov.f32	s15, s0
 8009190:	e7f7      	b.n	8009182 <xflowf+0x6>
	...

08009194 <__math_uflowf>:
 8009194:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800919c <__math_uflowf+0x8>
 8009198:	f7ff bff0 	b.w	800917c <xflowf>
 800919c:	10000000 	.word	0x10000000

080091a0 <__math_oflowf>:
 80091a0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80091a8 <__math_oflowf+0x8>
 80091a4:	f7ff bfea 	b.w	800917c <xflowf>
 80091a8:	70000000 	.word	0x70000000

080091ac <__kernel_cosf>:
 80091ac:	ee10 3a10 	vmov	r3, s0
 80091b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80091b4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80091b8:	eef0 6a40 	vmov.f32	s13, s0
 80091bc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80091c0:	d204      	bcs.n	80091cc <__kernel_cosf+0x20>
 80091c2:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80091c6:	ee17 2a90 	vmov	r2, s15
 80091ca:	b342      	cbz	r2, 800921e <__kernel_cosf+0x72>
 80091cc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80091d0:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800923c <__kernel_cosf+0x90>
 80091d4:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8009240 <__kernel_cosf+0x94>
 80091d8:	4a1a      	ldr	r2, [pc, #104]	@ (8009244 <__kernel_cosf+0x98>)
 80091da:	eea7 6a27 	vfma.f32	s12, s14, s15
 80091de:	4293      	cmp	r3, r2
 80091e0:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009248 <__kernel_cosf+0x9c>
 80091e4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80091e8:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800924c <__kernel_cosf+0xa0>
 80091ec:	eea7 6a87 	vfma.f32	s12, s15, s14
 80091f0:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8009250 <__kernel_cosf+0xa4>
 80091f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80091f8:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8009254 <__kernel_cosf+0xa8>
 80091fc:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009200:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8009204:	ee26 6a07 	vmul.f32	s12, s12, s14
 8009208:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800920c:	eee7 0a06 	vfma.f32	s1, s14, s12
 8009210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009214:	d804      	bhi.n	8009220 <__kernel_cosf+0x74>
 8009216:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800921a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800921e:	4770      	bx	lr
 8009220:	4a0d      	ldr	r2, [pc, #52]	@ (8009258 <__kernel_cosf+0xac>)
 8009222:	4293      	cmp	r3, r2
 8009224:	bf9a      	itte	ls
 8009226:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800922a:	ee07 3a10 	vmovls	s14, r3
 800922e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8009232:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009236:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800923a:	e7ec      	b.n	8009216 <__kernel_cosf+0x6a>
 800923c:	ad47d74e 	.word	0xad47d74e
 8009240:	310f74f6 	.word	0x310f74f6
 8009244:	3e999999 	.word	0x3e999999
 8009248:	b493f27c 	.word	0xb493f27c
 800924c:	37d00d01 	.word	0x37d00d01
 8009250:	bab60b61 	.word	0xbab60b61
 8009254:	3d2aaaab 	.word	0x3d2aaaab
 8009258:	3f480000 	.word	0x3f480000

0800925c <__kernel_sinf>:
 800925c:	ee10 3a10 	vmov	r3, s0
 8009260:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009264:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8009268:	d204      	bcs.n	8009274 <__kernel_sinf+0x18>
 800926a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800926e:	ee17 3a90 	vmov	r3, s15
 8009272:	b35b      	cbz	r3, 80092cc <__kernel_sinf+0x70>
 8009274:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009278:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80092d0 <__kernel_sinf+0x74>
 800927c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80092d4 <__kernel_sinf+0x78>
 8009280:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009284:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80092d8 <__kernel_sinf+0x7c>
 8009288:	eee6 7a07 	vfma.f32	s15, s12, s14
 800928c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80092dc <__kernel_sinf+0x80>
 8009290:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009294:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80092e0 <__kernel_sinf+0x84>
 8009298:	ee60 6a07 	vmul.f32	s13, s0, s14
 800929c:	eee6 7a07 	vfma.f32	s15, s12, s14
 80092a0:	b930      	cbnz	r0, 80092b0 <__kernel_sinf+0x54>
 80092a2:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80092e4 <__kernel_sinf+0x88>
 80092a6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80092aa:	eea6 0a26 	vfma.f32	s0, s12, s13
 80092ae:	4770      	bx	lr
 80092b0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80092b4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80092b8:	eee0 7a86 	vfma.f32	s15, s1, s12
 80092bc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80092c0:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80092e8 <__kernel_sinf+0x8c>
 80092c4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80092c8:	ee30 0a60 	vsub.f32	s0, s0, s1
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	2f2ec9d3 	.word	0x2f2ec9d3
 80092d4:	b2d72f34 	.word	0xb2d72f34
 80092d8:	3638ef1b 	.word	0x3638ef1b
 80092dc:	b9500d01 	.word	0xb9500d01
 80092e0:	3c088889 	.word	0x3c088889
 80092e4:	be2aaaab 	.word	0xbe2aaaab
 80092e8:	3e2aaaab 	.word	0x3e2aaaab

080092ec <__ieee754_powf>:
 80092ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092f0:	ee10 4a90 	vmov	r4, s1
 80092f4:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 80092f8:	ed2d 8b02 	vpush	{d8}
 80092fc:	ee10 6a10 	vmov	r6, s0
 8009300:	eeb0 8a40 	vmov.f32	s16, s0
 8009304:	eef0 8a60 	vmov.f32	s17, s1
 8009308:	d10c      	bne.n	8009324 <__ieee754_powf+0x38>
 800930a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800930e:	0076      	lsls	r6, r6, #1
 8009310:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8009314:	f240 8274 	bls.w	8009800 <__ieee754_powf+0x514>
 8009318:	ee38 0a28 	vadd.f32	s0, s16, s17
 800931c:	ecbd 8b02 	vpop	{d8}
 8009320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009324:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8009328:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800932c:	d802      	bhi.n	8009334 <__ieee754_powf+0x48>
 800932e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8009332:	d908      	bls.n	8009346 <__ieee754_powf+0x5a>
 8009334:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8009338:	d1ee      	bne.n	8009318 <__ieee754_powf+0x2c>
 800933a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800933e:	0064      	lsls	r4, r4, #1
 8009340:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8009344:	e7e6      	b.n	8009314 <__ieee754_powf+0x28>
 8009346:	2e00      	cmp	r6, #0
 8009348:	da1f      	bge.n	800938a <__ieee754_powf+0x9e>
 800934a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800934e:	f080 8260 	bcs.w	8009812 <__ieee754_powf+0x526>
 8009352:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8009356:	d32f      	bcc.n	80093b8 <__ieee754_powf+0xcc>
 8009358:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800935c:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8009360:	fa49 f503 	asr.w	r5, r9, r3
 8009364:	fa05 f303 	lsl.w	r3, r5, r3
 8009368:	454b      	cmp	r3, r9
 800936a:	d123      	bne.n	80093b4 <__ieee754_powf+0xc8>
 800936c:	f005 0501 	and.w	r5, r5, #1
 8009370:	f1c5 0502 	rsb	r5, r5, #2
 8009374:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8009378:	d11f      	bne.n	80093ba <__ieee754_powf+0xce>
 800937a:	2c00      	cmp	r4, #0
 800937c:	f280 8246 	bge.w	800980c <__ieee754_powf+0x520>
 8009380:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009384:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8009388:	e7c8      	b.n	800931c <__ieee754_powf+0x30>
 800938a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800938e:	d111      	bne.n	80093b4 <__ieee754_powf+0xc8>
 8009390:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8009394:	f000 8234 	beq.w	8009800 <__ieee754_powf+0x514>
 8009398:	d906      	bls.n	80093a8 <__ieee754_powf+0xbc>
 800939a:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 80096b0 <__ieee754_powf+0x3c4>
 800939e:	2c00      	cmp	r4, #0
 80093a0:	bfa8      	it	ge
 80093a2:	eeb0 0a68 	vmovge.f32	s0, s17
 80093a6:	e7b9      	b.n	800931c <__ieee754_powf+0x30>
 80093a8:	2c00      	cmp	r4, #0
 80093aa:	f280 822c 	bge.w	8009806 <__ieee754_powf+0x51a>
 80093ae:	eeb1 0a68 	vneg.f32	s0, s17
 80093b2:	e7b3      	b.n	800931c <__ieee754_powf+0x30>
 80093b4:	2500      	movs	r5, #0
 80093b6:	e7dd      	b.n	8009374 <__ieee754_powf+0x88>
 80093b8:	2500      	movs	r5, #0
 80093ba:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80093be:	d102      	bne.n	80093c6 <__ieee754_powf+0xda>
 80093c0:	ee28 0a08 	vmul.f32	s0, s16, s16
 80093c4:	e7aa      	b.n	800931c <__ieee754_powf+0x30>
 80093c6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80093ca:	f040 8227 	bne.w	800981c <__ieee754_powf+0x530>
 80093ce:	2e00      	cmp	r6, #0
 80093d0:	f2c0 8224 	blt.w	800981c <__ieee754_powf+0x530>
 80093d4:	eeb0 0a48 	vmov.f32	s0, s16
 80093d8:	ecbd 8b02 	vpop	{d8}
 80093dc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093e0:	f000 bbf0 	b.w	8009bc4 <__ieee754_sqrtf>
 80093e4:	2d01      	cmp	r5, #1
 80093e6:	d199      	bne.n	800931c <__ieee754_powf+0x30>
 80093e8:	eeb1 0a40 	vneg.f32	s0, s0
 80093ec:	e796      	b.n	800931c <__ieee754_powf+0x30>
 80093ee:	0ff0      	lsrs	r0, r6, #31
 80093f0:	3801      	subs	r0, #1
 80093f2:	ea55 0300 	orrs.w	r3, r5, r0
 80093f6:	d104      	bne.n	8009402 <__ieee754_powf+0x116>
 80093f8:	ee38 8a48 	vsub.f32	s16, s16, s16
 80093fc:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8009400:	e78c      	b.n	800931c <__ieee754_powf+0x30>
 8009402:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8009406:	d96d      	bls.n	80094e4 <__ieee754_powf+0x1f8>
 8009408:	4baa      	ldr	r3, [pc, #680]	@ (80096b4 <__ieee754_powf+0x3c8>)
 800940a:	4598      	cmp	r8, r3
 800940c:	d808      	bhi.n	8009420 <__ieee754_powf+0x134>
 800940e:	2c00      	cmp	r4, #0
 8009410:	da0b      	bge.n	800942a <__ieee754_powf+0x13e>
 8009412:	2000      	movs	r0, #0
 8009414:	ecbd 8b02 	vpop	{d8}
 8009418:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800941c:	f7ff bec0 	b.w	80091a0 <__math_oflowf>
 8009420:	4ba5      	ldr	r3, [pc, #660]	@ (80096b8 <__ieee754_powf+0x3cc>)
 8009422:	4598      	cmp	r8, r3
 8009424:	d908      	bls.n	8009438 <__ieee754_powf+0x14c>
 8009426:	2c00      	cmp	r4, #0
 8009428:	dcf3      	bgt.n	8009412 <__ieee754_powf+0x126>
 800942a:	2000      	movs	r0, #0
 800942c:	ecbd 8b02 	vpop	{d8}
 8009430:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009434:	f7ff beae 	b.w	8009194 <__math_uflowf>
 8009438:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800943c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009440:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 80096bc <__ieee754_powf+0x3d0>
 8009444:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8009448:	eee0 6a67 	vfms.f32	s13, s0, s15
 800944c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009450:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8009454:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009458:	eddf 6a99 	vldr	s13, [pc, #612]	@ 80096c0 <__ieee754_powf+0x3d4>
 800945c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009460:	eddf 7a98 	vldr	s15, [pc, #608]	@ 80096c4 <__ieee754_powf+0x3d8>
 8009464:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8009468:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80096c8 <__ieee754_powf+0x3dc>
 800946c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009470:	eeb0 7a67 	vmov.f32	s14, s15
 8009474:	eea0 7a26 	vfma.f32	s14, s0, s13
 8009478:	ee17 3a10 	vmov	r3, s14
 800947c:	f36f 030b 	bfc	r3, #0, #12
 8009480:	ee07 3a10 	vmov	s14, r3
 8009484:	eeb0 6a47 	vmov.f32	s12, s14
 8009488:	eea0 6a66 	vfms.f32	s12, s0, s13
 800948c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009490:	3d01      	subs	r5, #1
 8009492:	4305      	orrs	r5, r0
 8009494:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009498:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800949c:	f36f 040b 	bfc	r4, #0, #12
 80094a0:	bf18      	it	ne
 80094a2:	eeb0 8a66 	vmovne.f32	s16, s13
 80094a6:	ee06 4a90 	vmov	s13, r4
 80094aa:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80094ae:	ee38 6ae6 	vsub.f32	s12, s17, s13
 80094b2:	ee67 7a26 	vmul.f32	s15, s14, s13
 80094b6:	eee6 0a07 	vfma.f32	s1, s12, s14
 80094ba:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80094be:	ee17 1a10 	vmov	r1, s14
 80094c2:	2900      	cmp	r1, #0
 80094c4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80094c8:	f340 80dd 	ble.w	8009686 <__ieee754_powf+0x39a>
 80094cc:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80094d0:	f240 80ca 	bls.w	8009668 <__ieee754_powf+0x37c>
 80094d4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80094d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094dc:	bf4c      	ite	mi
 80094de:	2001      	movmi	r0, #1
 80094e0:	2000      	movpl	r0, #0
 80094e2:	e797      	b.n	8009414 <__ieee754_powf+0x128>
 80094e4:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80094e8:	bf01      	itttt	eq
 80094ea:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 80096cc <__ieee754_powf+0x3e0>
 80094ee:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80094f2:	f06f 0317 	mvneq.w	r3, #23
 80094f6:	ee17 7a90 	vmoveq	r7, s15
 80094fa:	ea4f 52e7 	mov.w	r2, r7, asr #23
 80094fe:	bf18      	it	ne
 8009500:	2300      	movne	r3, #0
 8009502:	3a7f      	subs	r2, #127	@ 0x7f
 8009504:	441a      	add	r2, r3
 8009506:	4b72      	ldr	r3, [pc, #456]	@ (80096d0 <__ieee754_powf+0x3e4>)
 8009508:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800950c:	429f      	cmp	r7, r3
 800950e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8009512:	dd06      	ble.n	8009522 <__ieee754_powf+0x236>
 8009514:	4b6f      	ldr	r3, [pc, #444]	@ (80096d4 <__ieee754_powf+0x3e8>)
 8009516:	429f      	cmp	r7, r3
 8009518:	f340 80a4 	ble.w	8009664 <__ieee754_powf+0x378>
 800951c:	3201      	adds	r2, #1
 800951e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8009522:	2600      	movs	r6, #0
 8009524:	4b6c      	ldr	r3, [pc, #432]	@ (80096d8 <__ieee754_powf+0x3ec>)
 8009526:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800952a:	ee07 1a10 	vmov	s14, r1
 800952e:	edd3 5a00 	vldr	s11, [r3]
 8009532:	4b6a      	ldr	r3, [pc, #424]	@ (80096dc <__ieee754_powf+0x3f0>)
 8009534:	ee75 7a87 	vadd.f32	s15, s11, s14
 8009538:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800953c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8009540:	1049      	asrs	r1, r1, #1
 8009542:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8009546:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800954a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800954e:	ee37 6a65 	vsub.f32	s12, s14, s11
 8009552:	ee07 1a90 	vmov	s15, r1
 8009556:	ee26 5a24 	vmul.f32	s10, s12, s9
 800955a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800955e:	ee15 7a10 	vmov	r7, s10
 8009562:	401f      	ands	r7, r3
 8009564:	ee06 7a90 	vmov	s13, r7
 8009568:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800956c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8009570:	ee65 7a05 	vmul.f32	s15, s10, s10
 8009574:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8009578:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80096e0 <__ieee754_powf+0x3f4>
 800957c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80096e4 <__ieee754_powf+0x3f8>
 8009580:	eee7 5a87 	vfma.f32	s11, s15, s14
 8009584:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80096e8 <__ieee754_powf+0x3fc>
 8009588:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800958c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 80096bc <__ieee754_powf+0x3d0>
 8009590:	eee7 5a27 	vfma.f32	s11, s14, s15
 8009594:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80096ec <__ieee754_powf+0x400>
 8009598:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800959c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 80096f0 <__ieee754_powf+0x404>
 80095a0:	ee26 6a24 	vmul.f32	s12, s12, s9
 80095a4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80095a8:	ee35 7a26 	vadd.f32	s14, s10, s13
 80095ac:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80095b0:	ee27 7a06 	vmul.f32	s14, s14, s12
 80095b4:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80095b8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80095bc:	eef0 5a67 	vmov.f32	s11, s15
 80095c0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80095c4:	ee75 5a87 	vadd.f32	s11, s11, s14
 80095c8:	ee15 1a90 	vmov	r1, s11
 80095cc:	4019      	ands	r1, r3
 80095ce:	ee05 1a90 	vmov	s11, r1
 80095d2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80095d6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80095da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095de:	ee67 7a85 	vmul.f32	s15, s15, s10
 80095e2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80095e6:	eeb0 6a67 	vmov.f32	s12, s15
 80095ea:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80095ee:	ee16 1a10 	vmov	r1, s12
 80095f2:	4019      	ands	r1, r3
 80095f4:	ee06 1a10 	vmov	s12, r1
 80095f8:	eeb0 7a46 	vmov.f32	s14, s12
 80095fc:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8009600:	493c      	ldr	r1, [pc, #240]	@ (80096f4 <__ieee754_powf+0x408>)
 8009602:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8009606:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800960a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80096f8 <__ieee754_powf+0x40c>
 800960e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 80096fc <__ieee754_powf+0x410>
 8009612:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009616:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8009700 <__ieee754_powf+0x414>
 800961a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800961e:	ed91 7a00 	vldr	s14, [r1]
 8009622:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009626:	ee07 2a10 	vmov	s14, r2
 800962a:	4a36      	ldr	r2, [pc, #216]	@ (8009704 <__ieee754_powf+0x418>)
 800962c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009630:	eeb0 7a67 	vmov.f32	s14, s15
 8009634:	eea6 7a25 	vfma.f32	s14, s12, s11
 8009638:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800963c:	ed92 5a00 	vldr	s10, [r2]
 8009640:	ee37 7a05 	vadd.f32	s14, s14, s10
 8009644:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009648:	ee17 2a10 	vmov	r2, s14
 800964c:	401a      	ands	r2, r3
 800964e:	ee07 2a10 	vmov	s14, r2
 8009652:	ee77 6a66 	vsub.f32	s13, s14, s13
 8009656:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800965a:	eee6 6a65 	vfms.f32	s13, s12, s11
 800965e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009662:	e715      	b.n	8009490 <__ieee754_powf+0x1a4>
 8009664:	2601      	movs	r6, #1
 8009666:	e75d      	b.n	8009524 <__ieee754_powf+0x238>
 8009668:	d152      	bne.n	8009710 <__ieee754_powf+0x424>
 800966a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8009708 <__ieee754_powf+0x41c>
 800966e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009672:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8009676:	eef4 6ac7 	vcmpe.f32	s13, s14
 800967a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800967e:	f73f af29 	bgt.w	80094d4 <__ieee754_powf+0x1e8>
 8009682:	2386      	movs	r3, #134	@ 0x86
 8009684:	e048      	b.n	8009718 <__ieee754_powf+0x42c>
 8009686:	4a21      	ldr	r2, [pc, #132]	@ (800970c <__ieee754_powf+0x420>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d907      	bls.n	800969c <__ieee754_powf+0x3b0>
 800968c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009694:	bf4c      	ite	mi
 8009696:	2001      	movmi	r0, #1
 8009698:	2000      	movpl	r0, #0
 800969a:	e6c7      	b.n	800942c <__ieee754_powf+0x140>
 800969c:	d138      	bne.n	8009710 <__ieee754_powf+0x424>
 800969e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80096a2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80096a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096aa:	dbea      	blt.n	8009682 <__ieee754_powf+0x396>
 80096ac:	e7ee      	b.n	800968c <__ieee754_powf+0x3a0>
 80096ae:	bf00      	nop
 80096b0:	00000000 	.word	0x00000000
 80096b4:	3f7ffff3 	.word	0x3f7ffff3
 80096b8:	3f800007 	.word	0x3f800007
 80096bc:	3eaaaaab 	.word	0x3eaaaaab
 80096c0:	3fb8aa00 	.word	0x3fb8aa00
 80096c4:	3fb8aa3b 	.word	0x3fb8aa3b
 80096c8:	36eca570 	.word	0x36eca570
 80096cc:	4b800000 	.word	0x4b800000
 80096d0:	001cc471 	.word	0x001cc471
 80096d4:	005db3d6 	.word	0x005db3d6
 80096d8:	0800a178 	.word	0x0800a178
 80096dc:	fffff000 	.word	0xfffff000
 80096e0:	3e6c3255 	.word	0x3e6c3255
 80096e4:	3e53f142 	.word	0x3e53f142
 80096e8:	3e8ba305 	.word	0x3e8ba305
 80096ec:	3edb6db7 	.word	0x3edb6db7
 80096f0:	3f19999a 	.word	0x3f19999a
 80096f4:	0800a168 	.word	0x0800a168
 80096f8:	3f76384f 	.word	0x3f76384f
 80096fc:	3f763800 	.word	0x3f763800
 8009700:	369dc3a0 	.word	0x369dc3a0
 8009704:	0800a170 	.word	0x0800a170
 8009708:	3338aa3c 	.word	0x3338aa3c
 800970c:	43160000 	.word	0x43160000
 8009710:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8009714:	d96f      	bls.n	80097f6 <__ieee754_powf+0x50a>
 8009716:	15db      	asrs	r3, r3, #23
 8009718:	3b7e      	subs	r3, #126	@ 0x7e
 800971a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800971e:	4118      	asrs	r0, r3
 8009720:	4408      	add	r0, r1
 8009722:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009726:	4a4e      	ldr	r2, [pc, #312]	@ (8009860 <__ieee754_powf+0x574>)
 8009728:	3b7f      	subs	r3, #127	@ 0x7f
 800972a:	411a      	asrs	r2, r3
 800972c:	4002      	ands	r2, r0
 800972e:	ee07 2a10 	vmov	s14, r2
 8009732:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8009736:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800973a:	f1c3 0317 	rsb	r3, r3, #23
 800973e:	4118      	asrs	r0, r3
 8009740:	2900      	cmp	r1, #0
 8009742:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009746:	bfb8      	it	lt
 8009748:	4240      	neglt	r0, r0
 800974a:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800974e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8009864 <__ieee754_powf+0x578>
 8009752:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8009868 <__ieee754_powf+0x57c>
 8009756:	ee16 3a90 	vmov	r3, s13
 800975a:	f36f 030b 	bfc	r3, #0, #12
 800975e:	ee06 3a90 	vmov	s13, r3
 8009762:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009766:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800976a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800976e:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800986c <__ieee754_powf+0x580>
 8009772:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009776:	eee0 7a87 	vfma.f32	s15, s1, s14
 800977a:	eeb0 7a67 	vmov.f32	s14, s15
 800977e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8009782:	eef0 5a47 	vmov.f32	s11, s14
 8009786:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800978a:	ee67 6a07 	vmul.f32	s13, s14, s14
 800978e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009792:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8009870 <__ieee754_powf+0x584>
 8009796:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8009874 <__ieee754_powf+0x588>
 800979a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800979e:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8009878 <__ieee754_powf+0x58c>
 80097a2:	eee6 5a26 	vfma.f32	s11, s12, s13
 80097a6:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800987c <__ieee754_powf+0x590>
 80097aa:	eea5 6aa6 	vfma.f32	s12, s11, s13
 80097ae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009880 <__ieee754_powf+0x594>
 80097b2:	eee6 5a26 	vfma.f32	s11, s12, s13
 80097b6:	eeb0 6a47 	vmov.f32	s12, s14
 80097ba:	eea5 6ae6 	vfms.f32	s12, s11, s13
 80097be:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80097c2:	ee67 5a06 	vmul.f32	s11, s14, s12
 80097c6:	ee36 6a66 	vsub.f32	s12, s12, s13
 80097ca:	eee7 7a27 	vfma.f32	s15, s14, s15
 80097ce:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80097d2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80097d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80097da:	ee30 0a67 	vsub.f32	s0, s0, s15
 80097de:	ee10 3a10 	vmov	r3, s0
 80097e2:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80097e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80097ea:	da06      	bge.n	80097fa <__ieee754_powf+0x50e>
 80097ec:	f000 f984 	bl	8009af8 <scalbnf>
 80097f0:	ee20 0a08 	vmul.f32	s0, s0, s16
 80097f4:	e592      	b.n	800931c <__ieee754_powf+0x30>
 80097f6:	2000      	movs	r0, #0
 80097f8:	e7a7      	b.n	800974a <__ieee754_powf+0x45e>
 80097fa:	ee00 3a10 	vmov	s0, r3
 80097fe:	e7f7      	b.n	80097f0 <__ieee754_powf+0x504>
 8009800:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009804:	e58a      	b.n	800931c <__ieee754_powf+0x30>
 8009806:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8009884 <__ieee754_powf+0x598>
 800980a:	e587      	b.n	800931c <__ieee754_powf+0x30>
 800980c:	eeb0 0a48 	vmov.f32	s0, s16
 8009810:	e584      	b.n	800931c <__ieee754_powf+0x30>
 8009812:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8009816:	f43f adbb 	beq.w	8009390 <__ieee754_powf+0xa4>
 800981a:	2502      	movs	r5, #2
 800981c:	eeb0 0a48 	vmov.f32	s0, s16
 8009820:	f000 f962 	bl	8009ae8 <fabsf>
 8009824:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8009828:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800982c:	4647      	mov	r7, r8
 800982e:	d003      	beq.n	8009838 <__ieee754_powf+0x54c>
 8009830:	f1b8 0f00 	cmp.w	r8, #0
 8009834:	f47f addb 	bne.w	80093ee <__ieee754_powf+0x102>
 8009838:	2c00      	cmp	r4, #0
 800983a:	bfbc      	itt	lt
 800983c:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8009840:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8009844:	2e00      	cmp	r6, #0
 8009846:	f6bf ad69 	bge.w	800931c <__ieee754_powf+0x30>
 800984a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800984e:	ea58 0805 	orrs.w	r8, r8, r5
 8009852:	f47f adc7 	bne.w	80093e4 <__ieee754_powf+0xf8>
 8009856:	ee70 7a40 	vsub.f32	s15, s0, s0
 800985a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800985e:	e55d      	b.n	800931c <__ieee754_powf+0x30>
 8009860:	ff800000 	.word	0xff800000
 8009864:	3f317218 	.word	0x3f317218
 8009868:	3f317200 	.word	0x3f317200
 800986c:	35bfbe8c 	.word	0x35bfbe8c
 8009870:	b5ddea0e 	.word	0xb5ddea0e
 8009874:	3331bb4c 	.word	0x3331bb4c
 8009878:	388ab355 	.word	0x388ab355
 800987c:	bb360b61 	.word	0xbb360b61
 8009880:	3e2aaaab 	.word	0x3e2aaaab
 8009884:	00000000 	.word	0x00000000

08009888 <__ieee754_rem_pio2f>:
 8009888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800988a:	ee10 6a10 	vmov	r6, s0
 800988e:	4b88      	ldr	r3, [pc, #544]	@ (8009ab0 <__ieee754_rem_pio2f+0x228>)
 8009890:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8009894:	429d      	cmp	r5, r3
 8009896:	b087      	sub	sp, #28
 8009898:	4604      	mov	r4, r0
 800989a:	d805      	bhi.n	80098a8 <__ieee754_rem_pio2f+0x20>
 800989c:	2300      	movs	r3, #0
 800989e:	ed80 0a00 	vstr	s0, [r0]
 80098a2:	6043      	str	r3, [r0, #4]
 80098a4:	2000      	movs	r0, #0
 80098a6:	e022      	b.n	80098ee <__ieee754_rem_pio2f+0x66>
 80098a8:	4b82      	ldr	r3, [pc, #520]	@ (8009ab4 <__ieee754_rem_pio2f+0x22c>)
 80098aa:	429d      	cmp	r5, r3
 80098ac:	d83a      	bhi.n	8009924 <__ieee754_rem_pio2f+0x9c>
 80098ae:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80098b2:	2e00      	cmp	r6, #0
 80098b4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8009ab8 <__ieee754_rem_pio2f+0x230>
 80098b8:	4a80      	ldr	r2, [pc, #512]	@ (8009abc <__ieee754_rem_pio2f+0x234>)
 80098ba:	f023 030f 	bic.w	r3, r3, #15
 80098be:	dd18      	ble.n	80098f2 <__ieee754_rem_pio2f+0x6a>
 80098c0:	4293      	cmp	r3, r2
 80098c2:	ee70 7a47 	vsub.f32	s15, s0, s14
 80098c6:	bf09      	itett	eq
 80098c8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8009ac0 <__ieee754_rem_pio2f+0x238>
 80098cc:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8009ac4 <__ieee754_rem_pio2f+0x23c>
 80098d0:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8009ac8 <__ieee754_rem_pio2f+0x240>
 80098d4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80098d8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80098dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80098e0:	ed80 7a00 	vstr	s14, [r0]
 80098e4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80098e8:	edc0 7a01 	vstr	s15, [r0, #4]
 80098ec:	2001      	movs	r0, #1
 80098ee:	b007      	add	sp, #28
 80098f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098f2:	4293      	cmp	r3, r2
 80098f4:	ee70 7a07 	vadd.f32	s15, s0, s14
 80098f8:	bf09      	itett	eq
 80098fa:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8009ac0 <__ieee754_rem_pio2f+0x238>
 80098fe:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8009ac4 <__ieee754_rem_pio2f+0x23c>
 8009902:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8009ac8 <__ieee754_rem_pio2f+0x240>
 8009906:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800990a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800990e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009912:	ed80 7a00 	vstr	s14, [r0]
 8009916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800991a:	edc0 7a01 	vstr	s15, [r0, #4]
 800991e:	f04f 30ff 	mov.w	r0, #4294967295
 8009922:	e7e4      	b.n	80098ee <__ieee754_rem_pio2f+0x66>
 8009924:	4b69      	ldr	r3, [pc, #420]	@ (8009acc <__ieee754_rem_pio2f+0x244>)
 8009926:	429d      	cmp	r5, r3
 8009928:	d873      	bhi.n	8009a12 <__ieee754_rem_pio2f+0x18a>
 800992a:	f000 f8dd 	bl	8009ae8 <fabsf>
 800992e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8009ad0 <__ieee754_rem_pio2f+0x248>
 8009932:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009936:	eee0 7a07 	vfma.f32	s15, s0, s14
 800993a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800993e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009942:	ee17 0a90 	vmov	r0, s15
 8009946:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8009ab8 <__ieee754_rem_pio2f+0x230>
 800994a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800994e:	281f      	cmp	r0, #31
 8009950:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8009ac4 <__ieee754_rem_pio2f+0x23c>
 8009954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009958:	eeb1 6a47 	vneg.f32	s12, s14
 800995c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009960:	ee16 1a90 	vmov	r1, s13
 8009964:	dc09      	bgt.n	800997a <__ieee754_rem_pio2f+0xf2>
 8009966:	4a5b      	ldr	r2, [pc, #364]	@ (8009ad4 <__ieee754_rem_pio2f+0x24c>)
 8009968:	1e47      	subs	r7, r0, #1
 800996a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800996e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8009972:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009976:	4293      	cmp	r3, r2
 8009978:	d107      	bne.n	800998a <__ieee754_rem_pio2f+0x102>
 800997a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800997e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8009982:	2a08      	cmp	r2, #8
 8009984:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8009988:	dc14      	bgt.n	80099b4 <__ieee754_rem_pio2f+0x12c>
 800998a:	6021      	str	r1, [r4, #0]
 800998c:	ed94 7a00 	vldr	s14, [r4]
 8009990:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009994:	2e00      	cmp	r6, #0
 8009996:	ee30 0a67 	vsub.f32	s0, s0, s15
 800999a:	ed84 0a01 	vstr	s0, [r4, #4]
 800999e:	daa6      	bge.n	80098ee <__ieee754_rem_pio2f+0x66>
 80099a0:	eeb1 7a47 	vneg.f32	s14, s14
 80099a4:	eeb1 0a40 	vneg.f32	s0, s0
 80099a8:	ed84 7a00 	vstr	s14, [r4]
 80099ac:	ed84 0a01 	vstr	s0, [r4, #4]
 80099b0:	4240      	negs	r0, r0
 80099b2:	e79c      	b.n	80098ee <__ieee754_rem_pio2f+0x66>
 80099b4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8009ac0 <__ieee754_rem_pio2f+0x238>
 80099b8:	eef0 6a40 	vmov.f32	s13, s0
 80099bc:	eee6 6a25 	vfma.f32	s13, s12, s11
 80099c0:	ee70 7a66 	vsub.f32	s15, s0, s13
 80099c4:	eee6 7a25 	vfma.f32	s15, s12, s11
 80099c8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009ac8 <__ieee754_rem_pio2f+0x240>
 80099cc:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80099d0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80099d4:	ee15 2a90 	vmov	r2, s11
 80099d8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80099dc:	1a5b      	subs	r3, r3, r1
 80099de:	2b19      	cmp	r3, #25
 80099e0:	dc04      	bgt.n	80099ec <__ieee754_rem_pio2f+0x164>
 80099e2:	edc4 5a00 	vstr	s11, [r4]
 80099e6:	eeb0 0a66 	vmov.f32	s0, s13
 80099ea:	e7cf      	b.n	800998c <__ieee754_rem_pio2f+0x104>
 80099ec:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8009ad8 <__ieee754_rem_pio2f+0x250>
 80099f0:	eeb0 0a66 	vmov.f32	s0, s13
 80099f4:	eea6 0a25 	vfma.f32	s0, s12, s11
 80099f8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80099fc:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8009adc <__ieee754_rem_pio2f+0x254>
 8009a00:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009a04:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8009a08:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009a0c:	ed84 7a00 	vstr	s14, [r4]
 8009a10:	e7bc      	b.n	800998c <__ieee754_rem_pio2f+0x104>
 8009a12:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8009a16:	d306      	bcc.n	8009a26 <__ieee754_rem_pio2f+0x19e>
 8009a18:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009a1c:	edc0 7a01 	vstr	s15, [r0, #4]
 8009a20:	edc0 7a00 	vstr	s15, [r0]
 8009a24:	e73e      	b.n	80098a4 <__ieee754_rem_pio2f+0x1c>
 8009a26:	15ea      	asrs	r2, r5, #23
 8009a28:	3a86      	subs	r2, #134	@ 0x86
 8009a2a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8009a2e:	ee07 3a90 	vmov	s15, r3
 8009a32:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009a36:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8009ae0 <__ieee754_rem_pio2f+0x258>
 8009a3a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009a3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009a42:	ed8d 7a03 	vstr	s14, [sp, #12]
 8009a46:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009a4a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009a4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009a52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009a56:	ed8d 7a04 	vstr	s14, [sp, #16]
 8009a5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009a5e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a66:	edcd 7a05 	vstr	s15, [sp, #20]
 8009a6a:	d11e      	bne.n	8009aaa <__ieee754_rem_pio2f+0x222>
 8009a6c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8009a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a74:	bf0c      	ite	eq
 8009a76:	2301      	moveq	r3, #1
 8009a78:	2302      	movne	r3, #2
 8009a7a:	491a      	ldr	r1, [pc, #104]	@ (8009ae4 <__ieee754_rem_pio2f+0x25c>)
 8009a7c:	9101      	str	r1, [sp, #4]
 8009a7e:	2102      	movs	r1, #2
 8009a80:	9100      	str	r1, [sp, #0]
 8009a82:	a803      	add	r0, sp, #12
 8009a84:	4621      	mov	r1, r4
 8009a86:	f000 f8a1 	bl	8009bcc <__kernel_rem_pio2f>
 8009a8a:	2e00      	cmp	r6, #0
 8009a8c:	f6bf af2f 	bge.w	80098ee <__ieee754_rem_pio2f+0x66>
 8009a90:	edd4 7a00 	vldr	s15, [r4]
 8009a94:	eef1 7a67 	vneg.f32	s15, s15
 8009a98:	edc4 7a00 	vstr	s15, [r4]
 8009a9c:	edd4 7a01 	vldr	s15, [r4, #4]
 8009aa0:	eef1 7a67 	vneg.f32	s15, s15
 8009aa4:	edc4 7a01 	vstr	s15, [r4, #4]
 8009aa8:	e782      	b.n	80099b0 <__ieee754_rem_pio2f+0x128>
 8009aaa:	2303      	movs	r3, #3
 8009aac:	e7e5      	b.n	8009a7a <__ieee754_rem_pio2f+0x1f2>
 8009aae:	bf00      	nop
 8009ab0:	3f490fd8 	.word	0x3f490fd8
 8009ab4:	4016cbe3 	.word	0x4016cbe3
 8009ab8:	3fc90f80 	.word	0x3fc90f80
 8009abc:	3fc90fd0 	.word	0x3fc90fd0
 8009ac0:	37354400 	.word	0x37354400
 8009ac4:	37354443 	.word	0x37354443
 8009ac8:	2e85a308 	.word	0x2e85a308
 8009acc:	43490f80 	.word	0x43490f80
 8009ad0:	3f22f984 	.word	0x3f22f984
 8009ad4:	0800a180 	.word	0x0800a180
 8009ad8:	2e85a300 	.word	0x2e85a300
 8009adc:	248d3132 	.word	0x248d3132
 8009ae0:	43800000 	.word	0x43800000
 8009ae4:	0800a200 	.word	0x0800a200

08009ae8 <fabsf>:
 8009ae8:	ee10 3a10 	vmov	r3, s0
 8009aec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009af0:	ee00 3a10 	vmov	s0, r3
 8009af4:	4770      	bx	lr
	...

08009af8 <scalbnf>:
 8009af8:	ee10 3a10 	vmov	r3, s0
 8009afc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009b00:	d02b      	beq.n	8009b5a <scalbnf+0x62>
 8009b02:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8009b06:	d302      	bcc.n	8009b0e <scalbnf+0x16>
 8009b08:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009b0c:	4770      	bx	lr
 8009b0e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8009b12:	d123      	bne.n	8009b5c <scalbnf+0x64>
 8009b14:	4b24      	ldr	r3, [pc, #144]	@ (8009ba8 <scalbnf+0xb0>)
 8009b16:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8009bac <scalbnf+0xb4>
 8009b1a:	4298      	cmp	r0, r3
 8009b1c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009b20:	db17      	blt.n	8009b52 <scalbnf+0x5a>
 8009b22:	ee10 3a10 	vmov	r3, s0
 8009b26:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009b2a:	3a19      	subs	r2, #25
 8009b2c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009b30:	4288      	cmp	r0, r1
 8009b32:	dd15      	ble.n	8009b60 <scalbnf+0x68>
 8009b34:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8009bb0 <scalbnf+0xb8>
 8009b38:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8009bb4 <scalbnf+0xbc>
 8009b3c:	ee10 3a10 	vmov	r3, s0
 8009b40:	eeb0 7a67 	vmov.f32	s14, s15
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	bfb8      	it	lt
 8009b48:	eef0 7a66 	vmovlt.f32	s15, s13
 8009b4c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8009b50:	4770      	bx	lr
 8009b52:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009bb8 <scalbnf+0xc0>
 8009b56:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009b5a:	4770      	bx	lr
 8009b5c:	0dd2      	lsrs	r2, r2, #23
 8009b5e:	e7e5      	b.n	8009b2c <scalbnf+0x34>
 8009b60:	4410      	add	r0, r2
 8009b62:	28fe      	cmp	r0, #254	@ 0xfe
 8009b64:	dce6      	bgt.n	8009b34 <scalbnf+0x3c>
 8009b66:	2800      	cmp	r0, #0
 8009b68:	dd06      	ble.n	8009b78 <scalbnf+0x80>
 8009b6a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009b6e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009b72:	ee00 3a10 	vmov	s0, r3
 8009b76:	4770      	bx	lr
 8009b78:	f110 0f16 	cmn.w	r0, #22
 8009b7c:	da09      	bge.n	8009b92 <scalbnf+0x9a>
 8009b7e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8009bb8 <scalbnf+0xc0>
 8009b82:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8009bbc <scalbnf+0xc4>
 8009b86:	ee10 3a10 	vmov	r3, s0
 8009b8a:	eeb0 7a67 	vmov.f32	s14, s15
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	e7d9      	b.n	8009b46 <scalbnf+0x4e>
 8009b92:	3019      	adds	r0, #25
 8009b94:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009b98:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009b9c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8009bc0 <scalbnf+0xc8>
 8009ba0:	ee07 3a90 	vmov	s15, r3
 8009ba4:	e7d7      	b.n	8009b56 <scalbnf+0x5e>
 8009ba6:	bf00      	nop
 8009ba8:	ffff3cb0 	.word	0xffff3cb0
 8009bac:	4c000000 	.word	0x4c000000
 8009bb0:	7149f2ca 	.word	0x7149f2ca
 8009bb4:	f149f2ca 	.word	0xf149f2ca
 8009bb8:	0da24260 	.word	0x0da24260
 8009bbc:	8da24260 	.word	0x8da24260
 8009bc0:	33000000 	.word	0x33000000

08009bc4 <__ieee754_sqrtf>:
 8009bc4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009bc8:	4770      	bx	lr
	...

08009bcc <__kernel_rem_pio2f>:
 8009bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd0:	ed2d 8b04 	vpush	{d8-d9}
 8009bd4:	b0d9      	sub	sp, #356	@ 0x164
 8009bd6:	4690      	mov	r8, r2
 8009bd8:	9001      	str	r0, [sp, #4]
 8009bda:	4ab6      	ldr	r2, [pc, #728]	@ (8009eb4 <__kernel_rem_pio2f+0x2e8>)
 8009bdc:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8009bde:	f118 0f04 	cmn.w	r8, #4
 8009be2:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8009be6:	460f      	mov	r7, r1
 8009be8:	f103 3bff 	add.w	fp, r3, #4294967295
 8009bec:	db26      	blt.n	8009c3c <__kernel_rem_pio2f+0x70>
 8009bee:	f1b8 0203 	subs.w	r2, r8, #3
 8009bf2:	bf48      	it	mi
 8009bf4:	f108 0204 	addmi.w	r2, r8, #4
 8009bf8:	10d2      	asrs	r2, r2, #3
 8009bfa:	1c55      	adds	r5, r2, #1
 8009bfc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8009bfe:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8009ec4 <__kernel_rem_pio2f+0x2f8>
 8009c02:	00e8      	lsls	r0, r5, #3
 8009c04:	eba2 060b 	sub.w	r6, r2, fp
 8009c08:	9002      	str	r0, [sp, #8]
 8009c0a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8009c0e:	eb0a 0c0b 	add.w	ip, sl, fp
 8009c12:	ac1c      	add	r4, sp, #112	@ 0x70
 8009c14:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8009c18:	2000      	movs	r0, #0
 8009c1a:	4560      	cmp	r0, ip
 8009c1c:	dd10      	ble.n	8009c40 <__kernel_rem_pio2f+0x74>
 8009c1e:	a91c      	add	r1, sp, #112	@ 0x70
 8009c20:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8009c24:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8009c28:	2600      	movs	r6, #0
 8009c2a:	4556      	cmp	r6, sl
 8009c2c:	dc24      	bgt.n	8009c78 <__kernel_rem_pio2f+0xac>
 8009c2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8009c32:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8009ec4 <__kernel_rem_pio2f+0x2f8>
 8009c36:	4684      	mov	ip, r0
 8009c38:	2400      	movs	r4, #0
 8009c3a:	e016      	b.n	8009c6a <__kernel_rem_pio2f+0x9e>
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	e7dc      	b.n	8009bfa <__kernel_rem_pio2f+0x2e>
 8009c40:	42c6      	cmn	r6, r0
 8009c42:	bf5d      	ittte	pl
 8009c44:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8009c48:	ee07 1a90 	vmovpl	s15, r1
 8009c4c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8009c50:	eef0 7a47 	vmovmi.f32	s15, s14
 8009c54:	ece4 7a01 	vstmia	r4!, {s15}
 8009c58:	3001      	adds	r0, #1
 8009c5a:	e7de      	b.n	8009c1a <__kernel_rem_pio2f+0x4e>
 8009c5c:	ecfe 6a01 	vldmia	lr!, {s13}
 8009c60:	ed3c 7a01 	vldmdb	ip!, {s14}
 8009c64:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009c68:	3401      	adds	r4, #1
 8009c6a:	455c      	cmp	r4, fp
 8009c6c:	ddf6      	ble.n	8009c5c <__kernel_rem_pio2f+0x90>
 8009c6e:	ece9 7a01 	vstmia	r9!, {s15}
 8009c72:	3601      	adds	r6, #1
 8009c74:	3004      	adds	r0, #4
 8009c76:	e7d8      	b.n	8009c2a <__kernel_rem_pio2f+0x5e>
 8009c78:	a908      	add	r1, sp, #32
 8009c7a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c7e:	9104      	str	r1, [sp, #16]
 8009c80:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8009c82:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8009ec0 <__kernel_rem_pio2f+0x2f4>
 8009c86:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8009ebc <__kernel_rem_pio2f+0x2f0>
 8009c8a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8009c8e:	9203      	str	r2, [sp, #12]
 8009c90:	4654      	mov	r4, sl
 8009c92:	00a2      	lsls	r2, r4, #2
 8009c94:	9205      	str	r2, [sp, #20]
 8009c96:	aa58      	add	r2, sp, #352	@ 0x160
 8009c98:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8009c9c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8009ca0:	a944      	add	r1, sp, #272	@ 0x110
 8009ca2:	aa08      	add	r2, sp, #32
 8009ca4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8009ca8:	4694      	mov	ip, r2
 8009caa:	4626      	mov	r6, r4
 8009cac:	2e00      	cmp	r6, #0
 8009cae:	dc4c      	bgt.n	8009d4a <__kernel_rem_pio2f+0x17e>
 8009cb0:	4628      	mov	r0, r5
 8009cb2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009cb6:	f7ff ff1f 	bl	8009af8 <scalbnf>
 8009cba:	eeb0 8a40 	vmov.f32	s16, s0
 8009cbe:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8009cc2:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009cc6:	f000 f9e9 	bl	800a09c <floorf>
 8009cca:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8009cce:	eea0 8a67 	vfms.f32	s16, s0, s15
 8009cd2:	2d00      	cmp	r5, #0
 8009cd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009cd8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8009cdc:	ee17 9a90 	vmov	r9, s15
 8009ce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ce4:	ee38 8a67 	vsub.f32	s16, s16, s15
 8009ce8:	dd41      	ble.n	8009d6e <__kernel_rem_pio2f+0x1a2>
 8009cea:	f104 3cff 	add.w	ip, r4, #4294967295
 8009cee:	a908      	add	r1, sp, #32
 8009cf0:	f1c5 0e08 	rsb	lr, r5, #8
 8009cf4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8009cf8:	fa46 f00e 	asr.w	r0, r6, lr
 8009cfc:	4481      	add	r9, r0
 8009cfe:	fa00 f00e 	lsl.w	r0, r0, lr
 8009d02:	1a36      	subs	r6, r6, r0
 8009d04:	f1c5 0007 	rsb	r0, r5, #7
 8009d08:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8009d0c:	4106      	asrs	r6, r0
 8009d0e:	2e00      	cmp	r6, #0
 8009d10:	dd3c      	ble.n	8009d8c <__kernel_rem_pio2f+0x1c0>
 8009d12:	f04f 0e00 	mov.w	lr, #0
 8009d16:	f109 0901 	add.w	r9, r9, #1
 8009d1a:	4670      	mov	r0, lr
 8009d1c:	4574      	cmp	r4, lr
 8009d1e:	dc68      	bgt.n	8009df2 <__kernel_rem_pio2f+0x226>
 8009d20:	2d00      	cmp	r5, #0
 8009d22:	dd03      	ble.n	8009d2c <__kernel_rem_pio2f+0x160>
 8009d24:	2d01      	cmp	r5, #1
 8009d26:	d074      	beq.n	8009e12 <__kernel_rem_pio2f+0x246>
 8009d28:	2d02      	cmp	r5, #2
 8009d2a:	d07d      	beq.n	8009e28 <__kernel_rem_pio2f+0x25c>
 8009d2c:	2e02      	cmp	r6, #2
 8009d2e:	d12d      	bne.n	8009d8c <__kernel_rem_pio2f+0x1c0>
 8009d30:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009d34:	ee30 8a48 	vsub.f32	s16, s0, s16
 8009d38:	b340      	cbz	r0, 8009d8c <__kernel_rem_pio2f+0x1c0>
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	9306      	str	r3, [sp, #24]
 8009d3e:	f7ff fedb 	bl	8009af8 <scalbnf>
 8009d42:	9b06      	ldr	r3, [sp, #24]
 8009d44:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009d48:	e020      	b.n	8009d8c <__kernel_rem_pio2f+0x1c0>
 8009d4a:	ee60 7a28 	vmul.f32	s15, s0, s17
 8009d4e:	3e01      	subs	r6, #1
 8009d50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d58:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8009d5c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009d60:	ecac 0a01 	vstmia	ip!, {s0}
 8009d64:	ed30 0a01 	vldmdb	r0!, {s0}
 8009d68:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009d6c:	e79e      	b.n	8009cac <__kernel_rem_pio2f+0xe0>
 8009d6e:	d105      	bne.n	8009d7c <__kernel_rem_pio2f+0x1b0>
 8009d70:	1e60      	subs	r0, r4, #1
 8009d72:	a908      	add	r1, sp, #32
 8009d74:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8009d78:	11f6      	asrs	r6, r6, #7
 8009d7a:	e7c8      	b.n	8009d0e <__kernel_rem_pio2f+0x142>
 8009d7c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009d80:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d88:	da31      	bge.n	8009dee <__kernel_rem_pio2f+0x222>
 8009d8a:	2600      	movs	r6, #0
 8009d8c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d94:	f040 8098 	bne.w	8009ec8 <__kernel_rem_pio2f+0x2fc>
 8009d98:	1e60      	subs	r0, r4, #1
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	4550      	cmp	r0, sl
 8009d9e:	da4b      	bge.n	8009e38 <__kernel_rem_pio2f+0x26c>
 8009da0:	2a00      	cmp	r2, #0
 8009da2:	d065      	beq.n	8009e70 <__kernel_rem_pio2f+0x2a4>
 8009da4:	3c01      	subs	r4, #1
 8009da6:	ab08      	add	r3, sp, #32
 8009da8:	3d08      	subs	r5, #8
 8009daa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d0f8      	beq.n	8009da4 <__kernel_rem_pio2f+0x1d8>
 8009db2:	4628      	mov	r0, r5
 8009db4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009db8:	f7ff fe9e 	bl	8009af8 <scalbnf>
 8009dbc:	1c63      	adds	r3, r4, #1
 8009dbe:	aa44      	add	r2, sp, #272	@ 0x110
 8009dc0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8009ec0 <__kernel_rem_pio2f+0x2f4>
 8009dc4:	0099      	lsls	r1, r3, #2
 8009dc6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009dca:	4623      	mov	r3, r4
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	f280 80a9 	bge.w	8009f24 <__kernel_rem_pio2f+0x358>
 8009dd2:	4623      	mov	r3, r4
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f2c0 80c7 	blt.w	8009f68 <__kernel_rem_pio2f+0x39c>
 8009dda:	aa44      	add	r2, sp, #272	@ 0x110
 8009ddc:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8009de0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8009eb8 <__kernel_rem_pio2f+0x2ec>
 8009de4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8009ec4 <__kernel_rem_pio2f+0x2f8>
 8009de8:	2000      	movs	r0, #0
 8009dea:	1ae2      	subs	r2, r4, r3
 8009dec:	e0b1      	b.n	8009f52 <__kernel_rem_pio2f+0x386>
 8009dee:	2602      	movs	r6, #2
 8009df0:	e78f      	b.n	8009d12 <__kernel_rem_pio2f+0x146>
 8009df2:	f852 1b04 	ldr.w	r1, [r2], #4
 8009df6:	b948      	cbnz	r0, 8009e0c <__kernel_rem_pio2f+0x240>
 8009df8:	b121      	cbz	r1, 8009e04 <__kernel_rem_pio2f+0x238>
 8009dfa:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8009dfe:	f842 1c04 	str.w	r1, [r2, #-4]
 8009e02:	2101      	movs	r1, #1
 8009e04:	f10e 0e01 	add.w	lr, lr, #1
 8009e08:	4608      	mov	r0, r1
 8009e0a:	e787      	b.n	8009d1c <__kernel_rem_pio2f+0x150>
 8009e0c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8009e10:	e7f5      	b.n	8009dfe <__kernel_rem_pio2f+0x232>
 8009e12:	f104 3cff 	add.w	ip, r4, #4294967295
 8009e16:	aa08      	add	r2, sp, #32
 8009e18:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8009e1c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009e20:	a908      	add	r1, sp, #32
 8009e22:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8009e26:	e781      	b.n	8009d2c <__kernel_rem_pio2f+0x160>
 8009e28:	f104 3cff 	add.w	ip, r4, #4294967295
 8009e2c:	aa08      	add	r2, sp, #32
 8009e2e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8009e32:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8009e36:	e7f3      	b.n	8009e20 <__kernel_rem_pio2f+0x254>
 8009e38:	a908      	add	r1, sp, #32
 8009e3a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8009e3e:	3801      	subs	r0, #1
 8009e40:	430a      	orrs	r2, r1
 8009e42:	e7ab      	b.n	8009d9c <__kernel_rem_pio2f+0x1d0>
 8009e44:	3201      	adds	r2, #1
 8009e46:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8009e4a:	2e00      	cmp	r6, #0
 8009e4c:	d0fa      	beq.n	8009e44 <__kernel_rem_pio2f+0x278>
 8009e4e:	9905      	ldr	r1, [sp, #20]
 8009e50:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8009e54:	eb0d 0001 	add.w	r0, sp, r1
 8009e58:	18e6      	adds	r6, r4, r3
 8009e5a:	a91c      	add	r1, sp, #112	@ 0x70
 8009e5c:	f104 0c01 	add.w	ip, r4, #1
 8009e60:	384c      	subs	r0, #76	@ 0x4c
 8009e62:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8009e66:	4422      	add	r2, r4
 8009e68:	4562      	cmp	r2, ip
 8009e6a:	da04      	bge.n	8009e76 <__kernel_rem_pio2f+0x2aa>
 8009e6c:	4614      	mov	r4, r2
 8009e6e:	e710      	b.n	8009c92 <__kernel_rem_pio2f+0xc6>
 8009e70:	9804      	ldr	r0, [sp, #16]
 8009e72:	2201      	movs	r2, #1
 8009e74:	e7e7      	b.n	8009e46 <__kernel_rem_pio2f+0x27a>
 8009e76:	9903      	ldr	r1, [sp, #12]
 8009e78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8009e7c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8009e80:	9105      	str	r1, [sp, #20]
 8009e82:	ee07 1a90 	vmov	s15, r1
 8009e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e8a:	2400      	movs	r4, #0
 8009e8c:	ece6 7a01 	vstmia	r6!, {s15}
 8009e90:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8009ec4 <__kernel_rem_pio2f+0x2f8>
 8009e94:	46b1      	mov	r9, r6
 8009e96:	455c      	cmp	r4, fp
 8009e98:	dd04      	ble.n	8009ea4 <__kernel_rem_pio2f+0x2d8>
 8009e9a:	ece0 7a01 	vstmia	r0!, {s15}
 8009e9e:	f10c 0c01 	add.w	ip, ip, #1
 8009ea2:	e7e1      	b.n	8009e68 <__kernel_rem_pio2f+0x29c>
 8009ea4:	ecfe 6a01 	vldmia	lr!, {s13}
 8009ea8:	ed39 7a01 	vldmdb	r9!, {s14}
 8009eac:	3401      	adds	r4, #1
 8009eae:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009eb2:	e7f0      	b.n	8009e96 <__kernel_rem_pio2f+0x2ca>
 8009eb4:	0800a544 	.word	0x0800a544
 8009eb8:	0800a518 	.word	0x0800a518
 8009ebc:	43800000 	.word	0x43800000
 8009ec0:	3b800000 	.word	0x3b800000
 8009ec4:	00000000 	.word	0x00000000
 8009ec8:	9b02      	ldr	r3, [sp, #8]
 8009eca:	eeb0 0a48 	vmov.f32	s0, s16
 8009ece:	eba3 0008 	sub.w	r0, r3, r8
 8009ed2:	f7ff fe11 	bl	8009af8 <scalbnf>
 8009ed6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8009ebc <__kernel_rem_pio2f+0x2f0>
 8009eda:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8009ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ee2:	db19      	blt.n	8009f18 <__kernel_rem_pio2f+0x34c>
 8009ee4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8009ec0 <__kernel_rem_pio2f+0x2f4>
 8009ee8:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009eec:	aa08      	add	r2, sp, #32
 8009eee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ef2:	3508      	adds	r5, #8
 8009ef4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ef8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009efc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009f00:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009f04:	ee10 3a10 	vmov	r3, s0
 8009f08:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009f0c:	ee17 3a90 	vmov	r3, s15
 8009f10:	3401      	adds	r4, #1
 8009f12:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009f16:	e74c      	b.n	8009db2 <__kernel_rem_pio2f+0x1e6>
 8009f18:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009f1c:	aa08      	add	r2, sp, #32
 8009f1e:	ee10 3a10 	vmov	r3, s0
 8009f22:	e7f6      	b.n	8009f12 <__kernel_rem_pio2f+0x346>
 8009f24:	a808      	add	r0, sp, #32
 8009f26:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8009f2a:	9001      	str	r0, [sp, #4]
 8009f2c:	ee07 0a90 	vmov	s15, r0
 8009f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f34:	3b01      	subs	r3, #1
 8009f36:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009f3a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009f3e:	ed62 7a01 	vstmdb	r2!, {s15}
 8009f42:	e743      	b.n	8009dcc <__kernel_rem_pio2f+0x200>
 8009f44:	ecfc 6a01 	vldmia	ip!, {s13}
 8009f48:	ecb5 7a01 	vldmia	r5!, {s14}
 8009f4c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009f50:	3001      	adds	r0, #1
 8009f52:	4550      	cmp	r0, sl
 8009f54:	dc01      	bgt.n	8009f5a <__kernel_rem_pio2f+0x38e>
 8009f56:	4290      	cmp	r0, r2
 8009f58:	ddf4      	ble.n	8009f44 <__kernel_rem_pio2f+0x378>
 8009f5a:	a858      	add	r0, sp, #352	@ 0x160
 8009f5c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009f60:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8009f64:	3b01      	subs	r3, #1
 8009f66:	e735      	b.n	8009dd4 <__kernel_rem_pio2f+0x208>
 8009f68:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	dc09      	bgt.n	8009f82 <__kernel_rem_pio2f+0x3b6>
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	dc27      	bgt.n	8009fc2 <__kernel_rem_pio2f+0x3f6>
 8009f72:	d040      	beq.n	8009ff6 <__kernel_rem_pio2f+0x42a>
 8009f74:	f009 0007 	and.w	r0, r9, #7
 8009f78:	b059      	add	sp, #356	@ 0x164
 8009f7a:	ecbd 8b04 	vpop	{d8-d9}
 8009f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f82:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8009f84:	2b03      	cmp	r3, #3
 8009f86:	d1f5      	bne.n	8009f74 <__kernel_rem_pio2f+0x3a8>
 8009f88:	aa30      	add	r2, sp, #192	@ 0xc0
 8009f8a:	1f0b      	subs	r3, r1, #4
 8009f8c:	4413      	add	r3, r2
 8009f8e:	461a      	mov	r2, r3
 8009f90:	4620      	mov	r0, r4
 8009f92:	2800      	cmp	r0, #0
 8009f94:	dc50      	bgt.n	800a038 <__kernel_rem_pio2f+0x46c>
 8009f96:	4622      	mov	r2, r4
 8009f98:	2a01      	cmp	r2, #1
 8009f9a:	dc5d      	bgt.n	800a058 <__kernel_rem_pio2f+0x48c>
 8009f9c:	ab30      	add	r3, sp, #192	@ 0xc0
 8009f9e:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8009ec4 <__kernel_rem_pio2f+0x2f8>
 8009fa2:	440b      	add	r3, r1
 8009fa4:	2c01      	cmp	r4, #1
 8009fa6:	dc67      	bgt.n	800a078 <__kernel_rem_pio2f+0x4ac>
 8009fa8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8009fac:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8009fb0:	2e00      	cmp	r6, #0
 8009fb2:	d167      	bne.n	800a084 <__kernel_rem_pio2f+0x4b8>
 8009fb4:	edc7 6a00 	vstr	s13, [r7]
 8009fb8:	ed87 7a01 	vstr	s14, [r7, #4]
 8009fbc:	edc7 7a02 	vstr	s15, [r7, #8]
 8009fc0:	e7d8      	b.n	8009f74 <__kernel_rem_pio2f+0x3a8>
 8009fc2:	ab30      	add	r3, sp, #192	@ 0xc0
 8009fc4:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8009ec4 <__kernel_rem_pio2f+0x2f8>
 8009fc8:	440b      	add	r3, r1
 8009fca:	4622      	mov	r2, r4
 8009fcc:	2a00      	cmp	r2, #0
 8009fce:	da24      	bge.n	800a01a <__kernel_rem_pio2f+0x44e>
 8009fd0:	b34e      	cbz	r6, 800a026 <__kernel_rem_pio2f+0x45a>
 8009fd2:	eef1 7a47 	vneg.f32	s15, s14
 8009fd6:	edc7 7a00 	vstr	s15, [r7]
 8009fda:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8009fde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009fe2:	aa31      	add	r2, sp, #196	@ 0xc4
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	429c      	cmp	r4, r3
 8009fe8:	da20      	bge.n	800a02c <__kernel_rem_pio2f+0x460>
 8009fea:	b10e      	cbz	r6, 8009ff0 <__kernel_rem_pio2f+0x424>
 8009fec:	eef1 7a67 	vneg.f32	s15, s15
 8009ff0:	edc7 7a01 	vstr	s15, [r7, #4]
 8009ff4:	e7be      	b.n	8009f74 <__kernel_rem_pio2f+0x3a8>
 8009ff6:	ab30      	add	r3, sp, #192	@ 0xc0
 8009ff8:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8009ec4 <__kernel_rem_pio2f+0x2f8>
 8009ffc:	440b      	add	r3, r1
 8009ffe:	2c00      	cmp	r4, #0
 800a000:	da05      	bge.n	800a00e <__kernel_rem_pio2f+0x442>
 800a002:	b10e      	cbz	r6, 800a008 <__kernel_rem_pio2f+0x43c>
 800a004:	eef1 7a67 	vneg.f32	s15, s15
 800a008:	edc7 7a00 	vstr	s15, [r7]
 800a00c:	e7b2      	b.n	8009f74 <__kernel_rem_pio2f+0x3a8>
 800a00e:	ed33 7a01 	vldmdb	r3!, {s14}
 800a012:	3c01      	subs	r4, #1
 800a014:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a018:	e7f1      	b.n	8009ffe <__kernel_rem_pio2f+0x432>
 800a01a:	ed73 7a01 	vldmdb	r3!, {s15}
 800a01e:	3a01      	subs	r2, #1
 800a020:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a024:	e7d2      	b.n	8009fcc <__kernel_rem_pio2f+0x400>
 800a026:	eef0 7a47 	vmov.f32	s15, s14
 800a02a:	e7d4      	b.n	8009fd6 <__kernel_rem_pio2f+0x40a>
 800a02c:	ecb2 7a01 	vldmia	r2!, {s14}
 800a030:	3301      	adds	r3, #1
 800a032:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a036:	e7d6      	b.n	8009fe6 <__kernel_rem_pio2f+0x41a>
 800a038:	ed72 7a01 	vldmdb	r2!, {s15}
 800a03c:	edd2 6a01 	vldr	s13, [r2, #4]
 800a040:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a044:	3801      	subs	r0, #1
 800a046:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a04a:	ed82 7a00 	vstr	s14, [r2]
 800a04e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a052:	edc2 7a01 	vstr	s15, [r2, #4]
 800a056:	e79c      	b.n	8009f92 <__kernel_rem_pio2f+0x3c6>
 800a058:	ed73 7a01 	vldmdb	r3!, {s15}
 800a05c:	edd3 6a01 	vldr	s13, [r3, #4]
 800a060:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a064:	3a01      	subs	r2, #1
 800a066:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a06a:	ed83 7a00 	vstr	s14, [r3]
 800a06e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a072:	edc3 7a01 	vstr	s15, [r3, #4]
 800a076:	e78f      	b.n	8009f98 <__kernel_rem_pio2f+0x3cc>
 800a078:	ed33 7a01 	vldmdb	r3!, {s14}
 800a07c:	3c01      	subs	r4, #1
 800a07e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a082:	e78f      	b.n	8009fa4 <__kernel_rem_pio2f+0x3d8>
 800a084:	eef1 6a66 	vneg.f32	s13, s13
 800a088:	eeb1 7a47 	vneg.f32	s14, s14
 800a08c:	edc7 6a00 	vstr	s13, [r7]
 800a090:	ed87 7a01 	vstr	s14, [r7, #4]
 800a094:	eef1 7a67 	vneg.f32	s15, s15
 800a098:	e790      	b.n	8009fbc <__kernel_rem_pio2f+0x3f0>
 800a09a:	bf00      	nop

0800a09c <floorf>:
 800a09c:	ee10 3a10 	vmov	r3, s0
 800a0a0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a0a4:	3a7f      	subs	r2, #127	@ 0x7f
 800a0a6:	2a16      	cmp	r2, #22
 800a0a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a0ac:	dc2b      	bgt.n	800a106 <floorf+0x6a>
 800a0ae:	2a00      	cmp	r2, #0
 800a0b0:	da12      	bge.n	800a0d8 <floorf+0x3c>
 800a0b2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800a118 <floorf+0x7c>
 800a0b6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a0ba:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a0be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0c2:	dd06      	ble.n	800a0d2 <floorf+0x36>
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	da24      	bge.n	800a112 <floorf+0x76>
 800a0c8:	2900      	cmp	r1, #0
 800a0ca:	4b14      	ldr	r3, [pc, #80]	@ (800a11c <floorf+0x80>)
 800a0cc:	bf08      	it	eq
 800a0ce:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800a0d2:	ee00 3a10 	vmov	s0, r3
 800a0d6:	4770      	bx	lr
 800a0d8:	4911      	ldr	r1, [pc, #68]	@ (800a120 <floorf+0x84>)
 800a0da:	4111      	asrs	r1, r2
 800a0dc:	420b      	tst	r3, r1
 800a0de:	d0fa      	beq.n	800a0d6 <floorf+0x3a>
 800a0e0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800a118 <floorf+0x7c>
 800a0e4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a0e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a0ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0f0:	ddef      	ble.n	800a0d2 <floorf+0x36>
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	bfbe      	ittt	lt
 800a0f6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800a0fa:	fa40 f202 	asrlt.w	r2, r0, r2
 800a0fe:	189b      	addlt	r3, r3, r2
 800a100:	ea23 0301 	bic.w	r3, r3, r1
 800a104:	e7e5      	b.n	800a0d2 <floorf+0x36>
 800a106:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800a10a:	d3e4      	bcc.n	800a0d6 <floorf+0x3a>
 800a10c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a110:	4770      	bx	lr
 800a112:	2300      	movs	r3, #0
 800a114:	e7dd      	b.n	800a0d2 <floorf+0x36>
 800a116:	bf00      	nop
 800a118:	7149f2ca 	.word	0x7149f2ca
 800a11c:	bf800000 	.word	0xbf800000
 800a120:	007fffff 	.word	0x007fffff

0800a124 <_init>:
 800a124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a126:	bf00      	nop
 800a128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a12a:	bc08      	pop	{r3}
 800a12c:	469e      	mov	lr, r3
 800a12e:	4770      	bx	lr

0800a130 <_fini>:
 800a130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a132:	bf00      	nop
 800a134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a136:	bc08      	pop	{r3}
 800a138:	469e      	mov	lr, r3
 800a13a:	4770      	bx	lr
